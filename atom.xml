<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>指尖上的艺术</title>
  <subtitle>学习的热情，不应为季节的变化而改变</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fingerart.me/"/>
  <updated>2017-06-06T16:36:52.000Z</updated>
  <id>http://fingerart.me/</id>
  
  <author>
    <name>George</name>
    <email>george@chengguo.io</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解Docker三大组件之镜像</title>
    <link href="http://fingerart.me/2017/06/06/%E7%90%86%E8%A7%A3Docker%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%95%9C%E5%83%8F/"/>
    <id>http://fingerart.me/2017/06/06/理解Docker三大组件之镜像/</id>
    <published>2017-06-06T15:40:55.000Z</published>
    <updated>2017-06-06T16:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<blockquote>
<p>操作系统分为内核和用户空间，对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p>
</blockquote>
<h2 id="镜像的分层存储"><a href="#镜像的分层存储" class="headerlink" title="镜像的分层存储"></a>镜像的分层存储</h2><p>因为完整的镜像体积过于庞大，Docker你用Union FS技术将镜像进行分层存储；与ISO不同，Docker镜像是一个虚拟概念，由一组文件系统组成或者说是多层文件系统联合组成。</p>
<p>镜像是一层一层构建的，前一层是后一层的基础，如果删除前一层，仅仅是标记为删除，在容器中看不见，但还是会存在镜像中，所以构建镜像时需额外小心。</p>
<h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p><code>docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;</code></p>
<ul>
<li>Docker Registry地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。</li>
<li>仓库名：&lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</li>
</ul>
<h2 id="利用-commit-理解镜像构成"><a href="#利用-commit-理解镜像构成" class="headerlink" title="利用 commit 理解镜像构成"></a>利用 commit 理解镜像构成</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名
    
    </summary>
    
    
      <category term="Docker" scheme="http://fingerart.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>解决mac下在线安装Visual Studio 无法连接到网络</title>
    <link href="http://fingerart.me/2017/06/04/mac%E4%B8%8B%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85Visual-Studio-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0%E7%BD%91%E7%BB%9C/"/>
    <id>http://fingerart.me/2017/06/04/mac下在线安装Visual-Studio-无法连接到网络/</id>
    <published>2017-06-04T14:16:07.000Z</published>
    <updated>2017-06-06T15:32:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>准备要接手C#的项目了，自然需要好的工具(Visual Studio)。在微软的官网下载的安装包是一个在线的安装程序，在安装的第一步(检查网络环境)，出现无法连接到网络，有网络并且Shadowsocks也是开着全局的。</p>
<h3 id="一、安装proxychains4"><a href="#一、安装proxychains4" class="headerlink" title="一、安装proxychains4"></a>一、安装proxychains4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install proxychains-ng</div></pre></td></tr></table></figure>
<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/etc/proxychains.conf</div></pre></td></tr></table></figure>
<h3 id="三、使用proxychains4安装"><a href="#三、使用proxychains4安装" class="headerlink" title="三、使用proxychains4安装"></a>三、使用proxychains4安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">proxychains4 open /Volumes/Visual\ Studio\ Installer/Install\ Visual\ Studio.app</div><div class="line"></div><div class="line">//open 所在路径的应用</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备要接手C#的项目了，自然需要好的工具(Visual Studio)。在微软的官网下载的安装包是一个在线的安装程序，在安装的第一步(检查网络环境)，出现无法连接到网络，有网络并且Shadowsocks也是开着全局的。&lt;/p&gt;
&lt;h3 id=&quot;一、安装proxychains
    
    </summary>
    
    
      <category term="Visual Studio" scheme="http://fingerart.me/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Docker 新手入门</title>
    <link href="http://fingerart.me/2017/05/25/Docker-%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://fingerart.me/2017/05/25/Docker-新手入门/</id>
    <published>2017-05-24T16:07:48.000Z</published>
    <updated>2017-06-06T15:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://fingerart.qiniudn.com/image/docker.png" alt=""></p>
<p>该文章以Mac为例。</p>
<h2 id="一、创建你的第一个Docker容器"><a href="#一、创建你的第一个Docker容器" class="headerlink" title="一、创建你的第一个Docker容器"></a>一、创建你的第一个Docker容器</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p>请至Docker官网下载Mac版：<a href="https://www.docker.com/docker-mac" target="_blank" rel="external">https://www.docker.com/docker-mac</a></p>
<a id="more"></a>
<h3 id="1-2-创建Web服务器"><a href="#1-2-创建Web服务器" class="headerlink" title="1.2 创建Web服务器"></a>1.2 创建Web服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Mac:~ fingerart$ docker run <span class="_">-d</span> -p 80:80 --name webserver nginx</div><div class="line"></div><div class="line">Unable to find image <span class="string">'nginx:latest'</span> locally</div><div class="line">latest: Pulling from library/nginx</div><div class="line">ff3d52d8f55f: Pull complete</div><div class="line">b05436c68d6a: Pull complete</div><div class="line">961dd3f5d836: Pull complete</div><div class="line">Digest: sha256:12d30ce421ad530494d588f87b2328ddc3cae666e77ea1ae5ac3a6661e52cde6</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</div><div class="line">97503a2fbca4c2796975085c7d6e853243522c974803e23805e6d301787e9133</div></pre></td></tr></table></figure>
<p>因为是第一次使用，Docker会从Docker Hub拉取Nginx，拉取完成后你可以在浏览器访问 <code>http://localhost</code> 即可访问到Nginx的欢迎页。<br>注意，如果你有程序占用了80端口，请先关闭。</p>
<p>运行 <code>docker ps</code> 你会看到正在运行的Web服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES</div><div class="line">97503a2fbca4        nginx               <span class="string">"nginx -g 'daemon ..."</span>   About a minute ago   Up About a minute   0.0.0.0:80-&gt;80/tcp   webserver</div></pre></td></tr></table></figure>
<p><img src="http://fingerart.qiniudn.com/image/docker-preview-nginx.png" alt=""></p>
<h3 id="1-3-操作"><a href="#1-3-操作" class="headerlink" title="1.3 操作"></a>1.3 操作</h3><ul>
<li>开启容器: <code>docker start webserver</code></li>
<li>停止容器: <code>docker stop webwerver</code></li>
<li>查看所有容器: <code>docker ps -a</code></li>
<li>移除容器: <code>docker rm -f webserver</code></li>
<li>移除镜像(通过IMAGE ID或名称): <code>docker rmi nginx</code></li>
</ul>
<blockquote>
<p>更多信息请查阅官方文档 <a href="https://docs.docker.com/docker-for-mac" target="_blank" rel="external">https://docs.docker.com/docker-for-mac</a></p>
</blockquote>
<h2 id="二、深入理解Docker"><a href="#二、深入理解Docker" class="headerlink" title="二、深入理解Docker"></a>二、深入理解Docker</h2><h3 id="2-1-底层实现"><a href="#2-1-底层实现" class="headerlink" title="2.1 底层实现"></a>2.1 底层实现</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该文章以Mac为例。&lt;/p&gt;
&lt;h2 id=&quot;一、创建你的第一个Docker容器&quot;&gt;&lt;a href=&quot;#一、创建你的第一个Docker容器&quot; class=&quot;headerlink&quot; title=&quot;一、创建你的第一个Docker容器&quot;&gt;&lt;/a&gt;一、创建你的第一个Docker容器&lt;/h2&gt;&lt;h3 id=&quot;1-1-安装&quot;&gt;&lt;a href=&quot;#1-1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装&quot;&gt;&lt;/a&gt;1.1 安装&lt;/h3&gt;&lt;p&gt;请至Docker官网下载Mac版：&lt;a href=&quot;https://www.docker.com/docker-mac&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://fingerart.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ITextPdf 签名集成问题</title>
    <link href="http://fingerart.me/2017/03/17/ITextPdf%E7%AD%BE%E5%90%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://fingerart.me/2017/03/17/ITextPdf签名问题/</id>
    <published>2017-03-17T13:12:56.000Z</published>
    <updated>2017-03-17T14:12:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>因项目的需要需要使用对pdf进行签名，但使用ITextPdf进行签名遇到一些错误，官方说的不够明确，在此记录一下，供后面遇到该问题的朋友参考。</p>
<h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p>引用的 ITextPdf 下</p>
<blockquote>
<p>java.lang.ClassNotFoundException: org.bouncycastle.*</p>
</blockquote>
<p>如果你遇到了这个错误你需要添加另外一个用于签名的库：<a href="https://www.bouncycastle.org" target="_blank" rel="external">bouncycastle</a> (bcprov-jdk15on-156.jar、bcpkix-jdk15on-156.jar、bcmail-jdk15on-156.jar)</p>
<p><strong>这里请不要引用错了ITextG库</strong></p>
<a id="more"></a>
<h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p>如果你引用了用于Android的ITextG</p>
<blockquote>
<p>Could not find class org.spongycastle.*</p>
</blockquote>
<p>因为这个库使用了用于Android加密的库 <a href="https://rtyley.github.io/spongycastle" target="_blank" rel="external">spongycastle</a>，而spongycastle是基于bouncycastle的。</p>
<p>请参考 <a href="http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android" target="_blank" rel="external">http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目的需要需要使用对pdf进行签名，但使用ITextPdf进行签名遇到一些错误，官方说的不够明确，在此记录一下，供后面遇到该问题的朋友参考。&lt;/p&gt;
&lt;h2 id=&quot;Q1&quot;&gt;&lt;a href=&quot;#Q1&quot; class=&quot;headerlink&quot; title=&quot;Q1&quot;&gt;&lt;/a&gt;Q1&lt;/h2&gt;&lt;p&gt;引用的 ITextPdf 下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.ClassNotFoundException: org.bouncycastle.*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你遇到了这个错误你需要添加另外一个用于签名的库：&lt;a href=&quot;https://www.bouncycastle.org&quot;&gt;bouncycastle&lt;/a&gt; (bcprov-jdk15on-156.jar、bcpkix-jdk15on-156.jar、bcmail-jdk15on-156.jar)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里请不要引用错了ITextG库&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IText" scheme="http://fingerart.me/tags/IText/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ-插件开发指南</title>
    <link href="http://fingerart.me/2017/02/16/IntelliJ-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://fingerart.me/2017/02/16/IntelliJ-插件开发指南/</id>
    <published>2017-02-16T04:05:40.000Z</published>
    <updated>2017-02-16T04:07:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待续……&lt;/p&gt;

    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>关于ThinkPHP5 子域名路由问题</title>
    <link href="http://fingerart.me/2016/12/01/%E5%85%B3%E4%BA%8EThinkPHP5-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://fingerart.me/2016/12/01/关于ThinkPHP5-子域名路由问题/</id>
    <published>2016-11-30T18:18:43.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>准备在一个CRM的项目，本想使用Laravel框架的，但是并不怎么熟练，加上时间紧迫，最后决定使用ThinkPHP。</p>
<p>因为TP5是新出的一个版本，改动有些大，在看完文档中的路由（域名检测）部分后，就希望能做到这样的效果：</p>
<p>定义某个api路由规则时，可以根据 <code>api.domain.com</code> 子域名来检测；非 <code>api.domain.com</code> 子域名访问其他模块。但是根据文档配置后却会报 <strong>模块不存在</strong> </p>
<p>再三查看文档后决定没错，后来跟进源码查看关键位置</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//thinkphp/library/think/Route.php</span></div><div class="line"></div><div class="line"><span class="number">182</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($rule[<span class="string">'__domain__'</span>])) &#123;</div><div class="line"><span class="number">183</span>     <span class="keyword">self</span>::domain($rule[<span class="string">'__domain__'</span>]);</div><div class="line"><span class="number">184</span>     <span class="keyword">unset</span>($rule[<span class="string">'__domain__'</span>]);</div><div class="line"><span class="number">185</span> &#125;</div><div class="line"></div><div class="line"><span class="number">119</span> <span class="keyword">self</span>::$rules[<span class="string">'domain'</span>][$domain][<span class="string">'[bind]'</span>] = [$rule, $option, $pattern];</div><div class="line"></div><div class="line"><span class="number">1132</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($option[<span class="string">'domain'</span>]) &amp;&amp; !in_array($option[<span class="string">'domain'</span>], [$_SERVER[<span class="string">'HTTP_HOST'</span>], <span class="keyword">self</span>::$subDomain])) <span class="comment">// 域名检测</span></div></pre></td></tr></table></figure>
<p>会发现通过如下设置即可完成：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//route.php</span></div><div class="line"></div><div class="line"><span class="string">'__domain__'</span>=&gt;[</div><div class="line">   <span class="string">'api'</span> =&gt; <span class="string">'api/User/index'</span>,</div><div class="line">],</div><div class="line"></div><div class="line"><span class="string">'user'</span> =&gt; [<span class="string">'api/User/create'</span>, [<span class="string">'method'</span> =&gt; <span class="string">'get'</span>, <span class="string">'domain'</span>=&gt;<span class="string">'api'</span>]],</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备在一个CRM的项目，本想使用Laravel框架的，但是并不怎么熟练，加上时间紧迫，最后决定使用ThinkPHP。&lt;/p&gt;
&lt;p&gt;因为TP5是新出的一个版本，改动有些大，在看完文档中的路由（域名检测）部分后，就希望能做到这样的效果：&lt;/p&gt;
&lt;p&gt;定义某个api路由规则时
    
    </summary>
    
    
      <category term="ThinkPHP" scheme="http://fingerart.me/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件ApiDebugger v1.0.0</title>
    <link href="http://fingerart.me/2016/10/24/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6ApiDebugger-v1-0-0/"/>
    <id>http://fingerart.me/2016/10/24/IntelliJ-IDEA-插件ApiDebugger-v1-0-0/</id>
    <published>2016-10-24T02:15:17.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想做一个在IDEA上面直接进行api接口调试的插件，直到上周五才完成第一个版本，这个版本只有一个很简单的api调试功能，支持GET/POST，添加参数、Header、Cookie、File。<br>当然目前该插件还有很多不足的地方，不能支持参数信息的加密等，因此不能支持复杂的加密接口。后面我会弥补这一缺陷。</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>Settings</code> -&gt; <code>Plugins</code> -&gt; search: <code>Api Debugger</code> -&gt; <code>Install</code> -&gt; restart IDEA</p>
<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><img src="http://fingerart.qiniudn.com/2016-10-24-2016-10-24_10-38-17.gif" alt="2016-10-24_10-38-17"></p>
<a id="more"></a>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://github.com/fingerart/ApiDebugger" target="_blank" rel="external">https://github.com/fingerart/ApiDebugger</a></p>
<blockquote>
<p>你的支持是我最大的动力，欢迎star、issue……</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想做一个在IDEA上面直接进行api接口调试的插件，直到上周五才完成第一个版本，这个版本只有一个很简单的api调试功能，支持GET/POST，添加参数、Header、Cookie、File。&lt;br&gt;当然目前该插件还有很多不足的地方，不能支持参数信息的加密等，因此不能支持复杂的加密接口。后面我会弥补这一缺陷。&lt;/p&gt;
&lt;h3 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Plugins&lt;/code&gt; -&amp;gt; search: &lt;code&gt;Api Debugger&lt;/code&gt; -&amp;gt; &lt;code&gt;Install&lt;/code&gt; -&amp;gt; restart IDEA&lt;/p&gt;
&lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/2016-10-24-2016-10-24_10-38-17.gif&quot; alt=&quot;2016-10-24_10-38-17&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件 Open Uploader 正式发布</title>
    <link href="http://fingerart.me/2016/10/12/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6-Open-Uploader-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/"/>
    <id>http://fingerart.me/2016/10/12/IntelliJ-IDEA-插件-Open-Uploader-正式发布/</id>
    <published>2016-10-11T17:17:12.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>IntelliJ IDEA 文件上传插件，不限制任何站点，支持自定义参数</p>
</blockquote>
<p>可能你会遇到经常性的发布测试包给测试，也许你的选择是通过聊天工具发送、上传到一些测试的分发平台，之前我们公司使用的方式正是通过测试分发平台，但是在使用某个平台后，竟然开始收费了，😡，于是就打算做个IntelliJ IDEA插件，快速上传文件到自己公司的服务器或者其他地方。</p>
<p><img src="http://fingerart.qiniudn.com/2016-10-12-open_uploader_preview.gif" alt="open_uploader_previe"></p>
<a id="more"></a>
<p>源码：<a href="https://github.com/fingerart/Open-Uploader" target="_blank" rel="external">https://github.com/fingerart/Open-Uploader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IntelliJ IDEA 文件上传插件，不限制任何站点，支持自定义参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能你会遇到经常性的发布测试包给测试，也许你的选择是通过聊天工具发送、上传到一些测试的分发平台，之前我们公司使用的方式正是通过测试分发平台，但是在使用某个平台后，竟然开始收费了，😡，于是就打算做个IntelliJ IDEA插件，快速上传文件到自己公司的服务器或者其他地方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/2016-10-12-open_uploader_preview.gif&quot; alt=&quot;open_uploader_previe&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Api文档自动生成之apiDoc简介</title>
    <link href="http://fingerart.me/2016/09/16/Api%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B9%8Bapidoc%E7%AE%80%E4%BB%8B/"/>
    <id>http://fingerart.me/2016/09/16/Api文档自动生成之apidoc简介/</id>
    <published>2016-09-16T04:25:26.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/apidoc/apidoc" target="_blank" rel="external">apiDoc</a> 是一个基于nodejs自动生成RESTful Api文档的工具，提供了api版本差异比较、自定义末班等功能。</p>
<p>去年和朋友开发一个app，我包下了Android和后端，当时为了让他更好的看懂api和便于后期的维护，专门写了一个api的PHP程序，发现这个api程序还欠缺很多东西加上没有太多时间就不再维护了。后来发现了apiDoc这个库，一直放着没有时间来仔细看，刚好这两天有时间，把这个库学习完了。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">npm</a> 的前提下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install apidoc -g</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">## 目录结构</div><div class="line"></div><div class="line">|- apidoc/</div><div class="line">  |- apidoc.json</div><div class="line">  |- header.md</div><div class="line">  |- footer.md</div><div class="line">  |- src/</div><div class="line">    |- _apidoc.java</div><div class="line">    |- User.java</div><div class="line">  |- doc/</div><div class="line">  |- template/</div></pre></td></tr></table></figure>
<h4 id="生成api文档"><a href="#生成api文档" class="headerlink" title="生成api文档"></a>生成api文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apidoc -i src/ -o doc/</div></pre></td></tr></table></figure>
<h4 id="apidoc-参数"><a href="#apidoc-参数" class="headerlink" title="apidoc 参数"></a>apidoc 参数</h4><ul>
<li>-i<br>读取用于生成文档的目录，比如src目录</li>
<li>-o<br>生成api文档静态页面的目录</li>
<li>-t<br>自定义的模板目录，默认使用apiDoc的模板</li>
<li>-f “.*\.java$”<br>解析符合正则表达式的文件</li>
<li>-h<br>显示帮助信息</li>
</ul>
<h4 id="配置-apidoc-json"><a href="#配置-apidoc-json" class="headerlink" title="配置 apidoc.json"></a>配置 apidoc.json</h4><p>在执行 <code>apidoc</code> 命令的目录(apidoc/)创建apidoc.json文件，并加入以下内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"FingerArt API Document"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"A sample of User API document generated from apiDoc"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"FingerArt API"</span>,</div><div class="line">  <span class="attr">"url"</span> : <span class="string">""</span>,</div><div class="line">  <span class="attr">"sampleUrl"</span>: <span class="string">"http://fingerart.me:44"</span>,</div><div class="line">  <span class="attr">"header"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"Overview"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"header.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"footer"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"Copyright"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"footer.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"template"</span>: &#123;</div><div class="line">    <span class="attr">"withGenerator"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>name<br>文档内容的最大标题</li>
<li>version<br>文档的版本号，一般保持在最新</li>
<li>description<br>文档的描述</li>
<li>title<br>显示网页的title</li>
<li>url<br>每个api地址前缀</li>
<li>sampleUrl<br>请求示例工具的地址前缀，当有此项时，会出现该工具</li>
<li>header/footer<br>文档的头部和尾部<ul>
<li>title<br>头/尾部标题</li>
<li>filename<br>头部markdown文件</li>
</ul>
</li>
<li>template<ul>
<li>withCompare<br>自动生成版本比较功能的文件，默认 <code>true</code></li>
<li>withGenerator<br>生成默认的apidoc版权，默认 <code>true</code></li>
</ul>
</li>
</ul>
<h4 id="apiDoc-注解"><a href="#apiDoc-注解" class="headerlink" title="apiDoc 注解"></a>apiDoc 注解</h4><ul>
<li>@api {method} path [title]<br><code>method</code> 请求方式: get/post/put…<br><code>path</code> User/register<br><code>title</code> 标题</li>
<li>@apiDescription text<br>api描述</li>
<li>@apiError [(group)] [{type}] field [description]</li>
<li>@apiErrorExample [{type}] [title]<br>example</li>
<li>@apiExample [{type}] title<br>example</li>
<li>@apiGroup name</li>
<li>@apiHeader [(group)] [{type}] [field=defaultValue] [description]</li>
<li>@apiHeaderExample [{type}] [title]<br>example</li>
<li>@apiIgnore [hint]</li>
<li>@apiName name</li>
<li>@apiParam [(group)] [{type}] [field=defaultValue] [description]</li>
<li>@apiParamExample [{type}] [title]<br>example</li>
<li>@apiPermission name</li>
<li>@apiSampleRequest url</li>
<li>@apiSuccess [(group)] [{type}] field [description]</li>
<li>@apiSuccessExample [{type}] [title]<br>example</li>
<li>@apiUse name</li>
<li>@apiVersion version</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>无法生成带有历史版本比较功能<br>必须同时加上 <code>@apiVersion</code> <code>@apiName</code> <code>@apiGroup</code> 这个三个注解</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>官方文档: <a href="http://apidocjs.com/" target="_blank" rel="external">http://apidocjs.com</a><br>官方示例: <a href="https://github.com/apidoc/apidoc/tree/master/example" target="_blank" rel="external">https://github.com/apidoc/apidoc/tree/master/example</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apidoc/apidoc&quot;&gt;apiDoc&lt;/a&gt; 是一个基于nodejs自动生成RESTful Api文档的工具，提供了api版本差异比较、自定义末班等功能。&lt;/p&gt;
&lt;p&gt;去年和朋友开发一个app，我包下了Android和后端，当时为了让他更好的看懂api和便于后期的维护，专门写了一个api的PHP程序，发现这个api程序还欠缺很多东西加上没有太多时间就不再维护了。后来发现了apiDoc这个库，一直放着没有时间来仔细看，刚好这两天有时间，把这个库学习完了。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;安装 &lt;a href=&quot;https://nodejs.org/zh-cn/&quot;&gt;npm&lt;/a&gt; 的前提下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install apidoc -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="apiDoc" scheme="http://fingerart.me/tags/apiDoc/"/>
    
  </entry>
  
  <entry>
    <title>Picasso源码解析 一</title>
    <link href="http://fingerart.me/2016/09/13/Picasso%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80/"/>
    <id>http://fingerart.me/2016/09/13/Picasso源码解析-一/</id>
    <published>2016-09-13T15:54:05.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待续&lt;/p&gt;

    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
      <category term="Picasso" scheme="http://fingerart.me/tags/Picasso/"/>
    
  </entry>
  
  <entry>
    <title>了解 Android HandlerThread</title>
    <link href="http://fingerart.me/2016/09/13/%E4%BA%86%E8%A7%A3-Android-HandlerThread/"/>
    <id>http://fingerart.me/2016/09/13/了解-Android-HandlerThread/</id>
    <published>2016-09-13T14:47:00.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在分析 <a href="http://github.com/square/picasso" target="_blank" rel="external">Picasso</a> 源码是时看到里面有一个HandlerThread类，之前从未见过，查看HandlerThread源码并跟踪Picasso的用法，理解了这个类的作用。通俗的讲就是这个线程不是用来直接执行自己的run方法的，而是将Message发送到该线程的MessageQueen中，间接工作。</p>
<ul>
<li><a href="/2015/08/08/Handler和Message-异步消息机制-1/" title="了解Handler消息机制1">了解Handler消息机制1</a></li>
<li><a href="/2015/08/10/Handler和Message-异步消息机制-2/" title="了解Handler消息机制2">了解Handler消息机制2</a>
</li>
</ul>
<h3 id="HandlerThread-源码"><a href="#HandlerThread-源码" class="headerlink" title="HandlerThread 源码"></a>HandlerThread 源码</h3><blockquote>
<p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>
<p>HandlerThread是一个线程，该线程会创建一个Looper，Looper可用于创建Handler，必需要调用 <code>start()</code></p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">   mTid = Process.myTid();</div><div class="line">   Looper.prepare();</div><div class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">       mLooper = Looper.myLooper();</div><div class="line">       notifyAll();</div><div class="line">   &#125;</div><div class="line">   Process.setThreadPriority(mPriority);</div><div class="line">   onLooperPrepared();</div><div class="line">   Looper.loop();</div><div class="line">   mTid = -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法在 <code>start()</code> 之后执行，创建Looper、MessageQueen，然后 <code>loop()</code> 让这个Looper工作。</p>
<h3 id="Picasso源码中的使用示例"><a href="#Picasso源码中的使用示例" class="headerlink" title="Picasso源码中的使用示例"></a>Picasso源码中的使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package com.squareup.picasso.Dispatcher</span></div><div class="line"></div><div class="line">Dispatcher(Context context, ExecutorService service</div><div class="line">, Handler mainThreadHandler,</div><div class="line">      Downloader downloader, Cache cache, Stats stats) &#123;</div><div class="line">    <span class="keyword">this</span>.dispatcherThread = <span class="keyword">new</span> DispatcherThread();</div><div class="line">    <span class="keyword">this</span>.dispatcherThread.start();</div><div class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> DispatcherHandler(dispatcherThread.getLooper(), <span class="keyword">this</span>);</div><div class="line">    <span class="comment">//some code ...</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatchSubmit</span><span class="params">(Action action)</span> </span>&#123;</div><div class="line">    handler.sendMessage(handler.obtainMessage(REQUEST_SUBMIT, action));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package com.squareup.picasso.Dispatcher.DispatcherHandler</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dispatcher dispatcher;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatcherHandler</span><span class="params">(Looper looper, Dispatcher dispatcher)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(looper);</div><div class="line">        <span class="keyword">this</span>.dispatcher = dispatcher;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">          <span class="keyword">case</span> REQUEST_SUBMIT:</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="comment">//some case ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在分析 &lt;a href=&quot;http://github.com/square/picasso&quot;&gt;Picasso&lt;/a&gt; 源码是时看到里面有一个HandlerThread类，之前从未见过，查看HandlerThread源码并跟踪Picasso的用法，理解了这个类的作用。通俗的讲就是这个线程不是用来直接执行自己的run方法的，而是将Message发送到该线程的MessageQueen中，间接工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/08/08/Handler和Message-异步消息机制-1/&quot; title=&quot;了解Handler消息机制1&quot;&gt;了解Handler消息机制1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/08/10/Handler和Message-异步消息机制-2/&quot; title=&quot;了解Handler消息机制2&quot;&gt;了解Handler消息机制2&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HandlerThread-源码&quot;&gt;&lt;a href=&quot;#HandlerThread-源码&quot; class=&quot;headerlink&quot; title=&quot;HandlerThread 源码&quot;&gt;&lt;/a&gt;HandlerThread 源码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.&lt;/p&gt;
&lt;p&gt;HandlerThread是一个线程，该线程会创建一个Looper，Looper可用于创建Handler，必需要调用 &lt;code&gt;start()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>无线连接-宿主机与VirtualBox中的Linux互相通信</title>
    <link href="http://fingerart.me/2016/09/04/%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8EVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/"/>
    <id>http://fingerart.me/2016/09/04/无线连接-宿主机与VirtualBox中的Linux互相通信/</id>
    <published>2016-09-04T11:47:37.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>有线连接中的配置方式在上篇博文已经讲过了。</p>
<h4 id="设置连接方式"><a href="#设置连接方式" class="headerlink" title="设置连接方式"></a>设置连接方式</h4><p>将网卡1设置为桥接网卡方式如图<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/BritualBox_Bird.png" alt=""></p>
<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>请参照你的宿主机设置好网关、掩码、ip地址、BOOTPROTO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0</div><div class="line">HWADDR=08:00:27:12:41:D3</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">GATEWAY=192.168.0.1</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d691-d2be-54d0-8c7a-c1612cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=static</div></pre></td></tr></table></figure>
<p>填写完成后重启网络服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_test.gif" alt=""></p>
<p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_linux_test.gif" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有线连接中的配置方式在上篇博文已经讲过了。&lt;/p&gt;
&lt;h4 id=&quot;设置连接方式&quot;&gt;&lt;a href=&quot;#设置连接方式&quot; class=&quot;headerlink&quot; title=&quot;设置连接方式&quot;&gt;&lt;/a&gt;设置连接方式&lt;/h4&gt;&lt;p&gt;将网卡1设置为桥接网卡方式如图&lt;br&gt;&lt;img src=&quot;http://77fzuw.com1.z0.glb.clouddn.com/image/BritualBox_Bird.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h4&gt;&lt;p&gt;请参照你的宿主机设置好网关、掩码、ip地址、BOOTPROTO&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>有线连接-宿主机跟VirtualBox中的Linux互相通信</title>
    <link href="http://fingerart.me/2016/09/04/%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%B7%9FVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/"/>
    <id>http://fingerart.me/2016/09/04/有线连接-宿主机跟VirtualBox中的Linux互相通信/</id>
    <published>2016-09-04T10:53:44.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文中介绍了我在<strong>有线连接</strong>下，使用VirtualBox创建CentOS时遇到Linux访问外网和宿主机访问Linux的问题后的解决办法，文中宿主机是指实体到笔记本或者台式电脑。</p>
<h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><p>Virtual中有6种连接方式，分别为：网络地址转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-Only）网络、通用驱动。<br>这里只讲后面会用到的2种方式的作用。</p>
<a id="more"></a>
<h4 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h4><p><strong>Linux可以访问宿主机</strong>，反向的无法访问。</p>
<h4 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h4><p><strong>宿主机可以访问Linux</strong>，反向无法访问。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>网卡1连接方式设置为<strong>网络地址转换（NAT）</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net1.png" alt=""><br>启用网卡2，连接方式设置为<strong>桥接网卡</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net2.png" alt=""></p>
<h4 id="Linux配置"><a href="#Linux配置" class="headerlink" title="Linux配置"></a>Linux配置</h4><h4 id="配置eth0"><a href="#配置eth0" class="headerlink" title="配置eth0"></a>配置eth0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>配置如下(千万不要配GATEWAY)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HWADDR=08:00:27:12:41:D3</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=dhcp</div></pre></td></tr></table></figure></p>
<h4 id="配置eth1"><a href="#配置eth1" class="headerlink" title="配置eth1"></a>配置eth1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth1</div></pre></td></tr></table></figure>
<p>配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth1</div><div class="line">HWADDR=08:00:27:EB:B7:9A</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=static</div></pre></td></tr></table></figure></p>
<h3 id="重启network"><a href="#重启network" class="headerlink" title="重启network"></a>重启network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_test.gif" alt=""></p>
<p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_linux_test.gif" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文中介绍了我在&lt;strong&gt;有线连接&lt;/strong&gt;下，使用VirtualBox创建CentOS时遇到Linux访问外网和宿主机访问Linux的问题后的解决办法，文中宿主机是指实体到笔记本或者台式电脑。&lt;/p&gt;
&lt;h3 id=&quot;连接方式&quot;&gt;&lt;a href=&quot;#连接方式&quot; class=&quot;headerlink&quot; title=&quot;连接方式&quot;&gt;&lt;/a&gt;连接方式&lt;/h3&gt;&lt;p&gt;Virtual中有6种连接方式，分别为：网络地址转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-Only）网络、通用驱动。&lt;br&gt;这里只讲后面会用到的2种方式的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>认识与学习BASH</title>
    <link href="http://fingerart.me/2016/09/03/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AD%A6%E4%B9%A0BASH/"/>
    <id>http://fingerart.me/2016/09/03/认识与学习BASH/</id>
    <published>2016-09-03T12:41:58.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识shell"><a href="#认识shell" class="headerlink" title="认识shell"></a>认识shell</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>shell是使用者与内核沟通以达到理想工作的方式，Linux发展中出现多种shell，Bourne Again SHell是Linux使用的一个shell版本简称bash。</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>~/.bash_history</code> 记录了前一次登录是说运行的命令，当前登录说运行的命令记录在内存中，成功注销后悔记录到 <code>~/.bash_history</code> 中。</p>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>命令的别名</p>
<h3 id="内建命令type"><a href="#内建命令type" class="headerlink" title="内建命令type"></a>内建命令type</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@www ~]<span class="comment"># type [-tpa] name</span></div><div class="line">选项与参数：</div><div class="line">    ：不加任何选项与参数时，<span class="built_in">type</span> 会显示出 name 是外部命令还是 bash 内建命令</div><div class="line">-t  ：当加入 -t 参数时，<span class="built_in">type</span> 会将 name 以底下这些字眼显示出他的意义：</div><div class="line">      file    ：表示为外部命令；</div><div class="line">      <span class="built_in">alias</span>   ：表示该命令为命令别名所配置的名称；</div><div class="line">      <span class="built_in">builtin</span> ：表示该命令为 bash 内建的命令功能；</div><div class="line">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</div><div class="line"><span class="_">-a</span>  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 <span class="built_in">alias</span></div></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;认识shell&quot;&gt;&lt;a href=&quot;#认识shell&quot; class=&quot;headerlink&quot; title=&quot;认识shell&quot;&gt;&lt;/a&gt;认识shell&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://fingerart.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="http://fingerart.me/2016/08/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fingerart.me/2016/08/31/设计模式之状态模式/</id>
    <published>2016-08-31T11:09:02.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>此篇博文是我阅读《设计模式》中状态模式一章后的总结</p>
</blockquote>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>考虑一个表示网络连接的类TCPConnection。一个TCPConnection对象的状态处于若干不同状态之一：建立连接（Established）、正在监听（Listening）、连接已关闭（Closed）。当一个TCPConnection对象收到其它对象的请求时，它根据自身的当前状态作出不同的反应。</p>
<a id="more"></a>
<h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h3><ul>
<li>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。</li>
<li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li>
</ul>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><img src="http://www.plantuml.com/plantuml/svg/ZOz13e8m44NNpYach3IcahXaGO8cNi0Jb390az9YEneJmjs58iObcrczzoOVb94XuDLPfZVZ03k1TvPC6EOBkoE-dAxGq-D9WVS7645FhA-beYyvpDGWoy1UAXuNePMsCXJvtmlbYKDq2jHTRwWZo-6_ia6zR5HXtUI4rqtB8bzei6vIIiViEdJrEZt392uM-Tf808AIXl0CCO2rcqoFBNEVfUbDsuPyuVdK4Nm0">
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此篇博文是我阅读《设计模式》中状态模式一章后的总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。&lt;/p&gt;
&lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h3&gt;&lt;p&gt;考虑一个表示网络连接的类TCPConnection。一个TCPConnection对象的状态处于若干不同状态之一：建立连接（Established）、正在监听（Listening）、连接已关闭（Closed）。当一个TCPConnection对象收到其它对象的请求时，它根据自身的当前状态作出不同的反应。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://fingerart.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 多版本构建指南</title>
    <link href="http://fingerart.me/2016/06/15/Android-Studio-%E5%A4%9A%E7%89%88%E6%9C%AC%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>http://fingerart.me/2016/06/15/Android-Studio-多版本构建指南/</id>
    <published>2016-06-14T16:00:00.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在一个APP的基础上，构建另外一个APP，与之不同的是部分代码和资源改变<br>为了节约工作量和更好的后期维护，我们决定共用同一套代码。</p>
<p>像这种需求我已经遇到好几次了，这里只讲在Android Studio上进行多版本构建的步骤和一些配置</p>
<h3 id="多版本构建"><a href="#多版本构建" class="headerlink" title="多版本构建"></a>多版本构建</h3><h4 id="Gradle简介"><a href="#Gradle简介" class="headerlink" title="Gradle简介"></a>Gradle简介</h4><p>Gradle 是一个基于Ant和Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，这比我们的ANT使用XML构建配置要灵活的多。在编写配置时，你可以像编程一样灵活，Gradle是基于Groovy的DSL语言，完全兼容JAVA。</p>
<a id="more"></a>
<h4 id="了解-build-gradle"><a href="#了解-build-gradle" class="headerlink" title="了解 build.gradle"></a>了解 build.gradle</h4><p>现在我们需要如下表格的apk:</p>
<table>
<thead>
<tr>
<th></th>
<th>release</th>
<th>debug</th>
</tr>
</thead>
<tbody>
<tr>
<td>productA</td>
<td>productA(release版)</td>
<td>productA(debug版)</td>
</tr>
<tr>
<td>productB</td>
<td>productB(release版)</td>
<td>productB(debug版)</td>
</tr>
</tbody>
</table>
<p>通过这个表格可以看出，两个产品（共用同一套代码）可以生成4种类型的apk</p>
<p>build.gradle在每一个module都存在，它是用来构建我们的APP的。</p>
<ul>
<li>defaultConfig</li>
</ul>
<p>这个模块一些默认配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">	applicationId &quot;me.fingerart.android&quot;</div><div class="line">	minSdkVersion 13</div><div class="line">	targetSdkVersion 23</div><div class="line">	versionCode 1</div><div class="line">	versionName &quot;1.0&quot;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>buildTypes</li>
</ul>
<p>构建的类型，一般是发行和debug两种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled true</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">        //signingConfig signingConfigs.release</div><div class="line">    &#125;</div><div class="line">    debug &#123;</div><div class="line">        minifyEnabled false</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">        //signingConfig signingConfigs.debug</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>productFlavors</li>
</ul>
<p>产品的变种，体现不同版本之前配置的差异，这也就是我们构建多个版本的主要配置了<br>productFlavors的配置会覆盖与defaultConfig中的相同配置，也就是说productFlavors+defaultConfig组成最终的配置<br>比如，productB的applicationId会覆盖defaultConfig，最后打出apk的applicationId是productB中的；而productA因为没有配置applicationId所以会使用defaultConfig中的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">        productA &#123;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_A&apos;</div><div class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_A&quot;&apos;</div><div class="line">            manifestPlaceholders = [</div><div class="line">                    appkey_easeMob  : &apos;a&apos;,</div><div class="line">					appkey_baidu : &apos;a&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        productB &#123;</div><div class="line">            applicationId &apos;com.hysd.skyworth.productb&apos;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_B&apos;</div><div class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_B&quot;&apos;</div><div class="line">            manifestPlaceholders = [</div><div class="line">                    appkey_easeMob : &apos;b&apos;,</div><div class="line">					appkey_baidu   : &apos;b&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>你可以手动的添加上面我们介绍过的这些配置，你需要sync project才会生效。<br>你还可以<code>Project Structure(Ctrl+Shift+Alt+S) -&gt; 选中Module -&gt; flavors</code>进行配置</p>
<p>当你配置完成之后</p>
<h3 id="示例参考"><a href="#示例参考" class="headerlink" title="示例参考"></a>示例参考</h3><p><a href="https://github.com/fingerart" target="_blank" rel="external">https://github.com/fingerart</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;在一个APP的基础上，构建另外一个APP，与之不同的是部分代码和资源改变&lt;br&gt;为了节约工作量和更好的后期维护，我们决定共用同一套代码。&lt;/p&gt;
&lt;p&gt;像这种需求我已经遇到好几次了，这里只讲在Android Studio上进行多版本构建的步骤和一些配置&lt;/p&gt;
&lt;h3 id=&quot;多版本构建&quot;&gt;&lt;a href=&quot;#多版本构建&quot; class=&quot;headerlink&quot; title=&quot;多版本构建&quot;&gt;&lt;/a&gt;多版本构建&lt;/h3&gt;&lt;h4 id=&quot;Gradle简介&quot;&gt;&lt;a href=&quot;#Gradle简介&quot; class=&quot;headerlink&quot; title=&quot;Gradle简介&quot;&gt;&lt;/a&gt;Gradle简介&lt;/h4&gt;&lt;p&gt;Gradle 是一个基于Ant和Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，这比我们的ANT使用XML构建配置要灵活的多。在编写配置时，你可以像编程一样灵活，Gradle是基于Groovy的DSL语言，完全兼容JAVA。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
      <category term="Gradle" scheme="http://fingerart.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客的搭建记录</title>
    <link href="http://fingerart.me/2016/04/18/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://fingerart.me/2016/04/18/Hexo博客的搭建记录/</id>
    <published>2016-04-18T06:33:26.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo快速安装指南"><a href="#hexo快速安装指南" class="headerlink" title="hexo快速安装指南"></a>hexo快速安装指南</h3><p>使用npm工具安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>初始化hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div></pre></td></tr></table></figure>
<p>安装Hexo依赖包，根据blog文件夹中的package.json配置下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g #generate</div></pre></td></tr></table></figure>
<p>预览</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s #server</div></pre></td></tr></table></figure>
<p>访问localhost：4000，预览本地的hexo站点</p>
<a id="more"></a>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml    全局配置</div><div class="line">├── package.json</div><div class="line">├── scaffolds      模版目录</div><div class="line">├── public         草稿目录</div><div class="line">├── source</div><div class="line">|   └── _posts     发表博文目录</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site #整站的基本信息</div><div class="line">title: 指尖上的艺术 #网站标题</div><div class="line">subtitle: 学习的热情，不应为季节的变化而改变 #网站副标题</div><div class="line">description: 学习 思考 感悟 分享 #网站描述</div><div class="line">author:  George #网站作者，在下方显示</div><div class="line">email: FingerArt@sina.com #联系邮箱</div><div class="line">language: zh-CN</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory</div><div class="line">url: http://fingerart.me #你的域名</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">auto_spacing: false # Add spaces between asian characters and western characters</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">max_open_file: 100</div><div class="line">multi_thread: true</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Archives</div><div class="line">## 2: Enable pagination</div><div class="line">## 1: Disable pagination</div><div class="line">## 0: Fully Disable</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: H:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 15 #每页15篇文章</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape</div><div class="line">exclude_generator:</div><div class="line">Plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"></div><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line"></div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line"></div><div class="line"># Markdown</div><div class="line">## https://github.com/chjj/marked</div><div class="line">markdown:</div><div class="line">  gfm: true</div><div class="line">  pedantic: false</div><div class="line">  sanitize: false</div><div class="line">  tables: true</div><div class="line">  breaks: true</div><div class="line">  smartLists: true</div><div class="line">  smartypants: true</div><div class="line"></div><div class="line"># Stylus</div><div class="line">stylus:</div><div class="line">  compress: false</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: github</div><div class="line">  repository: git@github.com:fingerart/FingerArt.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Deployer not found: github</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo n #new [layout]	&lt;title&gt;	建立新文章，默认在_posts下，layout=&quot;draft&quot;时发布的是草稿</div><div class="line">$ hexo p #publish &lt;filename&gt;	将_drafts下的文件放到_posts下，也就是发布草稿</div><div class="line">$ hexo g #generate		生成静态网页</div><div class="line">$ hexo s #server		启动预览服务器，开启-d选项时可以预览草稿</div><div class="line">$ hexo d #deploy		发布到远程服务器，开启--generate选项可以在deploy前自动generate</div></pre></td></tr></table></figure>
<h3 id="导入参考"><a href="#导入参考" class="headerlink" title="导入参考"></a>导入参考</h3><p><a href="https://hexo.io/docs/migration.html" target="_blank" rel="external">https://hexo.io/docs/migration.html</a></p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>定义自己的域名，访问我们的博客内容，添加CNAME文件（前提是在域名服务商解析到github指定的ip下）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo FingerArt.me &gt; source/CNAME</div><div class="line">$ hexo d -g   #生成博文并部署到gighub上</div></pre></td></tr></table></figure>
<p>这样，通过域名就可以访问到我们的博客啦！</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo快速安装指南&quot;&gt;&lt;a href=&quot;#hexo快速安装指南&quot; class=&quot;headerlink&quot; title=&quot;hexo快速安装指南&quot;&gt;&lt;/a&gt;hexo快速安装指南&lt;/h3&gt;&lt;p&gt;使用npm工具安装hexo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始化hexo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装Hexo依赖包，根据blog文件夹中的package.json配置下载&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成静态页面&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo g #generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;预览&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo s #server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问localhost：4000，预览本地的hexo站点&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="hexo" scheme="http://fingerart.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移</title>
    <link href="http://fingerart.me/2016/03/18/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://fingerart.me/2016/03/18/博客迁移/</id>
    <published>2016-03-17T16:00:00.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为近段时间工作繁忙的原因, 很久没有更新博客了.<br>博客是自己学习的见证, 进步的阶石, 所以一直以来没有放弃它, 有时因为时间很紧就没有进行更新, 而是将要说的内容短暂性的写到了印象里面去了.<br>之前的博客是搭建在SAE上面, 使用wordpress, 使用这种方式的缺点就是迁移比较麻烦, 需要去配置数据库, 已经一些环境, 弄的不好很容易丢失数据.<br>记得有一台使用了很长时间的主机, 到期后, 准备迁移到SAE上面去, 当时是一位老师告诉我可以在SAE上面免费搭建PHP程序. 迁移的过程相对有些麻烦, 后来因为我的不小心, 配置上去后, wordpress的路由和其中的一个插件冲突了, 又很难把插件删除了, 无奈, 只得重新建一个新的wordpress, 然后将数据库中的数据导入进去.<br>去年就向使用Hexo在Github上面搭建这样的一个博客了, 这两天终于完成了!<br>欢迎访问我的新博客: <a href="http://FingerArt.me">http://FingerArt.me</a><br>久博客入口: <a href="http://FingerArt.sinaapp.com" target="_blank" rel="external">http://FingerArt.sinaapp.com</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为近段时间工作繁忙的原因, 很久没有更新博客了.&lt;br&gt;博客是自己学习的见证, 进步的阶石, 所以一直以来没有放弃它, 有时因为时间很紧就没有进行更新, 而是将要说的内容短暂性的写到了印象里面去了.&lt;br&gt;之前的博客是搭建在SAE上面, 使用wordpress, 使用这种
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="hexo" scheme="http://fingerart.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 实用插件集</title>
    <link href="http://fingerart.me/2016/02/29/Android-Studio-%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6%E9%9B%86/"/>
    <id>http://fingerart.me/2016/02/29/Android-Studio-实用插件集/</id>
    <published>2016-02-28T16:00:00.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-butterknife-zelezny"><a href="#android-butterknife-zelezny" class="headerlink" title="android-butterknife-zelezny"></a>android-butterknife-zelezny</h3><p>ButterKnife是一个专注于Android系统的View注入框架，让你从此从这些烦人臃肿的代码中解脱出来。</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-android-butterknife-zelezny.gif" alt="android-butterknife-zelezny"></p>
<a id="more"></a>
<h3 id="Gsonformat"><a href="#Gsonformat" class="headerlink" title="Gsonformat"></a>Gsonformat</h3><p>通过json数据快速生成java实体类</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-Gsonformat.gif" alt="322-Gsonformat"></p>
<h3 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a>Genymotion</h3><p>直接在AS中打开Genymotion, 无需到桌面去打开</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-Genymotion.png" alt="322-Genymotion"></p>
<h3 id="Lifecycle-Sorter"><a href="#Lifecycle-Sorter" class="headerlink" title="Lifecycle Sorter"></a>Lifecycle Sorter</h3><p>可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序，快捷键 <code>Ctrl + alt + K</code> </p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322_Lifecycle_Sorter.gif" alt="322_Lifecycle_Sorter"></p>
<h3 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h3><p>可用于快速定位代码，类似于Sublime编辑器右侧定位视图</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/332_CodeGlance.gif" alt="332_CodeGlance"></p>
<h3 id="ADB-WIFI"><a href="#ADB-WIFI" class="headerlink" title="ADB WIFI"></a>ADB WIFI</h3><p>使用wifi无线调试你的app，无需root权限</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;android-butterknife-zelezny&quot;&gt;&lt;a href=&quot;#android-butterknife-zelezny&quot; class=&quot;headerlink&quot; title=&quot;android-butterknife-zelezny&quot;&gt;&lt;/a&gt;android-butterknife-zelezny&lt;/h3&gt;&lt;p&gt;ButterKnife是一个专注于Android系统的View注入框架，让你从此从这些烦人臃肿的代码中解脱出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://77fzuw.com1.z0.glb.clouddn.com/322-android-butterknife-zelezny.gif&quot; alt=&quot;android-butterknife-zelezny&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://fingerart.me/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>android studio快速修改包名</title>
    <link href="http://fingerart.me/2016/02/27/android-studio%E5%BF%AB%E9%80%9F%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D/"/>
    <id>http://fingerart.me/2016/02/27/android-studio快速修改包名/</id>
    <published>2016-02-26T16:00:00.000Z</published>
    <updated>2017-02-16T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始转向Android Studio了, 记得去年就已经学习AS了, 可是公司的项目是在eclipse上面构建的, 加上外包那边也是eclipse开发, 所以也不敢将它轻易的转过去.<br>一直在技术总监耳边说AS如何如何的好, 终于, 他要求我将这个项目转到AS上面去了.万分欣喜, 终于要告别eclipse了.<br>在eclipse上面修改包名是我遇到非常懊恼的一件事, 公司的APP需要给别的公司定制, 但是包名不能和我们的相同, 所以就得修改包名了. 选中包名然后rename-&gt;enter. 确实是被修改了, 可是eclipse在替换XML文件中自定义的View时, 却出现乱掉, 错位的情况.<br>编译成apk时却没有错误, 运行时就Crash, 最后只得去XML中去搜索, 然后手动改掉!<br>因为最初构建这个项目的人, 不知道怎么想的, 将子包名作为主包名来命名, 让我包名改的非常dt.</p>
<p>现在用上AS了, 用它修改包名方便多了</p>
<a id="more"></a>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/320-1.png" alt=""></p>
<p>去掉第二步的勾, 然后选择你要修改的包名, Shift + F6 rename!</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/320-2.png" alt=""></p>
<p>最后修改build.gradle文件中的applicationId<br>这样就完成了!</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你完全按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始转向Android Studio了, 记得去年就已经学习AS了, 可是公司的项目是在eclipse上面构建的, 加上外包那边也是eclipse开发, 所以也不敢将它轻易的转过去.&lt;br&gt;一直在技术总监耳边说AS如何如何的好, 终于, 他要求我将这个项目转到AS上面去了.万分欣喜, 终于要告别eclipse了.&lt;br&gt;在eclipse上面修改包名是我遇到非常懊恼的一件事, 公司的APP需要给别的公司定制, 但是包名不能和我们的相同, 所以就得修改包名了. 选中包名然后rename-&amp;gt;enter. 确实是被修改了, 可是eclipse在替换XML文件中自定义的View时, 却出现乱掉, 错位的情况.&lt;br&gt;编译成apk时却没有错误, 运行时就Crash, 最后只得去XML中去搜索, 然后手动改掉!&lt;br&gt;因为最初构建这个项目的人, 不知道怎么想的, 将子包名作为主包名来命名, 让我包名改的非常dt.&lt;/p&gt;
&lt;p&gt;现在用上AS了, 用它修改包名方便多了&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
  </entry>
  
</feed>
