<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[IntelliJ-插件开发指南]]></title>
      <url>http://fingerart.me/2017/02/16/IntelliJ-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>待续……</p>
]]></content>
      
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于ThinkPHP5 子域名路由问题]]></title>
      <url>http://fingerart.me/2016/12/01/%E5%85%B3%E4%BA%8EThinkPHP5-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>准备在一个CRM的项目，本想使用Laravel框架的，但是并不怎么熟练，加上时间紧迫，最后决定使用ThinkPHP。</p>
<p>因为TP5是新出的一个版本，改动有些大，在看完文档中的路由（域名检测）部分后，就希望能做到这样的效果：</p>
<p>定义某个api路由规则时，可以根据 <code>api.domain.com</code> 子域名来检测；非 <code>api.domain.com</code> 子域名访问其他模块。但是根据文档配置后却会报 <strong>模块不存在</strong> </p>
<p>再三查看文档后决定没错，后来跟进源码查看关键位置</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//thinkphp/library/think/Route.php</span></div><div class="line"></div><div class="line"><span class="number">182</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($rule[<span class="string">'__domain__'</span>])) &#123;</div><div class="line"><span class="number">183</span>     <span class="keyword">self</span>::domain($rule[<span class="string">'__domain__'</span>]);</div><div class="line"><span class="number">184</span>     <span class="keyword">unset</span>($rule[<span class="string">'__domain__'</span>]);</div><div class="line"><span class="number">185</span> &#125;</div><div class="line"></div><div class="line"><span class="number">119</span> <span class="keyword">self</span>::$rules[<span class="string">'domain'</span>][$domain][<span class="string">'[bind]'</span>] = [$rule, $option, $pattern];</div><div class="line"></div><div class="line"><span class="number">1132</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($option[<span class="string">'domain'</span>]) &amp;&amp; !in_array($option[<span class="string">'domain'</span>], [$_SERVER[<span class="string">'HTTP_HOST'</span>], <span class="keyword">self</span>::$subDomain])) <span class="comment">// 域名检测</span></div></pre></td></tr></table></figure>
<p>会发现通过如下设置即可完成：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//route.php</span></div><div class="line"></div><div class="line"><span class="string">'__domain__'</span>=&gt;[</div><div class="line">   <span class="string">'api'</span> =&gt; <span class="string">'api/User/index'</span>,</div><div class="line">],</div><div class="line"></div><div class="line"><span class="string">'user'</span> =&gt; [<span class="string">'api/User/create'</span>, [<span class="string">'method'</span> =&gt; <span class="string">'get'</span>, <span class="string">'domain'</span>=&gt;<span class="string">'api'</span>]],</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 插件ApiDebugger v1.0.0]]></title>
      <url>http://fingerart.me/2016/10/24/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6ApiDebugger-v1-0-0/</url>
      <content type="html"><![CDATA[<p>一直想做一个在IDEA上面直接进行api接口调试的插件，直到上周五才完成第一个版本，这个版本只有一个很简单的api调试功能，支持GET/POST，添加参数、Header、Cookie、File。<br>当然目前该插件还有很多不足的地方，不能支持参数信息的加密等，因此不能支持复杂的加密接口。后面我会弥补这一缺陷。</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>Settings</code> -&gt; <code>Plugins</code> -&gt; search: <code>Api Debugger</code> -&gt; <code>Install</code> -&gt; restart IDEA</p>
<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><img src="http://fingerart.qiniudn.com/2016-10-24-2016-10-24_10-38-17.gif" alt="2016-10-24_10-38-17"></p>
<a id="more"></a>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://github.com/fingerart/ApiDebugger" target="_blank" rel="external">https://github.com/fingerart/ApiDebugger</a></p>
<blockquote>
<p>你的支持是我最大的动力，欢迎star、issue……</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA 插件 Open Uploader 正式发布]]></title>
      <url>http://fingerart.me/2016/10/12/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6-Open-Uploader-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>IntelliJ IDEA 文件上传插件，不限制任何站点，支持自定义参数</p>
</blockquote>
<p>可能你会遇到经常性的发布测试包给测试，也许你的选择是通过聊天工具发送、上传到一些测试的分发平台，之前我们公司使用的方式正是通过测试分发平台，但是在使用某个平台后，竟然开始收费了，😡，于是就打算做个IntelliJ IDEA插件，快速上传文件到自己公司的服务器或者其他地方。</p>
<p><img src="http://fingerart.qiniudn.com/2016-10-12-open_uploader_preview.gif" alt="open_uploader_previe"></p>
<a id="more"></a>
<p>源码：<a href="https://github.com/fingerart/Open-Uploader" target="_blank" rel="external">https://github.com/fingerart/Open-Uploader</a></p>
]]></content>
      
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Api文档自动生成之apiDoc简介]]></title>
      <url>http://fingerart.me/2016/09/16/Api%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B9%8Bapidoc%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/apidoc/apidoc" target="_blank" rel="external">apiDoc</a> 是一个基于nodejs自动生成RESTful Api文档的工具，提供了api版本差异比较、自定义末班等功能。</p>
<p>去年和朋友开发一个app，我包下了Android和后端，当时为了让他更好的看懂api和便于后期的维护，专门写了一个api的PHP程序，发现这个api程序还欠缺很多东西加上没有太多时间就不再维护了。后来发现了apiDoc这个库，一直放着没有时间来仔细看，刚好这两天有时间，把这个库学习完了。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">npm</a> 的前提下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install apidoc -g</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">## 目录结构</div><div class="line"></div><div class="line">|- apidoc/</div><div class="line">  |- apidoc.json</div><div class="line">  |- header.md</div><div class="line">  |- footer.md</div><div class="line">  |- src/</div><div class="line">    |- _apidoc.java</div><div class="line">    |- User.java</div><div class="line">  |- doc/</div><div class="line">  |- template/</div></pre></td></tr></table></figure>
<h4 id="生成api文档"><a href="#生成api文档" class="headerlink" title="生成api文档"></a>生成api文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apidoc -i src/ -o doc/</div></pre></td></tr></table></figure>
<h4 id="apidoc-参数"><a href="#apidoc-参数" class="headerlink" title="apidoc 参数"></a>apidoc 参数</h4><ul>
<li>-i<br>读取用于生成文档的目录，比如src目录</li>
<li>-o<br>生成api文档静态页面的目录</li>
<li>-t<br>自定义的模板目录，默认使用apiDoc的模板</li>
<li>-f “.*\.java$”<br>解析符合正则表达式的文件</li>
<li>-h<br>显示帮助信息</li>
</ul>
<h4 id="配置-apidoc-json"><a href="#配置-apidoc-json" class="headerlink" title="配置 apidoc.json"></a>配置 apidoc.json</h4><p>在执行 <code>apidoc</code> 命令的目录(apidoc/)创建apidoc.json文件，并加入以下内容：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"FingerArt API Document"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"A sample of User API document generated from apiDoc"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"FingerArt API"</span>,</div><div class="line">  <span class="attr">"url"</span> : <span class="string">""</span>,</div><div class="line">  <span class="attr">"sampleUrl"</span>: <span class="string">"http://fingerart.me:44"</span>,</div><div class="line">  <span class="attr">"header"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"Overview"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"header.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"footer"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"Copyright"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"footer.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"template"</span>: &#123;</div><div class="line">    <span class="attr">"withGenerator"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>name<br>文档内容的最大标题</li>
<li>version<br>文档的版本号，一般保持在最新</li>
<li>description<br>文档的描述</li>
<li>title<br>显示网页的title</li>
<li>url<br>每个api地址前缀</li>
<li>sampleUrl<br>请求示例工具的地址前缀，当有此项时，会出现该工具</li>
<li>header/footer<br>文档的头部和尾部<ul>
<li>title<br>头/尾部标题</li>
<li>filename<br>头部markdown文件</li>
</ul>
</li>
<li>template<ul>
<li>withCompare<br>自动生成版本比较功能的文件，默认 <code>true</code></li>
<li>withGenerator<br>生成默认的apidoc版权，默认 <code>true</code></li>
</ul>
</li>
</ul>
<h4 id="apiDoc-注解"><a href="#apiDoc-注解" class="headerlink" title="apiDoc 注解"></a>apiDoc 注解</h4><ul>
<li>@api {method} path [title]<br><code>method</code> 请求方式: get/post/put…<br><code>path</code> User/register<br><code>title</code> 标题</li>
<li>@apiDescription text<br>api描述</li>
<li>@apiError [(group)] [{type}] field [description]</li>
<li>@apiErrorExample [{type}] [title]<br>example</li>
<li>@apiExample [{type}] title<br>example</li>
<li>@apiGroup name</li>
<li>@apiHeader [(group)] [{type}] [field=defaultValue] [description]</li>
<li>@apiHeaderExample [{type}] [title]<br>example</li>
<li>@apiIgnore [hint]</li>
<li>@apiName name</li>
<li>@apiParam [(group)] [{type}] [field=defaultValue] [description]</li>
<li>@apiParamExample [{type}] [title]<br>example</li>
<li>@apiPermission name</li>
<li>@apiSampleRequest url</li>
<li>@apiSuccess [(group)] [{type}] field [description]</li>
<li>@apiSuccessExample [{type}] [title]<br>example</li>
<li>@apiUse name</li>
<li>@apiVersion version</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>无法生成带有历史版本比较功能<br>必须同时加上 <code>@apiVersion</code> <code>@apiName</code> <code>@apiGroup</code> 这个三个注解</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>官方文档: <a href="http://apidocjs.com/" target="_blank" rel="external">http://apidocjs.com</a><br>官方示例: <a href="https://github.com/apidoc/apidoc/tree/master/example" target="_blank" rel="external">https://github.com/apidoc/apidoc/tree/master/example</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apiDoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Picasso源码解析 一]]></title>
      <url>http://fingerart.me/2016/09/13/Picasso%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>待续</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Picasso </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解 Android HandlerThread]]></title>
      <url>http://fingerart.me/2016/09/13/%E4%BA%86%E8%A7%A3-Android-HandlerThread/</url>
      <content type="html"><![CDATA[<p>今天在分析 <a href="http://github.com/square/picasso" target="_blank" rel="external">Picasso</a> 源码是时看到里面有一个HandlerThread类，之前从未见过，查看HandlerThread源码并跟踪Picasso的用法，理解了这个类的作用。通俗的讲就是这个线程不是用来直接执行自己的run方法的，而是将Message发送到该线程的MessageQueen中，间接工作。</p>
<ul>
<li><a href="/2015/08/08/Handler和Message-异步消息机制-1/" title="了解Handler消息机制1">了解Handler消息机制1</a></li>
<li><a href="/2015/08/10/Handler和Message-异步消息机制-2/" title="了解Handler消息机制2">了解Handler消息机制2</a>
</li>
</ul>
<h3 id="HandlerThread-源码"><a href="#HandlerThread-源码" class="headerlink" title="HandlerThread 源码"></a>HandlerThread 源码</h3><blockquote>
<p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>
<p>HandlerThread是一个线程，该线程会创建一个Looper，Looper可用于创建Handler，必需要调用 <code>start()</code></p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">   mTid = Process.myTid();</div><div class="line">   Looper.prepare();</div><div class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">       mLooper = Looper.myLooper();</div><div class="line">       notifyAll();</div><div class="line">   &#125;</div><div class="line">   Process.setThreadPriority(mPriority);</div><div class="line">   onLooperPrepared();</div><div class="line">   Looper.loop();</div><div class="line">   mTid = -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法在 <code>start()</code> 之后执行，创建Looper、MessageQueen，然后 <code>loop()</code> 让这个Looper工作。</p>
<h3 id="Picasso源码中的使用示例"><a href="#Picasso源码中的使用示例" class="headerlink" title="Picasso源码中的使用示例"></a>Picasso源码中的使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package com.squareup.picasso.Dispatcher</span></div><div class="line"></div><div class="line">Dispatcher(Context context, ExecutorService service</div><div class="line">, Handler mainThreadHandler,</div><div class="line">      Downloader downloader, Cache cache, Stats stats) &#123;</div><div class="line">    <span class="keyword">this</span>.dispatcherThread = <span class="keyword">new</span> DispatcherThread();</div><div class="line">    <span class="keyword">this</span>.dispatcherThread.start();</div><div class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> DispatcherHandler(dispatcherThread.getLooper(), <span class="keyword">this</span>);</div><div class="line">    <span class="comment">//some code ...</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatchSubmit</span><span class="params">(Action action)</span> </span>&#123;</div><div class="line">    handler.sendMessage(handler.obtainMessage(REQUEST_SUBMIT, action));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package com.squareup.picasso.Dispatcher.DispatcherHandler</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dispatcher dispatcher;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatcherHandler</span><span class="params">(Looper looper, Dispatcher dispatcher)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(looper);</div><div class="line">        <span class="keyword">this</span>.dispatcher = dispatcher;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">          <span class="keyword">case</span> REQUEST_SUBMIT:</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="comment">//some case ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无线连接-宿主机与VirtualBox中的Linux互相通信]]></title>
      <url>http://fingerart.me/2016/09/04/%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8EVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>有线连接中的配置方式在上篇博文已经讲过了。</p>
<h4 id="设置连接方式"><a href="#设置连接方式" class="headerlink" title="设置连接方式"></a>设置连接方式</h4><p>将网卡1设置为桥接网卡方式如图<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/BritualBox_Bird.png" alt=""></p>
<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>请参照你的宿主机设置好网关、掩码、ip地址、BOOTPROTO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0</div><div class="line">HWADDR=08:00:27:12:41:D3</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">GATEWAY=192.168.0.1</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d691-d2be-54d0-8c7a-c1612cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=static</div></pre></td></tr></table></figure>
<p>填写完成后重启网络服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_test.gif" alt=""></p>
<p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_linux_test.gif" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有线连接-宿主机跟VirtualBox中的Linux互相通信]]></title>
      <url>http://fingerart.me/2016/09/04/%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%B7%9FVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>文中介绍了我在<strong>有线连接</strong>下，使用VirtualBox创建CentOS时遇到Linux访问外网和宿主机访问Linux的问题后的解决办法，文中宿主机是指实体到笔记本或者台式电脑。</p>
<h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><p>Virtual中有6种连接方式，分别为：网络地址转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-Only）网络、通用驱动。<br>这里只讲后面会用到的2种方式的作用。</p>
<a id="more"></a>
<h4 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h4><p><strong>Linux可以访问宿主机</strong>，反向的无法访问。</p>
<h4 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h4><p><strong>宿主机可以访问Linux</strong>，反向无法访问。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>网卡1连接方式设置为<strong>网络地址转换（NAT）</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net1.png" alt=""><br>启用网卡2，连接方式设置为<strong>桥接网卡</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net2.png" alt=""></p>
<h4 id="Linux配置"><a href="#Linux配置" class="headerlink" title="Linux配置"></a>Linux配置</h4><h4 id="配置eth0"><a href="#配置eth0" class="headerlink" title="配置eth0"></a>配置eth0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>配置如下(千万不要配GATEWAY)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HWADDR=08:00:27:12:41:D3</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=dhcp</div></pre></td></tr></table></figure></p>
<h4 id="配置eth1"><a href="#配置eth1" class="headerlink" title="配置eth1"></a>配置eth1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth1</div></pre></td></tr></table></figure>
<p>配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth1</div><div class="line">HWADDR=08:00:27:EB:B7:9A</div><div class="line">NETMASK=255.255.255.0</div><div class="line">IPADDR=192.168.0.99</div><div class="line">TYPE=Ethernet</div><div class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</div><div class="line">ONBOOT=yes</div><div class="line">NM_CONTROLLED=no</div><div class="line">BOOTPROTO=static</div></pre></td></tr></table></figure></p>
<h3 id="重启network"><a href="#重启network" class="headerlink" title="重启network"></a>重启network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_test.gif" alt=""></p>
<p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_linux_test.gif" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[认识与学习BASH]]></title>
      <url>http://fingerart.me/2016/09/03/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AD%A6%E4%B9%A0BASH/</url>
      <content type="html"><![CDATA[<h3 id="认识shell"><a href="#认识shell" class="headerlink" title="认识shell"></a>认识shell</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>shell是使用者与内核沟通以达到理想工作的方式，Linux发展中出现多种shell，Bourne Again SHell是Linux使用的一个shell版本简称bash。</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>~/.bash_history</code> 记录了前一次登录是说运行的命令，当前登录说运行的命令记录在内存中，成功注销后悔记录到 <code>~/.bash_history</code> 中。</p>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>命令的别名</p>
<h3 id="内建命令type"><a href="#内建命令type" class="headerlink" title="内建命令type"></a>内建命令type</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@www ~]<span class="comment"># type [-tpa] name</span></div><div class="line">选项与参数：</div><div class="line">    ：不加任何选项与参数时，<span class="built_in">type</span> 会显示出 name 是外部命令还是 bash 内建命令</div><div class="line">-t  ：当加入 -t 参数时，<span class="built_in">type</span> 会将 name 以底下这些字眼显示出他的意义：</div><div class="line">      file    ：表示为外部命令；</div><div class="line">      <span class="built_in">alias</span>   ：表示该命令为命令别名所配置的名称；</div><div class="line">      <span class="built_in">builtin</span> ：表示该命令为 bash 内建的命令功能；</div><div class="line">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</div><div class="line"><span class="_">-a</span>  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 <span class="built_in">alias</span></div></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3>]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之状态模式]]></title>
      <url>http://fingerart.me/2016/08/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>此篇博文是我阅读《设计模式》中状态模式一章后的总结</p>
</blockquote>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p>
<h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>考虑一个表示网络连接的类TCPConnection。一个TCPConnection对象的状态处于若干不同状态之一：建立连接（Established）、正在监听（Listening）、连接已关闭（Closed）。当一个TCPConnection对象收到其它对象的请求时，它根据自身的当前状态作出不同的反应。</p>
<a id="more"></a>
<h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h3><ul>
<li>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。</li>
<li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li>
</ul>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><img src="http://www.plantuml.com/plantuml/svg/ZOz13e8m44NNpYach3IcahXaGO8cNi0Jb390az9YEneJmjs58iObcrczzoOVb94XuDLPfZVZ03k1TvPC6EOBkoE-dAxGq-D9WVS7645FhA-beYyvpDGWoy1UAXuNePMsCXJvtmlbYKDq2jHTRwWZo-6_ia6zR5HXtUI4rqtB8bzei6vIIiViEdJrEZt392uM-Tf808AIXl0CCO2rcqoFBNEVfUbDsuPyuVdK4Nm0">
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 多版本构建指南]]></title>
      <url>http://fingerart.me/2016/06/15/Android-Studio-%E5%A4%9A%E7%89%88%E6%9C%AC%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在一个APP的基础上，构建另外一个APP，与之不同的是部分代码和资源改变<br>为了节约工作量和更好的后期维护，我们决定共用同一套代码。</p>
<p>像这种需求我已经遇到好几次了，这里只讲在Android Studio上进行多版本构建的步骤和一些配置</p>
<h3 id="多版本构建"><a href="#多版本构建" class="headerlink" title="多版本构建"></a>多版本构建</h3><h4 id="Gradle简介"><a href="#Gradle简介" class="headerlink" title="Gradle简介"></a>Gradle简介</h4><p>Gradle 是一个基于Ant和Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，这比我们的ANT使用XML构建配置要灵活的多。在编写配置时，你可以像编程一样灵活，Gradle是基于Groovy的DSL语言，完全兼容JAVA。</p>
<a id="more"></a>
<h4 id="了解-build-gradle"><a href="#了解-build-gradle" class="headerlink" title="了解 build.gradle"></a>了解 build.gradle</h4><p>现在我们需要如下表格的apk:</p>
<table>
<thead>
<tr>
<th></th>
<th>release</th>
<th>debug</th>
</tr>
</thead>
<tbody>
<tr>
<td>productA</td>
<td>productA(release版)</td>
<td>productA(debug版)</td>
</tr>
<tr>
<td>productB</td>
<td>productB(release版)</td>
<td>productB(debug版)</td>
</tr>
</tbody>
</table>
<p>通过这个表格可以看出，两个产品（共用同一套代码）可以生成4种类型的apk</p>
<p>build.gradle在每一个module都存在，它是用来构建我们的APP的。</p>
<ul>
<li>defaultConfig</li>
</ul>
<p>这个模块一些默认配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">	applicationId &quot;me.fingerart.android&quot;</div><div class="line">	minSdkVersion 13</div><div class="line">	targetSdkVersion 23</div><div class="line">	versionCode 1</div><div class="line">	versionName &quot;1.0&quot;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>buildTypes</li>
</ul>
<p>构建的类型，一般是发行和debug两种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">    release &#123;</div><div class="line">        minifyEnabled true</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">        //signingConfig signingConfigs.release</div><div class="line">    &#125;</div><div class="line">    debug &#123;</div><div class="line">        minifyEnabled false</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</div><div class="line">        //signingConfig signingConfigs.debug</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>productFlavors</li>
</ul>
<p>产品的变种，体现不同版本之前配置的差异，这也就是我们构建多个版本的主要配置了<br>productFlavors的配置会覆盖与defaultConfig中的相同配置，也就是说productFlavors+defaultConfig组成最终的配置<br>比如，productB的applicationId会覆盖defaultConfig，最后打出apk的applicationId是productB中的；而productA因为没有配置applicationId所以会使用defaultConfig中的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">        productA &#123;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_A&apos;</div><div class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_A&quot;&apos;</div><div class="line">            manifestPlaceholders = [</div><div class="line">                    appkey_easeMob  : &apos;a&apos;,</div><div class="line">					appkey_baidu : &apos;a&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        productB &#123;</div><div class="line">            applicationId &apos;com.hysd.skyworth.productb&apos;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_B&apos;</div><div class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_B&quot;&apos;</div><div class="line">            manifestPlaceholders = [</div><div class="line">                    appkey_easeMob : &apos;b&apos;,</div><div class="line">					appkey_baidu   : &apos;b&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>你可以手动的添加上面我们介绍过的这些配置，你需要sync project才会生效。<br>你还可以<code>Project Structure(Ctrl+Shift+Alt+S) -&gt; 选中Module -&gt; flavors</code>进行配置</p>
<p>当你配置完成之后</p>
<h3 id="示例参考"><a href="#示例参考" class="headerlink" title="示例参考"></a>示例参考</h3><p><a href="https://github.com/fingerart" target="_blank" rel="external">https://github.com/fingerart</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客的搭建记录]]></title>
      <url>http://fingerart.me/2016/04/18/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="hexo快速安装指南"><a href="#hexo快速安装指南" class="headerlink" title="hexo快速安装指南"></a>hexo快速安装指南</h3><p>使用npm工具安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>初始化hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div></pre></td></tr></table></figure>
<p>安装Hexo依赖包，根据blog文件夹中的package.json配置下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g #generate</div></pre></td></tr></table></figure>
<p>预览</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s #server</div></pre></td></tr></table></figure>
<p>访问localhost：4000，预览本地的hexo站点</p>
<a id="more"></a>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml    全局配置</div><div class="line">├── package.json</div><div class="line">├── scaffolds      模版目录</div><div class="line">├── public         草稿目录</div><div class="line">├── source</div><div class="line">|   └── _posts     发表博文目录</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h3 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site #整站的基本信息</div><div class="line">title: 指尖上的艺术 #网站标题</div><div class="line">subtitle: 学习的热情，不应为季节的变化而改变 #网站副标题</div><div class="line">description: 学习 思考 感悟 分享 #网站描述</div><div class="line">author:  George #网站作者，在下方显示</div><div class="line">email: FingerArt@sina.com #联系邮箱</div><div class="line">language: zh-CN</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory</div><div class="line">url: http://fingerart.me #你的域名</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">auto_spacing: false # Add spaces between asian characters and western characters</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">max_open_file: 100</div><div class="line">multi_thread: true</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Archives</div><div class="line">## 2: Enable pagination</div><div class="line">## 1: Disable pagination</div><div class="line">## 0: Fully Disable</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: H:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 15 #每页15篇文章</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape</div><div class="line">exclude_generator:</div><div class="line">Plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"></div><div class="line">#sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line"></div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line"></div><div class="line"># Markdown</div><div class="line">## https://github.com/chjj/marked</div><div class="line">markdown:</div><div class="line">  gfm: true</div><div class="line">  pedantic: false</div><div class="line">  sanitize: false</div><div class="line">  tables: true</div><div class="line">  breaks: true</div><div class="line">  smartLists: true</div><div class="line">  smartypants: true</div><div class="line"></div><div class="line"># Stylus</div><div class="line">stylus:</div><div class="line">  compress: false</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: github</div><div class="line">  repository: git@github.com:fingerart/FingerArt.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Deployer not found: github</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo n #new [layout]	&lt;title&gt;	建立新文章，默认在_posts下，layout=&quot;draft&quot;时发布的是草稿</div><div class="line">$ hexo p #publish &lt;filename&gt;	将_drafts下的文件放到_posts下，也就是发布草稿</div><div class="line">$ hexo g #generate		生成静态网页</div><div class="line">$ hexo s #server		启动预览服务器，开启-d选项时可以预览草稿</div><div class="line">$ hexo d #deploy		发布到远程服务器，开启--generate选项可以在deploy前自动generate</div></pre></td></tr></table></figure>
<h3 id="导入参考"><a href="#导入参考" class="headerlink" title="导入参考"></a>导入参考</h3><p><a href="https://hexo.io/docs/migration.html" target="_blank" rel="external">https://hexo.io/docs/migration.html</a></p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>定义自己的域名，访问我们的博客内容，添加CNAME文件（前提是在域名服务商解析到github指定的ip下）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo FingerArt.me &gt; source/CNAME</div><div class="line">$ hexo d -g   #生成博文并部署到gighub上</div></pre></td></tr></table></figure>
<p>这样，通过域名就可以访问到我们的博客啦！</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客迁移]]></title>
      <url>http://fingerart.me/2016/03/18/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<p>因为近段时间工作繁忙的原因, 很久没有更新博客了.<br>博客是自己学习的见证, 进步的阶石, 所以一直以来没有放弃它, 有时因为时间很紧就没有进行更新, 而是将要说的内容短暂性的写到了印象里面去了.<br>之前的博客是搭建在SAE上面, 使用wordpress, 使用这种方式的缺点就是迁移比较麻烦, 需要去配置数据库, 已经一些环境, 弄的不好很容易丢失数据.<br>记得有一台使用了很长时间的主机, 到期后, 准备迁移到SAE上面去, 当时是一位老师告诉我可以在SAE上面免费搭建PHP程序. 迁移的过程相对有些麻烦, 后来因为我的不小心, 配置上去后, wordpress的路由和其中的一个插件冲突了, 又很难把插件删除了, 无奈, 只得重新建一个新的wordpress, 然后将数据库中的数据导入进去.<br>去年就向使用Hexo在Github上面搭建这样的一个博客了, 这两天终于完成了!<br>欢迎访问我的新博客: <a href="http://FingerArt.me">http://FingerArt.me</a><br>久博客入口: <a href="http://FingerArt.sinaapp.com" target="_blank" rel="external">http://FingerArt.sinaapp.com</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 实用插件集]]></title>
      <url>http://fingerart.me/2016/02/29/Android-Studio-%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<h3 id="android-butterknife-zelezny"><a href="#android-butterknife-zelezny" class="headerlink" title="android-butterknife-zelezny"></a>android-butterknife-zelezny</h3><p>ButterKnife是一个专注于Android系统的View注入框架，让你从此从这些烦人臃肿的代码中解脱出来。</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-android-butterknife-zelezny.gif" alt="android-butterknife-zelezny"></p>
<a id="more"></a>
<h3 id="Gsonformat"><a href="#Gsonformat" class="headerlink" title="Gsonformat"></a>Gsonformat</h3><p>通过json数据快速生成java实体类</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-Gsonformat.gif" alt="322-Gsonformat"></p>
<h3 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a>Genymotion</h3><p>直接在AS中打开Genymotion, 无需到桌面去打开</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322-Genymotion.png" alt="322-Genymotion"></p>
<h3 id="Lifecycle-Sorter"><a href="#Lifecycle-Sorter" class="headerlink" title="Lifecycle Sorter"></a>Lifecycle Sorter</h3><p>可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序，快捷键 <code>Ctrl + alt + K</code> </p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/322_Lifecycle_Sorter.gif" alt="322_Lifecycle_Sorter"></p>
<h3 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h3><p>可用于快速定位代码，类似于Sublime编辑器右侧定位视图</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/332_CodeGlance.gif" alt="332_CodeGlance"></p>
<h3 id="ADB-WIFI"><a href="#ADB-WIFI" class="headerlink" title="ADB WIFI"></a>ADB WIFI</h3><p>使用wifi无线调试你的app，无需root权限</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android studio快速修改包名]]></title>
      <url>http://fingerart.me/2016/02/27/android-studio%E5%BF%AB%E9%80%9F%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>开始转向Android Studio了, 记得去年就已经学习AS了, 可是公司的项目是在eclipse上面构建的, 加上外包那边也是eclipse开发, 所以也不敢将它轻易的转过去.<br>一直在技术总监耳边说AS如何如何的好, 终于, 他要求我将这个项目转到AS上面去了.万分欣喜, 终于要告别eclipse了.<br>在eclipse上面修改包名是我遇到非常懊恼的一件事, 公司的APP需要给别的公司定制, 但是包名不能和我们的相同, 所以就得修改包名了. 选中包名然后rename-&gt;enter. 确实是被修改了, 可是eclipse在替换XML文件中自定义的View时, 却出现乱掉, 错位的情况.<br>编译成apk时却没有错误, 运行时就Crash, 最后只得去XML中去搜索, 然后手动改掉!<br>因为最初构建这个项目的人, 不知道怎么想的, 将子包名作为主包名来命名, 让我包名改的非常dt.</p>
<p>现在用上AS了, 用它修改包名方便多了</p>
<a id="more"></a>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/320-1.png" alt=""></p>
<p>去掉第二步的勾, 然后选择你要修改的包名, Shift + F6 rename!</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/320-2.png" alt=""></p>
<p>最后修改build.gradle文件中的applicationId<br>这样就完成了!</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你完全按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Android的adb命令录制视频]]></title>
      <url>http://fingerart.me/2015/11/07/%E4%BD%BF%E7%94%A8Android%E7%9A%84adb%E5%91%BD%E4%BB%A4%E5%BD%95%E5%88%B6%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<p>之前一直寻找录制的软件, 并且还有一些模拟器也有自带的, 其实在 Android4.4 Kitkat(API level 19)以上 就提供了这样的功能, 在Android Studio 中也有一个录屏的功能按钮.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">shell@sltechn:/ $ screenrecord --help</div><div class="line"></div><div class="line">Usage: screenrecord [options] &lt;filename&gt;</div><div class="line"></div><div class="line">Records the device&apos;s display to a .mp4 file.</div><div class="line"></div><div class="line">Options:</div><div class="line">--size WIDTHxHEIGHT</div><div class="line">    Set the video size, e.g. &quot;1280x720&quot;.  Default is the device&apos;s main</div><div class="line">    display resolution (if supported), 1280x720 if not.  For best results,</div><div class="line">    use a size supported by the AVC encoder.</div><div class="line">--bit-rate RATE</div><div class="line">    Set the video bit rate, in megabits per second.  Default 4Mbps.</div><div class="line">--time-limit TIME</div><div class="line">    Set the maximum recording time, in seconds.  Default / maximum is 180.</div><div class="line">--rotate</div><div class="line">    Rotate the output 90 degrees.</div><div class="line">--verbose</div><div class="line">    Display interesting information on stdout.</div><div class="line">--help</div><div class="line">    Show this message.</div><div class="line"></div><div class="line">Recording continues until Ctrl-C is hit or the time limit is reached.</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * 录制</div><div class="line"> * 录制的格式是 .mp4</div><div class="line"> * Ctrl+C 提前结束视频录制</div><div class="line"> */</div><div class="line">shell@sltechn:/ $ screenrecord /sdcard/FingerArt.mp4</div><div class="line"></div><div class="line">/* </div><div class="line"> * 分辨率设置</div><div class="line"> */</div><div class="line">shell@sltechn:/ $ screenrecord --size 1280*720 /sdcard/FingerArt.mp4</div><div class="line"></div><div class="line">/* </div><div class="line"> * 比特率设置</div><div class="line"> * 默认是4Mbps, 比特率越大越清晰, 文件也会越大</div><div class="line"> */</div><div class="line">shell@sltechn:/ $ screenrecord --bit-rate 2000000 /sdcard/FingerArt.mp4</div><div class="line"></div><div class="line">/* </div><div class="line"> * 录制时间设置</div><div class="line"> * 默认是180s, Ctrl+C提前停止录制</div><div class="line"> */</div><div class="line">shell@sltechn:/ $ screenrecord --time-limit 300 /sdcard/FingerArt.mp4</div></pre></td></tr></table></figure>
<p>该方式不能录制音频.</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你完全按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AsyncTask原理]]></title>
      <url>http://fingerart.me/2015/09/19/AsyncTask%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="AsyncTask的来源"><a href="#AsyncTask的来源" class="headerlink" title="AsyncTask的来源"></a>AsyncTask的来源</h3><p>我们知道执行耗时任务需要在子线程中去操作, 完成后通过MessageQueue让主线程去更新UI, 不能在子线程操作UI, 原因在Handler的消息机制中已经讲过了; 而每一个子线程的开启和执行都是很消耗资源的, 线程是非常宝贵的资源, 可以进行复用, 避免重复创建和销毁, 于是Google的工程师就开发了一个ThreadPollExecutor(线程池的执行器), AsyncTask的底层使用的就是ThreadPollExecutor, 这样我们只需要使用AsyncTask就不需要再去手动的创建线程了.</p>
<a id="more"></a>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/292-1.png" alt="AsyncTask"></p>
<h3 id="AsyncTask底层原理"><a href="#AsyncTask底层原理" class="headerlink" title="AsyncTask底层原理"></a>AsyncTask底层原理</h3><p>首先从ThreadPollExecutor(线程池的执行器)讲起, 线程池的执行器用于维护开启线程的最大数量(包括核心数量, 线程的空闲时间)和线程队列的最大数量, 当最大数量的线程达到之后, 会将之后的添加到线程的任务队列中去, 如果线程的任务队列的最大值超过后, 程序会抛出运行时异常.</p>
<p>ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<runnable> workQueue)<br>corePoolSize: 核心的线程数量<br>maximumPoolSize: 最大的线程数量<br>keepAliveTime: 空闲线程(最大线程数量-核心线程数量)的空闲时间, 如果空闲线程的空闲时间超过了就会被线程池中销毁, 核心数量会一直存在, 等待下次复用<br>unit: 空闲时间的单位<br>workQueue: 线程队列, 如果所有的线程都在执行任务, 那么这个任务就会被添加到这个任务队列中, 等待空闲的线程到这个任务队列中来取当需要执行线程数量超过(线程队列的数量+最大的线程数量)时, 程序就会抛出运行时异常<br>ThreadPoolExecutor的继承关系<br>ThreadPoolExecutor-&gt;AbstractExecutorService-&gt;ExecutorService-&gt;Executors(想到Collections,集合工具类)<br>Executors有很多的静态方法, 是Google工程师方便我们快速的获取ThreadPoolExecutor的对象</runnable></p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/292-2.png" alt="ThreadPoolExecutor"></p>
<h3 id="AsyncTask异步任务框架"><a href="#AsyncTask异步任务框架" class="headerlink" title="AsyncTask异步任务框架"></a>AsyncTask异步任务框架</h3><p>AsyncTask的底层是基于ThreadPollExecutor</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/292-3.png" alt="ThreadPollExecutor"></p>
<p>查阅AsyncTask源码(4.1.2), 有一个默认的TheadPollExecutor:<br>核心线程数: 5<br>最大线程数: 128<br>空闲线程的保持时间:1 s<br>线程任务队列的最大数:10<br>Google的工程师方便我们定义自己的ThreadPollExecutor, 添加了一个方法:<br>executeOnExecutor(Executor exec, Params… params)</p>
<h4 id="AsyncTask的优点"><a href="#AsyncTask的优点" class="headerlink" title="AsyncTask的优点"></a>AsyncTask的优点</h4><p>简单, 方便, 灵活, 线程复用, 防止重复创建</p>
<h4 id="AsyncTask的缺点"><a href="#AsyncTask的缺点" class="headerlink" title="AsyncTask的缺点"></a>AsyncTask的缺点</h4><ul>
<li>旧版(以2.3.1源码为例), 线程的核心数量:5, 最大数量:128, 队列的数量:10<br>当执行的任务多了, 开的线程就变多了, 相应的, CPU在各个线程之间切换次数增加了, 占用的资源也就变多了.<br>新版(以4.4.3源码为例), 线程的核心数量:CPU数量+1, 最大数量:CPU数量的2倍+1, 队列的数量:128, 如图(核心数)<br>相比之前明显的这个版本默认的线程池执行器效率提升了.</li>
<li>当线程的数量超过线程最大数+线程任务队列数时, 就会发生异常.</li>
</ul>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/292-4.png" alt="核心数"></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> AsyncTask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发代码规范]]></title>
      <url>http://fingerart.me/2015/09/03/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="命名规范-Naming-Conventions"><a href="#命名规范-Naming-Conventions" class="headerlink" title="命名规范(Naming Conventions)"></a>命名规范(Naming Conventions)</h3><p>命名规范使程序更易读，从而更易于理解。它们也可以提供一些有关标识符功能的信息，以助于理解代码，例如，不论它是一个常量，包，还是类。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>识符类型</th>
<th>命名规则</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>包(Packages)</td>
<td>一个唯一包名的前缀总是全部小写的ASCII字母并且是一个顶级域名，通常是com，edu，gov，mil，net，org，或1981年ISO 3166标准所指定的标识国家的英文双字符代码。包名的后续部分根据不同机构各自内部的命名规范而不尽相同。这类命名规范可能以特定目录名的组成来区分部门(department)，项目(project)，机器(machine)，或注册名(login names)。</td>
<td>com.mobogenie.view<br>com.mobogenie.quicktime.v2</td>
</tr>
<tr>
<td>类(Classes)</td>
<td>命名规则：类名是个一名词，采用大小写混合的方式，每个单词的首字母大写。尽量使你的类名简洁而富于描述。使用完整单词，避免缩写词(除非该缩写词被更广泛使用，像URL，HTML)</td>
<td>class Raster;<br>class ImageSprite;</td>
</tr>
<tr>
<td>接口(Interfaces)</td>
<td>命名规则：大小写规则与类名相似</td>
<td>interface RasterDelegate;<br>interface Storing;</td>
</tr>
<tr>
<td>方法(Methods)</td>
<td>方法名是一个动词，采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写。</td>
<td>run();<br>runFast();<br>getBackground();</td>
</tr>
<tr>
<td>变量(Variables)</td>
<td>除了变量名外，所有实例，包括类，类常量，均采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写。变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。临时变量通常被取名为i，j，k，m和n，它们一般用于整型；c，d，e，它们一般用于字符型。</td>
<td>成员变量 String mName;<br>局部变量 String name;<br>静态变量 static String sName;</td>
</tr>
<tr>
<td>实例变量(InstanceVariables)</td>
<td>大小写规则和变量名相似,按驼峰命名法，成员变量以m开头，局部变量按普通方式生成</td>
<td>类的实例变量遵循以上规则(按照变量命名规则)</td>
</tr>
<tr>
<td>常量(Constants)</td>
<td>类常量和ANSI常量的声明，应该全部大写，单词间用下划线隔开。(尽量避免ANSI常量，容易引起错误)</td>
<td>static final int MIN_WIDTH = 4;<br>static final int MAX_WIDTH = 999;<br>static final int GET_THE_CPU;</td>
</tr>
</tbody>
</table>
<h3 id="文件组织-File-Organization"><a href="#文件组织-File-Organization" class="headerlink" title="文件组织(File Organization)"></a>文件组织(File Organization)</h3><h4 id="Java源文件-Java-Source-Files"><a href="#Java源文件-Java-Source-Files" class="headerlink" title="Java源文件(Java Source Files)"></a>Java源文件(Java Source Files)</h4><p>每个Java源文件都包含一个单一的公共类或接口。若私有类和接口与一个公共类相关联，可以将它们和公共类放入同一个源文件。公共类必须是这个文件中的第一个类或接口。</p>
<p>Java源文件还遵循以下规则：</p>
<ul>
<li>开头注释（参见”开头注释”）</li>
<li>包和引入语句（参见”包和引入语句”）</li>
<li>类和接口声明（参见”类和接口声明”）</li>
</ul>
<h4 id="开头注释-Beginning-Comments"><a href="#开头注释-Beginning-Comments" class="headerlink" title="开头注释(Beginning Comments)"></a>开头注释(Beginning Comments)</h4><p>所有的源文件都应该在开头有一个注释，其中列出类名、版本信息、日期和版权声明.</p>
<h4 id="包和引入语句-Package-and-Import-Statements"><a href="#包和引入语句-Package-and-Import-Statements" class="headerlink" title="包和引入语句(Package and Import Statements)"></a>包和引入语句(Package and Import Statements)</h4><p>在多数Java源文件中，第一个非注释行是包语句。在它之后可以跟引入语句。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.awt;</div><div class="line"><span class="keyword">import</span> java.awt.peer.CanvasPeer;</div></pre></td></tr></table></figure>
<h4 id="类和接口声明-Class-and-Interface-Declarations"><a href="#类和接口声明-Class-and-Interface-Declarations" class="headerlink" title="类和接口声明(Class and Interface Declarations)"></a>类和接口声明(Class and Interface Declarations)</h4><p>下表描述了类和接口声明的各个部分以及它们出现的先后次序。参见“Java源文件范例”中一个包含注释的例子。</p>
<table>
<thead>
<tr>
<th></th>
<th>类/接口声明的各部分</th>
<th>注解</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>类/接口文档注释(/*……/)</td>
<td>该注释中所需包含的信息，参见”文档注释”</td>
</tr>
<tr>
<td></td>
<td>类或接口的声明</td>
<td></td>
</tr>
<tr>
<td></td>
<td>类/接口实现的注释(/……/)如果有必要的话</td>
<td>该注释应包含任何有关整个类或接口的信息，而这些信息又不适合作为类/接口文档注释。</td>
</tr>
<tr>
<td></td>
<td>类的(静态)变量</td>
<td>首先是类的公共变量，随后是保护变量，再后是包一级别的变量(没有访问修饰符，access modifier)，最后是私有变量。</td>
</tr>
<tr>
<td></td>
<td>实例变量</td>
<td>首先是公共级别的，随后是保护级别的，再后是包一级别的(没有访问修饰符)，最后是私有级别的。</td>
</tr>
<tr>
<td></td>
<td>构造器</td>
<td></td>
</tr>
<tr>
<td></td>
<td>方法</td>
<td>这些方法应该按功能，而非作用域或访问权限，分组。例如，一个私有的类方法可以置于两个公有的实例方法之间。其目的是为了更便于阅读和理解代码。</td>
</tr>
</tbody>
</table>
<h3 id="编程惯例-Programming-Practices"><a href="#编程惯例-Programming-Practices" class="headerlink" title="编程惯例(Programming Practices)"></a>编程惯例(Programming Practices)</h3><h4 id="提供对实例以及类变量的访问控制-Providing-Access-to-Instance-and-Class-Variables"><a href="#提供对实例以及类变量的访问控制-Providing-Access-to-Instance-and-Class-Variables" class="headerlink" title="提供对实例以及类变量的访问控制(Providing Access to Instance and Class Variables)"></a>提供对实例以及类变量的访问控制(Providing Access to Instance and Class Variables)</h4><p>若没有足够理由，不要把实例或类变量声明为公有。通常，实例变量无需显式的设置(set)和获取(gotten)，通常这作为方法调用的边缘效应 (side effect)而产生。</p>
<p>一个具有公有实例变量的恰当例子，是类仅作为数据结构，没有行为。亦即，若你要使用一个结构(struct)而非一个类(如果java支持结构的话)，那么把类的实例变量声明为公有是合适的。</p>
<h4 id="引用类变量和类方法-Referring-to-Class-Variables-and-Methods"><a href="#引用类变量和类方法-Referring-to-Class-Variables-and-Methods" class="headerlink" title="引用类变量和类方法(Referring to Class Variables and Methods)"></a>引用类变量和类方法(Referring to Class Variables and Methods)</h4><p>避免用一个对象访问一个类的静态变量和方法。应该用类名替代。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">classMethod();             <span class="comment">//OK</span></div><div class="line">AClass.classMethod();      <span class="comment">//OK</span></div><div class="line">anObject.classMethod();    <span class="comment">//AVOID!</span></div></pre></td></tr></table></figure>
<h4 id="常量-Constants"><a href="#常量-Constants" class="headerlink" title="常量(Constants)"></a>常量(Constants)</h4><p>位于for循环中作为计数器值的数字常量，除了-1,0和1之外，不应被直接写入代码。</p>
<h4 id="变量赋值-Variable-Assignments"><a href="#变量赋值-Variable-Assignments" class="headerlink" title="变量赋值(Variable Assignments)"></a>变量赋值(Variable Assignments)</h4><p>避免在一个语句中给多个变量赋相同的值。它很难读懂。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fooBar.fChar = barFoo.lchar = &apos;c&apos;; // AVOID!</div></pre></td></tr></table></figure></p>
<p>不要将赋值运算符用在容易与相等关系运算符混淆的地方。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (c++ = d++) &#123; <span class="comment">// AVOID! (Java disallows)</span></div><div class="line">    <span class="comment">//some code...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//应该写成</span></div><div class="line"><span class="keyword">if</span> ((c++ = d++) != <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">//some code...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//不要使用内嵌(embedded)赋值运算符试图提高运行时的效率，这是编译器的工作。例如：</span></div><div class="line"></div><div class="line">d = (a = b + c) + r;<span class="comment">// AVOID!</span></div><div class="line"></div><div class="line"><span class="comment">//应该写成</span></div><div class="line">a = b + c;</div><div class="line">d = a + r;</div></pre></td></tr></table></figure>
<h4 id="其它惯例-Miscellaneous-Practices"><a href="#其它惯例-Miscellaneous-Practices" class="headerlink" title="其它惯例(Miscellaneous Practices)"></a>其它惯例(Miscellaneous Practices)</h4><ul>
<li>圆括号(Parentheses)</li>
</ul>
<p>一般而言，在含有多种运算符的表达式中使用圆括号来避免运算符优先级问题，是个好方法。即使运算符的优先级对你而言可能很清楚，但对其他人未必如此。你不能假设别的程序员和你一样清楚运算符的优先级。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (a == b &amp;&amp; c == d) // AVOID!</div><div class="line"></div><div class="line">if ((a == b) &amp;&amp; (c == d)) // RIGHT</div></pre></td></tr></table></figure>
<ul>
<li>返回值(Returning Values)</li>
</ul>
<p>设法让你的程序结构符合目的。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">if (booleanExpression) &#123;</div><div class="line">    return true;</div><div class="line">&#125; else &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//应该代之以如下方法：</div><div class="line">return booleanExpression;</div><div class="line"></div><div class="line">//类似地：</div><div class="line">if (condition) &#123;</div><div class="line">    return x;</div><div class="line">&#125;</div><div class="line">return y;</div><div class="line"></div><div class="line">//应该写做：</div><div class="line">return (condition ? x : y);</div></pre></td></tr></table></figure>
<ul>
<li>条件运算符”?”前的表达式(Expressions before ‘?’ in the Conditional Operator)</li>
</ul>
<p>如果一个包含二元运算符的表达式出现在三元运算符” ? : “的”?”之前，那么应该给表达式添上一对圆括号。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x &gt;= 0) ? x : -x;</div></pre></td></tr></table></figure>
<h3 id="语句-Statements"><a href="#语句-Statements" class="headerlink" title="语句(Statements)"></a>语句(Statements)</h3><h4 id="简单语句-Simple-Statements"><a href="#简单语句-Simple-Statements" class="headerlink" title="简单语句(Simple Statements)"></a>简单语句(Simple Statements)</h4><p>每行至多包含一条语句，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">argv++; // Correct</div><div class="line"></div><div class="line">argc--; // Correct</div><div class="line"></div><div class="line">argv++; argc--; // AVOID!</div></pre></td></tr></table></figure>
<h4 id="复合语句-Compound-Statements"><a href="#复合语句-Compound-Statements" class="headerlink" title="复合语句(Compound Statements)"></a>复合语句(Compound Statements)</h4><p>复合语句是包含在大括号中的语句序列，形如”{ 语句 }”。例如下面各段。</p>
<ul>
<li>被括其中的语句应该较之复合语句缩进一个层次</li>
<li>左大括号”{“应位于复合语句起始行的行尾；右大括号”}”应另起一行并与复合语句首行对齐。</li>
<li>大括号可以被用于所有语句，包括单个语句，只要这些语句是诸如if-else或for控制结构的一部分。这样便于添加语句而无需担心由于忘了加括号而引入bug。</li>
</ul>
<h4 id="返回语句-return-Statements"><a href="#返回语句-return-Statements" class="headerlink" title="返回语句(return Statements)"></a>返回语句(return Statements)</h4><p>一个带返回值的return语句不使用小括号”()”，除非它们以某种方式使返回值更为显见。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">return;</div><div class="line">return myDisk.size();</div><div class="line">return (size ? size : defaultSize);</div></pre></td></tr></table></figure>
<h4 id="if，if-else，if-else-if-else语句-if-if-else-if-else-if-else-Statements"><a href="#if，if-else，if-else-if-else语句-if-if-else-if-else-if-else-Statements" class="headerlink" title="if，if-else，if else-if else语句(if, if-else, if else-if else Statements)"></a>if，if-else，if else-if else语句(if, if-else, if else-if else Statements)</h4><p>if-else语句应该具有如下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">if (condition) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (condition) &#123;</div><div class="line">    statements;</div><div class="line">&#125; else &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (condition) &#123;</div><div class="line">    statements;</div><div class="line">&#125; else if (condition) &#123;</div><div class="line">    statements;</div><div class="line">&#125; else&#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：if语句总是用”{“和”}”括起来，避免使用如下容易引起错误的格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (condition) //AVOID! THIS OMITS THE BRACES &#123;&#125;!</div><div class="line">    statement;</div></pre></td></tr></table></figure>
<h4 id="for语句-for-Statements"><a href="#for语句-for-Statements" class="headerlink" title="for语句(for Statements)"></a>for语句(for Statements)</h4><p>一个for语句应该具有如下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (initialization; condition; update) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个空的for语句(所有工作都在初始化，条件判断，更新子句中完成)应该具有如下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for (initialization; condition; update);</div></pre></td></tr></table></figure>
<p>当在for语句的初始化或更新子句中使用逗号时，避免因使用三个以上变量，而导致复杂度提高。若需要，可以在for循环之前(为初始化子句)或for循环末尾(为更新子句)使用单独的语句。 ### 6 while语句(while Statements) 一个while语句应该具有如下格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while (condition) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个空的while语句应该具有如下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">while (condition);</div><div class="line">  ### 7 do-while语句(do-while Statements) 一个do-while语句应该具有如下格式：</div><div class="line">do &#123;</div><div class="line">    statements;</div><div class="line">&#125; while (condition);</div><div class="line">  ### 8 switch语句(switch Statements) 一个switch语句应该具有如下格式：</div><div class="line">switch (condition) &#123;</div><div class="line">    case ABC:</div><div class="line">        statements;</div><div class="line">        /* falls through */</div><div class="line">    case DEF:</div><div class="line">        statements;</div><div class="line">        break;</div><div class="line">    case XYZ:</div><div class="line">        statements;</div><div class="line">        break;</div><div class="line">    default:</div><div class="line">        statements;</div><div class="line">        break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每当一个case顺着往下执行时(因为没有break语句)，通常应在break语句的位置添加注释。上面的示例代码中就包含注释/<em> falls through </em>/。   ### 9 try-catch语句(try-catch Statements) 一个try-catch语句应该具有如下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    statements;</div><div class="line">&#125; catch (ExceptionClass e) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个try-catch语句后面也可能跟着一个finally语句，不论try代码块是否顺利执行完，它都会被执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">statements;</div><div class="line">&#125; catch (ExceptionClass e) &#123;</div><div class="line">    statements;</div><div class="line">&#125; finally &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码范例-Code-Examples"><a href="#代码范例-Code-Examples" class="headerlink" title="代码范例(Code Examples)"></a>代码范例(Code Examples)</h3><h4 id="Java源文件范例-Java-Source-File-Example"><a href="#Java源文件范例-Java-Source-File-Example" class="headerlink" title="Java源文件范例(Java Source File Example)"></a>Java源文件范例(Java Source File Example)</h4><p>下面的例子，展示了如何合理布局一个包含单一公共类的Java源程序。接口的布局与其相似。更多信息参见”类和接口声明”以及”文挡注释”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package java.blah;</div><div class="line">import java.blah.blahdy.BlahBlah;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Class description goes here.</div><div class="line"> *</div><div class="line"> * @version 1.82 18 Mar 1999</div><div class="line"> * @author Firstname Lastname</div><div class="line"> */</div><div class="line">public class Blah extends SomeClass &#123;</div><div class="line">	/* A class implementation comment can go here. */</div><div class="line"></div><div class="line">	/* classVar1 documentation comment */</div><div class="line">	public static int classVar1;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * classVar2 documentation comment that happens to be more than one line long</div><div class="line">	 */</div><div class="line">	private static Object classVar2;</div><div class="line">	</div><div class="line">	/* instanceVar1 documentation comment */</div><div class="line">	public Object instanceVar1;</div><div class="line">	</div><div class="line">	/* instanceVar2 documentation comment */</div><div class="line">	protected int instanceVar2;</div><div class="line">	</div><div class="line">	/* instanceVar3 documentation comment */</div><div class="line">	private Object[] instanceVar3;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * …constructor Blah documentation comment…</div><div class="line">	 */</div><div class="line">	public Blah() &#123;</div><div class="line">		// …implementation goes here…</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * …method doSomething documentation comment…</div><div class="line">	 */</div><div class="line">	public void doSomething() &#123;</div><div class="line">		// …implementation goes here…</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * …method doSomethingElse documentation comment…</div><div class="line">	 * @param someParam description</div><div class="line">	 */</div><div class="line">	public void doSomethingElse(Object someParam) &#123;</div><div class="line">		// …implementation goes here…</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android文件命名规范]]></title>
      <url>http://fingerart.me/2015/09/03/Android%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>以下基于 <a href="/2015/09/03/%E5%BC%80%E5%8F%91%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/">开发代码规范</a></p>
<h3 id="Layout命名"><a href="#Layout命名" class="headerlink" title="Layout命名"></a>Layout命名</h3><ol>
<li>contentview命名：layout功能模块描述.xml<br>例如：layout_apps_category.xml layout_appsdetail.xml</li>
<li>Dialog命名：dialog描述.xml<br>例如：dlghint.xml</li>
<li>PopupWindow命名：ppw描述.xml<br>例如：pop info.xml</li>
<li>列表项命item描述.xml<br>例如：itemcity.xml<br>5．包含项：include模块.xml<br>例如：include_head.xml include_bottom.xml</li>
</ol>
<a id="more"></a>
<h3 id="图片命名"><a href="#图片命名" class="headerlink" title="图片命名"></a>图片命名</h3><h4 id="由设计人员命名"><a href="#由设计人员命名" class="headerlink" title="由设计人员命名"></a>由设计人员命名</h4><p>和设计人员进一步确认</p>
<ol>
<li><p>静态图片 模块前缀描述、通用图片 (common)<br>例如: main_bg.png login_btn.png manage_download.png common_btn_comfirm.png</p>
</li>
<li><p>有不同状态的图片 模块前缀描述状态、前缀描述_状态<br>状态: normal pressed focus checked<br>例如: film_buy_btn_normal.png film_buy_btn_pressed.png btn_back_normal.png</p>
</li>
</ol>
<h4 id="由开发人员命名"><a href="#由开发人员命名" class="headerlink" title="由开发人员命名"></a>由开发人员命名</h4><p>自定义文件统一放在drawable目录下<br>如：自定义生成的图片 selector, 控件简称_描述_selector btn_ok_selector</p>
<h3 id="控件命名"><a href="#控件命名" class="headerlink" title="控件命名"></a>控件命名</h3><p>以下方案确认一种实施</p>
<p>Xml中的控件 id 命名：控件简称功能描述 —— tv login_name</p>
<p>如果功能描述较长，使用 进行分割 —— tv login_student_name</p>
<p>Java文件中控件 变量命名(遵循以上Java命名规范) ：</p>
<p>成员变量 ：m_控件简称+控件描述 —— mTvName<br>局部变量 ：控件简称+控件描述 —— tvName<br>控件简称取每个单词首字母, 控件只是一个单词的，取三个字母, 自定义控件或者表上控件命名方式以此类推</p>
<table>
<thead>
<tr>
<th>Widget</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>TextView</td>
<td>tv</td>
</tr>
<tr>
<td>Button</td>
<td>btn</td>
</tr>
<tr>
<td>ImageButton</td>
<td>ib</td>
</tr>
<tr>
<td>ImageView</td>
<td>iv</td>
</tr>
<tr>
<td>CheckBox</td>
<td>cb</td>
</tr>
<tr>
<td>RadioButton</td>
<td>rb</td>
</tr>
<tr>
<td>AnalogClock</td>
<td>ac</td>
</tr>
<tr>
<td>DigitalClock</td>
<td>dc</td>
</tr>
<tr>
<td>DatePicker</td>
<td>dp</td>
</tr>
<tr>
<td>TimePicker</td>
<td>tp</td>
</tr>
<tr>
<td>ToggleButton</td>
<td>tb</td>
</tr>
<tr>
<td>EditText</td>
<td>et</td>
</tr>
<tr>
<td>ProgressBar</td>
<td>pb</td>
</tr>
<tr>
<td>SeekBar</td>
<td>sb</td>
</tr>
<tr>
<td>AutoCompleteTextView</td>
<td>actv</td>
</tr>
<tr>
<td>MultiAutoCompleteTextView</td>
<td>mctv</td>
</tr>
<tr>
<td>ZoomControls</td>
<td>zc</td>
</tr>
<tr>
<td>Include</td>
<td>inc</td>
</tr>
<tr>
<td>VideoView</td>
<td>vv</td>
</tr>
<tr>
<td>WebView</td>
<td>wv</td>
</tr>
<tr>
<td>RatingBar</td>
<td>rbar</td>
</tr>
<tr>
<td>Tab</td>
<td>tab</td>
</tr>
<tr>
<td>Spinner</td>
<td>spn</td>
</tr>
<tr>
<td>Chronometer</td>
<td>cm</td>
</tr>
<tr>
<td>ScrollView</td>
<td>sv</td>
</tr>
<tr>
<td>TextSwitcher</td>
<td>ts</td>
</tr>
<tr>
<td>Gallery</td>
<td>gal</td>
</tr>
<tr>
<td>ImageSwitcher</td>
<td>is</td>
</tr>
<tr>
<td>GridView</td>
<td>gv</td>
</tr>
<tr>
<td>ListView</td>
<td>lv</td>
</tr>
<tr>
<td>ExpandableList</td>
<td>exl</td>
</tr>
<tr>
<td>MapView</td>
<td>mv</td>
</tr>
<tr>
<td>ViewPager</td>
<td>vp</td>
</tr>
<tr>
<td>ViewFlipper</td>
<td>vf</td>
</tr>
<tr>
<td>LinearLayout</td>
<td>ll</td>
</tr>
<tr>
<td>RelativeLayout</td>
<td>rl</td>
</tr>
<tr>
<td>FrameLayout</td>
<td>fl</td>
</tr>
<tr>
<td>Fragment</td>
<td>frg</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android-任务栈]]></title>
      <url>http://fingerart.me/2015/08/12/Android-%E4%BB%BB%E5%8A%A1%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>Android中Activity是以栈的形式进行管理的, 先进后出.</p>
<p>每一个Activity就像是一颗弹夹中的子弹一样, 先压进弹夹中的子弹后被打出, 后压入弹夹中的子弹先被打出去, Activity同理, 先打开的Activity后被关闭, 后打开的Activity会先被关闭.</p>
<p>打开一个界面, 在任务栈中存放一个任务, 当关闭一个界面的时候, 就会在任务栈中清除这个对应的任务, 当这个任务栈中的任务被清除完时, 这个应用程序就退出了.</p>
<a id="more"></a>
<h3 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h3><p>标准模式: 是Activity默认的启动模式,Activity的进入和移除和栈是一模一样的.</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/266_standard.png" alt="Standard"></p>
<p>如图: 每一个Activity进入的顺序是1,2,3,4, 移除Activity的顺序是4,3,2,1</p>
<h3 id="SingleTop"><a href="#SingleTop" class="headerlink" title="SingleTop"></a>SingleTop</h3><p>单一顶部模式: 当压入一个Activity的时候, 检查位于最上面的Activity是否是将要压入的这个Activity, 如果是, 就不再创建一个新的Activity, 复用顶部的这个Activity; 否则创建一个新的Activity并压入到这个栈中.</p>
<p>应用场景: 浏览器书签</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/266_singleTop.png" alt="SingleTop"></p>
<h3 id="SingleTask"><a href="#SingleTask" class="headerlink" title="SingleTask"></a>SingleTask</h3><p>单一任务模式: 压入一个Activity的时候检测当前这个栈中是否存在这个Activity, 如果存在不再创建Activity, 直接复用, 并且弹出(清除)该Activity上面的所有Activity; 否则创建这个Activity并压入栈中.</p>
<p>应用场景: 浏览器的Activity</p>
<p>如果一个Activity需要占用大量的系统资源, 可以使用这种模式.</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/266_singleTask.png" alt="SingleTask"></p>
<h3 id="SingleInstance"><a href="#SingleInstance" class="headerlink" title="SingleInstance"></a>SingleInstance</h3><p>单例模式; 这个模式比较特殊, 只会存在一个Activity的实例, 这种模式启动的Activity不会被压入普通的栈中, 会被压入一个特殊的栈中, 当这个特殊的Activity存在的时候会复用特殊的栈中的. 如图的退出顺序是: 4,3,1,5,2</p>
<p>应用场景: 电话拨打界面</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/266_singleInstance.png" alt="SingleInstance"></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Handler和Message-异步消息机制-2]]></title>
      <url>http://fingerart.me/2015/08/10/Handler%E5%92%8CMessage-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-2/</url>
      <content type="html"><![CDATA[<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/262-Handler-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.png" alt="Handler消息机制"></p>
<p>上次简单的介绍了handler的消息机制, handler将message发送给messageQueue, looper不停的在messageQueue中取出message并执行相应的操作!</p>
<a id="more"></a>
<p>这次我们从码Android的底层源分析Handler的消息机制!</p>
<p>首先, 我们先讲Handler和Message之间的联系,Message是传递消息的载体, Handler是发送消息的工具, 创建Message和Handler的方式有很多， 关联关系很是巧妙, 读者可以查看下文对Android源码的解读可知!</p>
<p>我们知道, Handler是将message发送到messageQueue中的, 然后Looper会一直循环处理messageQueue中的message中的.那么Looper和messageQueue是何时创建的呢?</p>
<p>Looper的构造函数是private的, 目的是让我们调用它的prepare方法获取一个Looper的对象, 在prepare方法(读者具体可查看源码)中首先会获取保存在本地线程中的Looper对象, 如果存在会抛出异常不让我们再创建, 如果不存在会创建一个Looper对象并保存在本地线程中, 也就是说: <strong>一个线程中只会有一个Looper</strong></p>
<p>在Looper的构造函数中会创建一个messageQueue, 保存在Looper对象中, 同时也说明了: <strong>一个线程中只会有一个messageQueue</strong></p>
<p>通过一个Looper和一个messageQueue解决了多线程访问共享数据的安全问题了!</p>
<p>创建Handler的时候, Handler内部会去获取存放于本地线程中的Looper, 并且会从Looper中获取messageQueue, 当Handler发送消息是, 就会向这个messageQueue中发送消息了!</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * message:</div><div class="line"> * 一般创建message的方式 new Message();</div><div class="line"> * 推荐使用, 会从message池中获取已经使用过的message重复利用,节约内存</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">synchronized</span> (mPoolSync) &#123;</div><div class="line">		<span class="keyword">if</span> (mPool != <span class="keyword">null</span>) &#123;</div><div class="line">		    Message m = mPool;</div><div class="line">		    mPool = m.next;</div><div class="line">		    m.next = <span class="keyword">null</span>;</div><div class="line">		    <span class="keyword">return</span> m;</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 传入一个message,它会从message池中获取一个, 然后将传入</div><div class="line"> * message中的数据复制给从message池中获取的message并返回</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">(Message orig)</span> </span>&#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.what = orig.what;</div><div class="line">    m.arg1 = orig.arg1;</div><div class="line">    m.arg2 = orig.arg2;</div><div class="line">    m.obj = orig.obj;</div><div class="line">    m.replyTo = orig.replyTo;</div><div class="line">    <span class="keyword">if</span> (orig.data != <span class="keyword">null</span>) &#123;</div><div class="line">        m.data = <span class="keyword">new</span> Bundle(orig.data);</div><div class="line">    &#125;</div><div class="line">    m.target = orig.target;</div><div class="line">    m.callback = orig.callback;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 传入一个Handler对象,将传入的Handler对象存放在target中, 然后调</div><div class="line"> * 用sendToTarget方法发送message至messageQueue中</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">(Handler h)</span> </span>&#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.target = h;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToTarget</span><span class="params">()</span> </span>&#123;</div><div class="line">    target.sendMessage(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在传入Handler的同时还能传入message的几个参数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">(Handler h, <span class="keyword">int</span> what, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, </span></span></div><div class="line">Object obj) &#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.target = h;</div><div class="line">    m.what = what;</div><div class="line">    m.arg1 = arg1;</div><div class="line">    m.arg2 = arg2;</div><div class="line">    m.obj = obj;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * message对象的方法有很多, 不做一一介绍了, 大家可以去查看源码!</div><div class="line"> * Handler:</div><div class="line"> * 从Handler的构造函数中可看到,Handler在创建对象的时候先获取了一个Looper并从</div><div class="line"> * Looper中取出了Looper所对应的messageQueue(消息队列)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//somecode</span></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't create handler inside thread that"</span></div><div class="line">+<span class="string">"has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过Handler对象创建一个Message,可以看到Android调用的是我们上面介绍过的</div><div class="line"> * obtain(Handler h, int what, int arg1, int arg2, Object obj)方法可</div><div class="line"> * 以不需要再通过Handler的sendMessage来发送消息, 直接使用message.sendToTarget()</div><div class="line"> * 即可完成消息的发送</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Message <span class="title">obtainMessage</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, Object obj)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">return</span> Message.obtain(<span class="keyword">this</span>, what, arg1, arg2, obj);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Looper:</div><div class="line"> * Looper类中并没有几个方法, 我们介绍prepare/loop/myLooper方法, 再查看</div><div class="line"> * Looper.myLooper()之前先查看Looper的prepare方法</div><div class="line"> * prepare方法用来创建Looper对象的,然会会将其放置在本地线程中, 在创建之前会</div><div class="line"> * 先判断本地线程中是否存在一个Looper, 如果存在会抛出异常!</div><div class="line"> * 也就是说,一个线程只能有一个Looper对象,随之只有一个messageQueue!</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created "</span></div><div class="line">+<span class="string">"per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 从loop方法分析,取得消息队列,然后做死循环从messageQueue中取消息并执行, </div><div class="line"> * 最后将消息重复利用!</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    Looper me = myLooper();</div><div class="line">    MessageQueue queue = me.mQueue;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">         <span class="comment">//somecode.....  </span></div><div class="line">         msg.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//用于获取本地线程中的Looper对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (Looper)sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程断点下载原理]]></title>
      <url>http://fingerart.me/2015/08/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%AD%E7%82%B9%E4%B8%8B%E8%BD%BD%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/258-multi-download.png" alt=""></p>
<a id="more"></a>
<p>多线程下载的原理:</p>
<p>HTTP协议的请求头中有一个Range字段, 通过这该参数可以告诉服务器, 只给我目标资源的部分数据;<br>客户端通过多线程分别向服务端请求目标资源的如原理图1,2,3号线程所获取的资源一样, 将每个线程说获取到的资源放到一个文件里面, 就组成了一个完整的目标资源.</p>
<p>需要知道:</p>
<ol>
<li>Range<br>Range头指示服务器只传输目标资源指定的一部分数据,可以用来实现断点续传/多线程下载. 它有三种格式:<br>Range: bytes=1000-2000 (传输目标资源的1000-2000部分的数据)<br>Range: bytes=1000- (传输目标资源第1000byte以后的所有数据)<br>Range: bytes=1000 (只传输目标资源的最后1000byte数据)<br>对Range的响应:<br>Accept-Ranges: 能查看服务器是否支持Range;<br>支持:bytes<br>不支持:none<br>Content-Range:1000-3000/5000 (返回服务端目标资源数据的范围:start-end/total)</li>
<li>RandomAccessFile<br>对随机访问文件的读取和写入。随机访问文件的行为类似存储在文件系统中的一个大型 byte 数组。</li>
</ol>
<p>每个线程分配数据的算法:</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/258-multi-download-algorithm.png" alt=""></p>
<p>断点就是记录下, 已经被写入的位置, 当下次再次下载时, 从上次写入的地方开始继续写!</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android与服务端数据传输的编码处理]]></title>
      <url>http://fingerart.me/2015/08/08/Android%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>乱码的问题不管是在BS或是CS架构中都会存在, 都有自己默认的编码, 不同的编码就会造成乱码, 处理乱码的最好办法就是保持服务端与客户的编码一致!</p>
<h3 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h3><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>写出数据: os.write(“登陆成功”.getBytes(“UTF-8”)); //在不设置编码的情况下, 默认是以GBK编码的, 编码的内容在ISO-8859-1中查询不到, 使用Tomcat所在系统的默认编码<br>读取数据: new String(username.getBytes(“ISO-8859-1”), “UTF-8”); //GET中的数据默认是以ISO-8859-1编码的,现在需要将其解码再以原来的编码再进行编码</p>
<a id="more"></a>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android:"></a>Android:</h4><p>写出数据: URL中的数据需要将其使用URLEncodedUtils.format(parameters , “UTF-8”)进行编码<br>读取数据: 服务端的数据默认是以UTF-8读取的.</p>
<hr>
<h3 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h3><h4 id="Tomcat-1"><a href="#Tomcat-1" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>写出数据: os.write(“登陆成功”.getBytes(“UTF-8”));<br>读取数据: request.setCharacterEncoding(“UTF-8”);//设置请求体的编码即可</p>
<h4 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h4><p>写出数据: connection.setRequestProperty(“Content-Type”, “application/x-www-form-urlencoded”);<br>connection.setRequestProperty(“Content-Length”, 内容长度);<br>OutputStream os = connection.getOutputStream();//通过输出流发送给服务端<br>os.write(data.getBytes(“UTF-8”));<br>读取数据: 服务端的数据默认是以UTF-8读取的.</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/255-android-login-view.png" alt=""></p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/255-android-log.png" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Handler和Message-异步消息机制-1]]></title>
      <url>http://fingerart.me/2015/08/08/Handler%E5%92%8CMessage-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-1/</url>
      <content type="html"><![CDATA[<h3 id="消息机制的来源"><a href="#消息机制的来源" class="headerlink" title="消息机制的来源"></a>消息机制的来源</h3><p>首先从应用场景说起, 当我先想从远程服务器获取到一个资源, 从Android4.0开始, 在Main线程中不允许使用获取远端数据, 原因是如果资源响应时间过长, 就相当于在main线程中进行了sleep, 用户界面会处于卡死状态. 所有的可视化程序, 底层都是一个循环在一直监听用户的操作时间, 所以, 一旦在main线程中sleep, 用户就不能在界面进行操作了!</p>
<a id="more"></a>
<p>既然不能在main线程中访问远端数据, 当然是在子线程中进行操作了. 当我们在子线程中获取到远端的数据之后, 通过我们就需要将数据显示到界面上去给用户, 但这里Android又有了限制, 不能再子线程中直接对视图进行任何操作, 视图由谁(Main线程)创建就由谁修改. 此时的用户界面就相当于是一个共享资源一样, 线程有很多, 为了保证改变视图的有序性和安全性, Android就使用了消息机制.</p>
<p>Handler, Android中有一个消息处理器, 只需要在子线程中将处理的消息发送给Handler的消息队列(保证了多线程的安全线), handler中有一个一直循环的looper, 一个一个取出消息队列中的消息, 然后调用handler的具体处理操作, 进行用户视图的改变!</p>
<p><img src="http://77fzuw.com1.z0.glb.clouddn.com/252-Handler-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, msg.obj.toString(), </div><div class="line">Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String username = mUsernameEt.getText().toString().trim();</div><div class="line">    <span class="keyword">final</span> String password = mPasswordEt.getText().toString().trim();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            String encode = URLEncodedUtils.format(parameters , <span class="string">"UTF-8"</span>);</div><div class="line">            String path = <span class="string">"http://192.168.1.199:99/study/AndroidRequest"</span></div><div class="line">+encode;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                URL url = <span class="keyword">new</span> URL(path);</div><div class="line">                HttpURLConnection connection = </div><div class="line">(HttpURLConnection) url.openConnection();</div><div class="line">                connection.setReadTimeout(<span class="number">5000</span>);</div><div class="line">                connection.setConnectTimeout(<span class="number">5000</span>);</div><div class="line">                connection.setRequestMethod(<span class="string">"GET"</span>);</div><div class="line"></div><div class="line">                InputStream is = connection.getInputStream();</div><div class="line"></div><div class="line">                ByteArrayOutputStream outputStream = </div><div class="line"><span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line"></div><div class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">0</span> ; (len = is.read(b, <span class="number">0</span>, b.length)) != -<span class="number">1</span> ; )</div><div class="line">                    outputStream.write(b, <span class="number">0</span>, len);</div><div class="line"></div><div class="line">                toast(outputStream.toString());</div><div class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</div><div class="line">                toast(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ListView设置适配器+使用inflate填充布局文件]]></title>
      <url>http://fingerart.me/2015/08/03/ListView%E8%AE%BE%E7%BD%AE%E9%80%82%E9%85%8D%E5%99%A8-%E4%BD%BF%E7%94%A8inflate%E5%A1%AB%E5%85%85%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>先看一下通过new的方式创建组键并添加到ListView中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//伪代码</span></div><div class="line">mListView.setAdapter(<span class="keyword">new</span> BaseAdapter() &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重复利用已经创建过的对象, 不会造成内存溢出情况</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        TextView textView;</div><div class="line">        <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)</div><div class="line">            textView = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            textView = (TextView) convertView;    </div><div class="line">        textView.setText(<span class="string">"我是自动生成的"</span>+position);</div><div class="line">        textView.setTextSize(<span class="number">25</span>);</div><div class="line">        <span class="keyword">return</span> textView;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>下面使用inflate方式填充布局文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)</div><div class="line">    	convertView = View</div><div class="line">		.inflate(MainActivity.<span class="keyword">this</span>, R.layout.adapter_list_item, <span class="keyword">null</span>);</div><div class="line">	<span class="comment">//注意这里是从convertView中查找不是this对象</span></div><div class="line">    TextView textView = (TextView) convertView.findViewById(R.id.tv);</div><div class="line">    textView.setText(<span class="string">"我是使用inflate创建的"</span>+position);</div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰设计模式 与 继承 的区别]]></title>
      <url>http://fingerart.me/2015/07/02/%E8%A3%85%E9%A5%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%8E-%E7%BB%A7%E6%89%BF-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * MyReader</div><div class="line"> * 	|--MyTextReader</div><div class="line"> * 		|--MyBufferedTextReader</div><div class="line"> * 	|--MyMediaReader</div><div class="line"> * 		|--MyBufferedMediaReader</div><div class="line"> * 	|--MyOtherReader</div><div class="line"> * 		|--MyBufferedOtherReader</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBuffer</span> </span>&#123;</div><div class="line">	MyBuffer(MyTextReader mtr) &#123;</div><div class="line">	&#125;</div><div class="line">	MyBuffer(MyMediaReader mmr) &#123;</div><div class="line">	&#125;</div><div class="line">	MyBuffer(MyOtherReader mor) &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面类的扩展性很差<br>找到其参数的共同类型。通过多态的形式。可以提高扩展性。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBufferReader</span> <span class="keyword">extends</span> <span class="title">MyReader</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> MyReader r;</div><div class="line">	MyBufferReader(MyReader r) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MyReader</code> 专门用于读取数据的类。<br>|–MyTextReader<br>|–MyMediaReader<br>|–MyDataReader<br>|–MyBufferReader</p>
<p>以前是通过继承将每一个子类都具备缓冲功能。<br>那么继承体系会复杂，并不利于扩展。</p>
<p>现在优化思想。单独描述一下缓冲内容。<br>将需要被缓冲的对象。传递进来。也就是，谁需要被缓冲，谁就作为参数传递给缓冲区。<br>这样继承体系就变得很简单。优化了体系结构。</p>
<p>装饰模式比继承要灵活。避免了继承体系臃肿。<br>而且降低了类于类之间的关系。</p>
<p>装饰类因为增强已有对象，具备的功能和已有的是相同的，只不过提供了更强功能。<br>所以装饰类和被装饰类通常是都属于一个体系中的。</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰设计模式]]></title>
      <url>http://fingerart.me/2015/07/02/%E8%A3%85%E9%A5%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 装饰设计模式</div><div class="line"> * 当想要对已有的对象进行功能增强时, 可以定义一个类, 将已有对象传入, 基于已有的功能, </div><div class="line"> * 并提供增强功能.</div><div class="line"> * 那么自定义的该类称为装饰类</div><div class="line"> * 装饰类通常会通过构造方法接收被装饰的对象</div><div class="line"> * 并基于被装饰的对象的功能, 提供更强的功能.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IO06DecorativeDesignpattern</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">	    EnhancePerson ep = <span class="keyword">new</span> EnhancePerson(<span class="keyword">new</span> Person());</div><div class="line">	    ep.enhanceOperation();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">	System.out.println(“吃饭”);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnhancePerson</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Person p = <span class="keyword">null</span>;</div><div class="line">	EnhancePerson (Person p) &#123;</div><div class="line">		<span class="keyword">this</span>.p = p;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhanceOperation</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(“Get up”);</div><div class="line">		p.operation();</div><div class="line">		System.out.println(“Seelp”);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache开启运行状态网页]]></title>
      <url>http://fingerart.me/2015/06/15/Apache%E5%BC%80%E5%90%AF%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%BD%91%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>Apache 提供了特别功能来查询主机目前的状态！那就是 mod_status 这个模块！ 这个模块默认是关闭的，你必须要修改配置文件来启动他才行。</p>
<p>先确定底下这几个项目真的有存在才行！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LoadModule status_module modules/mod_status.so</div><div class="line">SetHandler server-status</div><div class="line">Order deny,allow</div><div class="line">Deny from all</div><div class="line">Allow from 192.168.1.0/24</div><div class="line">Allow from 127.0.0.1</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# apachectl restart</div></pre></td></tr></table></figure>
<p>接下来你只要在你的网址列输入主机名后面加上 <a href="http://hostname/server-status" target="_blank" rel="external">http://hostname/server-status</a> 即可发现如下：</p>
<p>输出的结果包括目前的时间以及 Apache 重新启动的时间，还有目前已经启动的程序等等， 还有网页最下方会显示每个程序的客户端与服务器端的联机状态。虽然显示的状况挺阳春，不过该有的也都有了， 可以让你约略了解一下主机的状况啰。要注意喔，可查阅者 (allow from 的参数) 还是需要限制的比较严格一点啦！</p>
<p><img src="http://cn.linux.vbird.org/linux_server/0360apache/0360apache-centos4.php_files/mod_status.png" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache设置找不到网页时的显示信息通知]]></title>
      <url>http://fingerart.me/2015/06/15/Apache%E8%AE%BE%E7%BD%AE%E6%89%BE%E4%B8%8D%E5%88%B0%E7%BD%91%E9%A1%B5%E6%97%B6%E7%9A%84%E6%98%BE%E7%A4%BA%E4%BF%A1%E6%81%AF%E9%80%9A%E7%9F%A5/</url>
      <content type="html"><![CDATA[<p>如果你的 /var/www/html/cgi 目录底下没有任何首页档案 (index.*) 时，那当使用者在网址列输入『 <a href="http://your.hostname/cgi" target="_blank" rel="external">http://your.hostname/cgi</a> 』，请问结果会显示出什么呢？可能有两个：</p>
<ul>
<li>如果你的 Options 里面有设定 Indexes 的话，那么该目录下的所有档案都会被列出来，提供类似 FTP 的连结页面。</li>
<li>如果没有指定 Indexes 的话，那么错误讯息通知就会被显示出来。<br>事实上 CentOS 所提供的 Apache 已经规范好一些简单的错误资料网页了，你可以到 /var/www/error/ 目录下瞧瞧就晓得。不过该目录下的档案并没有中文讯息，所以…..真要命！至于 Apache 的错误讯息设定在这里：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]<span class="comment"># vi /etc/httpd/conf/httpd.conf</span></div><div class="line"><span class="comment"># 大约在 886 行左右，预设就是批注掉的！</span></div><div class="line"><span class="comment">#    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var</span></div><div class="line"><span class="comment">#    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var</span></div><div class="line"><span class="comment">#    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var</span></div><div class="line"><span class="comment">#    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var</span></div><div class="line">....后面省略....</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>虽然 Apache 有提供这些数据了，不过 CentOS 默认是将那些资料批注掉的！因为我们使用中文语系， 该数据并没有中文信息，所以批注掉反而对我们的处理有帮助！ 由于你的网站可能会因为一些档名的变更或者是重新编写的原因，因此旧的网页档名就不存在。 但客户端可能保留的还是旧的连结，此时我们就得要很好心的告知使用者该网页找不到的原因才好。 你可以这样做：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]<span class="comment"># vi /etc/httpd/conf/httpd.conf</span></div><div class="line"><span class="comment"># 找到底下这一段，看看这些简单的范例先：</span></div><div class="line"><span class="comment">#ErrorDocument 500 "The server made a boo boo."</span></div><div class="line"><span class="comment">#ErrorDocument 404 /missing.html</span></div><div class="line"><span class="comment">#ErrorDocument 404 "/cgi-bin/missing_handler.pl"</span></div><div class="line"><span class="comment">#ErrorDocument 402 http://www.example.com/subscription_info.html</span></div><div class="line"></div><div class="line"><span class="comment"># 假设未来提供用户相关信息的地方为 missing.html 这个档案，所以你应该要：</span></div><div class="line">ErrorDocument 404 /missing.html</div><div class="line"></div><div class="line">[root@linux ~]<span class="comment"># apachectl restart</span></div></pre></td></tr></table></figure>
<blockquote>
<p>您输入的网页找不到！<br>      亲爱的网友，您所输入的网址并不存在我们的服务器当中，<br>    有可能是因为该网页已经被管理原删除，<br>    或者是您输入了错误的网址。请再次查明后在填入网址啰！<br>    感谢您常常来玩！ ^_^<br>    若有任何问题，欢迎联络管理员<a href="mailto:root@localhost" target="_blank" rel="external">root@localhost</a>。</p>
</blockquote>
<p>现在你如果在网址列随便输入一个主机上不存在的网址，就会出现如下的画面：</p>
<p><img src="http://cn.linux.vbird.org/linux_server/0360apache/0360apache-centos4.php_files/missing.png" alt=""></p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux(CentOs)下PHP环境搭载与配置]]></title>
      <url>http://fingerart.me/2015/06/15/Linux-CentOs-%E4%B8%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E8%BD%BD%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="LAMP-所需套件与其结构"><a href="#LAMP-所需套件与其结构" class="headerlink" title="LAMP 所需套件与其结构"></a>LAMP 所需套件与其结构</h3><ul>
<li>httpd(Apache)</li>
<li>mysql</li>
<li>php</li>
<li>Apache 目前有几种主要版本，包括 1.3.x, 2.0.x, 以及 2.2.x 等等，在 1.3.x 以前的版本通常取名为 apache ，2.x 以后则称为</li>
<li>httpd ！请与您的 distribution 比较看看先。至于 CentOS 4.x 则是提供 Apache 2.0.x 这个版本。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# yum install httpd mysql-server php //安装所需的套件</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Apache结构"><a href="#Apache结构" class="headerlink" title="Apache结构"></a>Apache结构</h3><ul>
<li><p>/etc/httpd/conf/httpd.conf (主要配置文件)<br>  最主要的配置文件，其实整个 Apache 也不过就是这个配置文件！很多其他的 distribution 都将这个文件拆成数个小文件分别管理不同的参数。 但是主要配置文件还是以这个文件为主的！你只要找到这个档名就知道如何设定啦！</p>
</li>
<li><p>/etc/httpd/conf.d/*.conf (很多的额外参数文件，扩展名是 .conf)<br>  这是 CentOS 的特色之一，如果你不想要修改原始配置文件 httpd.conf 的话，那么可以将你自己的额外参数档独立出来， 例如你想要有自己的额外设定值，可以将他写入 /etc/httpd/conf.d/vbird.conf (注意，扩展名一定是 .conf 才行) 而启动 Apache 时，这个档案就会被读入主要配置文件当中了！这有什么好处？好处就是当你系统升级的时候， 你几乎不需要更动原本的配置文件，只要将你自己的额外参数档复制到正确的地点即可！维护更方便！</p>
</li>
<li><p>/usr/lib/httpd/modules/Apache<br>  支持很多的模块，所有你想要使用的模块默认是放置在这个目录当中的！</p>
</li>
<li><p>/var/www/html/<br>  这就是CentOS 预设的『首页』所在目录！当你输入『<a href="http://localhost』时所显示的数据所在。" target="_blank" rel="external">http://localhost』时所显示的数据所在。</a></p>
</li>
<li><p>/var/www/error/<br>  如果因为主机设定错误，或者是浏览器端要求的数据错误时，在浏览器上出现的错误讯息就以这个目录的默认信息为主！</p>
</li>
<li><p>/var/www/icons/<br>  这个目录提供 Apache 默认给予的一些小图示，你可以随意使用啊！当你输入『<a href="http://localhost/icons/』" target="_blank" rel="external">http://localhost/icons/』</a> 时所显示的数据所在。</p>
</li>
<li><p>/var/www/cgi-bin/<br>  默认给一些可执行的 CGI (网页程序) 程序放置的目录；当你输入『<a href="http://localhost/cgi-bin/』" target="_blank" rel="external">http://localhost/cgi-bin/』</a> 时所显示的数据所在。</p>
</li>
<li><p>/var/log/httpd/<br>  预设的 Apache 登录档都放在这里，对于流量比较大的网站来说，这个目录要很小心， 因为以鸟哥网站的流量来说，一个星期的登录文件数据可以大到 500MBytes 至 1GBytes 左右，所以你务必要修改一下你的 logrotate 让登录档被压缩，否则…..</p>
</li>
<li><p>/usr/sbin/apachectl<br>  这个就是 Apache 的主要执行档，这个执行档其实是 shell script 而已， 他可以主动的侦测系统上面的一些设定值，好让你启动 Apache 时更简单！</p>
</li>
<li><p>/usr/sbin/httpd<br>  这个是主要的 Apache 二进制执行文件！</p>
</li>
<li><p>/usr/bin/htpasswd (Apache 密码保护)<br>  在某些网页当你想要登入时你需要输入账号与密码<br>  那 Apache 本身就提供一个最基本的密码保护方式， 该密码的产生就是透过这个指令来达成的！相关的设定方式我们会在 WWW 进阶设定当中说明的。</p>
</li>
</ul>
<h3 id="Mysql结构"><a href="#Mysql结构" class="headerlink" title="Mysql结构"></a>Mysql结构</h3><ul>
<li><p>/etc/my.cnf<br>  这个是 MySQL 的配置文件，包括你想要进行 MySQL 数据库的优化，或者是针对 MySQL 进行一些额外的参数指定， 都可以在这个档案里面达成的！</p>
</li>
<li><p>/var/lib/mysql/<br>  这个目录则是 MySQL 数据库放置的所在处啦！当你有启动任何 MySQL 的服务时， 请务必记得在备份时，这个目录也要完整的备份下来才行啊！</p>
</li>
</ul>
<h3 id="PHP结构"><a href="#PHP结构" class="headerlink" title="PHP结构"></a>PHP结构</h3><ul>
<li><p>/usr/lib/httpd/modules/libphp4.so<br>  PHP 这个套件提供给 Apache 使用的模块！这也是我们能否在 Apache 网页上面设计 PHP 程序语言的最重要的咚咚！ 务必要存在才行！</p>
</li>
<li><p>/etc/httpd/conf.d/php.conf<br>  那你要不要手动将该模块写入 httpd.conf 当中？不需要的，因为系统主动将 PHP 设定参数写入这个档案中了！ 而这个档案会在 Apache 重新启动时被读入，所以 OK 的啦！</p>
</li>
</ul>
<p>/etc/php.ini<br>    就是 PHP 的主要配置文件，包括你的 PHP 能不能允许使用者上传档案？能不能允许某些低安全性的标志等等， 都在这个配置文件当中设定的啦！</p>
<ul>
<li><p>/etc/php.d/mysql.ini, /usr/lib/php4/mysql.so<br>  你的 PHP 是否可以支持 MySQL 接口呢？就看这两个东西啦！这两个咚咚是由 php-mysql 套件提供的呢！</p>
</li>
<li><p>/usr/bin/phpize, /usr/include/php/<br>  如果你未来想要安装类似 PHP 加速器以让浏览速度加快的话，那么这个档案与目录就得要存在， 否则加速器软件可无法编译成功喔！这两个数据也是 php-devel 套件所提供的啦！</p>
</li>
</ul>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[春天该很好，你若在场]]></title>
      <url>http://fingerart.me/2015/04/17/%E6%98%A5%E5%A4%A9%E8%AF%A5%E5%BE%88%E5%A5%BD%EF%BC%8C%E4%BD%A0%E8%8B%A5%E5%9C%A8%E5%9C%BA/</url>
      <content type="html"><![CDATA[<p>春天该很好，你若在场。</p>
<p>这里的寒风还迟迟不肯离去，任性的撕裂点缀春日的花瓣，飘飘洒洒，别有一番意境。</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[致即将逝去大学生活]]></title>
      <url>http://fingerart.me/2015/04/08/%E8%87%B4%E5%8D%B3%E5%B0%86%E9%80%9D%E5%8E%BB%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/</url>
      <content type="html"><![CDATA[<p>这是一段快乐 孤独 幸运 成长 的旅途</p>
<p>引用李炎恢老师的一句话:学习, 不应为季节的变化而改变. 学习需要循序渐进从基础开始, 稳扎稳打, 切不可急于求成.</p>
<p>还记得第一次接触计算机是一部诺基亚的智能机-E66, RAM 128M, CUP 369MHz; 这在当时是相当好的配置了, 当然与现在相比就是一个渣渣 `(∩_∩)′.</p>
<a id="more"></a>
<p>那时喜欢逛乐讯 八神 一些早已忘记名字的智能网站, 从上面看看别人写的一些教程, 觉得特牛逼, 跟着这些教程DIY自己的手机. 后来看到了一个Python的技术论坛, 有人使用Python语言基于Python的一个插件在Symbian操作系统上编写小程序, 这是我非常膜拜啊, 自己写程序, 哈哈…</p>
<p>高中毕业后, 选择了计算机相关专业, 当时并没有什么基础, 只有心里的那个梦一直在支持自己. 记得非常清楚, 大一第一学期的课程是HTML的一些简单基础知识, 但对我来说也是非常好奇的, 充满了学习的激情, 因为时间已经过去了近3年, 忘记了是怎么找到李炎恢老师的教学视频的, 看了几节之后, 觉得书本上的知识和老师讲的都不及其一. 渐渐的我熟练了xhtml和css .不久在计算机协会举办的网页设计大赛中熬夜写了一个简单的静态网站, 拿到了第一名. 但还是不够高兴,因为提交的作品两只手都能数过来.</p>
<p>在大一的第二学期, 学校开设了java课程, 但此时我已经开始学习李炎恢老师的PHP教学, 依然觉得学校的老师上课根本没有讲什么内容, 讲了一小会就跟同学谈天说地, 渐渐的连上课也不去了, 除非辅导员到宿舍来请.</p>
<p>在14年的那个春节, 我用了一个寒假将c语言基础学完, 然后在4月份拿到了全国计算机二级c语言证书.那时只是想证明一下自己的能力, 本打算继续考三级 四级 …但时间原因只能作罢了.让我记得印象非常深刻的事情是, 我在学习’我要自学网’的二级c语言视频的时候, 由于在线播放功能是使用的一个Flash播放器播放的一个Flash文件, 我当时就想能不能下载到本地, 以后自己离线也可以继续观看呢? O(∩_∩)O, 学了html之后我知道网页中的这些元素, 一看就明白. 这个网站的加密技术做的不够好, 我直接将Flash文件下载到本地后, 建了一个111zx目录并放在里面, 使用快播就可以播放了. 我不清楚它是怎么处理的, 视频文件必须放至在111zx目录下, 并且只有一部分播放器才能正常观看.</p>
<p>说起我的性格, 从小母亲说我脾气暴躁, 没有耐心. 直至现在一个人在江苏呆了3年依然还存在. 很感谢宿舍这几个陪我度过三年的基友, 有人说我不重感情, 其实不然,前几天看到一篇文章&lt;朋友：利益还是感情？&gt;, 它里面提到一句话个人比较赞同:人的精力是有限的，不可能跟谁都一样的交往. 想起我得罪的朋友还蛮多的, 关系本来蛮好的, 但因为我说话不注意言辞的轻重, 让朋友产生了误会, 致使关系闹僵了, 在此对你们致上一万分的抱歉.</p>
<p>我怨你是个路痴, 迟迟寻不见我.</p>
<p>大学阶段, 最令我遗憾就是还没找到属于我的那个她,</p>
<p>待更新… …</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[类变量和实例变量的区别]]></title>
      <url>http://fingerart.me/2015/04/03/%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>同一个事物叫法有几种, 担心忘记, 记录一下子 O(∩_∩)O</p>
<p>静态变量 = 类变量</p>
<p>成员变量 = 实例变量</p>
<p>成员方法(函数) = 实例方法</p>
<p>静态方法(函数) = 类方法</p>
<a id="more"></a>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[生活总会经历一些波澜]]></title>
      <url>http://fingerart.me/2015/03/16/%E7%94%9F%E6%B4%BB%E6%80%BB%E4%BC%9A%E7%BB%8F%E5%8E%86%E4%B8%80%E4%BA%9B%E6%B3%A2%E6%BE%9C/</url>
      <content type="html"><![CDATA[<p>这夜注定是难熬的夜，8:25准时到达深圳站，爸爸接wo到了北京大学深圳医院，怀着沉重的心情进入病房，母亲躺在床上一动不动，看到母亲身上插满了大小不一的塑料管，仿佛是一把把小刀插入我的心！</p>
<p>母亲虚弱的说不出一句话，连眼睛都很难睁开，每动弹一下就得忍受伤口的疼痛……</p>
<hr>
<p>今天已经是3月16了，距离那天已经近两个月了，母亲的身体已经渐渐的好转，唯独母亲刚做完化疗身体比较难受，但我已经放心了，她正在康复中……</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[慈母手中线，游子身上衣]]></title>
      <url>http://fingerart.me/2015/03/16/%E6%85%88%E6%AF%8D%E6%89%8B%E4%B8%AD%E7%BA%BF%EF%BC%8C%E6%B8%B8%E5%AD%90%E8%BA%AB%E4%B8%8A%E8%A1%A3/</url>
      <content type="html"><![CDATA[<p>处于惰性，一直没有更新博客，今天记录一下最近发生的事情。</p>
<p>我很庆幸未毕业已经有公司愿意给我4K的月薪，个人对薪资可能比较看中，因为薪资是衡量这个人对公司的重要性和具有的能力，这家公司的办公氛围和与老板同事相处也很愉悦。但从工作后让我讨厌长时间乘坐公交和上下班背着几KG的笔记本，让我感觉特别的累。出于希望自己能往Java方向发展，当然薪资也会更高，这家公司不会待很久，比较感到抱歉！</p>
<p>本打算年前做完就跟公司提出辞职去参加培训的，但老板和同事的留意加上年会幸运的抽到了一个iPad mini 怎么好意思提出这个呢？让我有种感觉，年会就是为了留住有离意职员的一种挽留</p>
<p>慈母手中线，游子身上衣！</p>
<p>上周听到了母亲喉部不舒服，后来检查出来需要进行手术，苏州-深圳，母亲让我不要担心，准备按原计划这边工作结束后再过去陪母亲的，毕竟已经一年没有见过她了，非常想念！有时会收到母亲通过微信发来的语音，那头传来的是她像个小女生，问我怎么不想妈妈了吗，怎么不给她打电话！此时，我已经觉得我已经开始要照顾母亲了，承担这份责任！</p>
<p>今天是母亲进行手术的日子，一早起来给她打过去电话想安慰母亲，毕竟自己不在她身边，但接电话的是爸爸，母亲已经进去了，我能体会到进去手术室时没有亲人在身边的那种害怕！此时，以前与母亲相处的日子，高兴、快乐、悲伤……</p>
<p>我要立刻去母亲身边，陪伴她。此时，正赶往深圳途中。</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于thinkphp-3.2.2在sae下部署的空白页及模块访问404问题]]></title>
      <url>http://fingerart.me/2015/01/22/%E5%85%B3%E4%BA%8Ethinkphp-3-2-2%E5%9C%A8sae%E4%B8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E7%A9%BA%E7%99%BD%E9%A1%B5%E5%8F%8A%E6%A8%A1%E5%9D%97%E8%AE%BF%E9%97%AE404%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>刚做好的项目部署至SAE上面，出现了两个问题，这里分享给大家，遇到同样问题的朋友可以参考快速解决。<br>首先出现了空白页，有朋友说打开SAE上面的memcache即可解决；搞定后，访问正常的模块出现404 not found，真是奇怪了，明明跳转了，但是怎么会404，后来查看了SAE上面另一个项目，看看有什么区别。将config.yaml文件加上</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">handle:</span></div><div class="line"><span class="attr"> - rewrite:</span> if(! is_file() &amp;&amp; path ~ <span class="string">"^(.*)$"</span>) goto <span class="string">"/index.php/$1"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Thinkphp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell Script学习笔记 2]]></title>
      <url>http://fingerart.me/2015/01/22/Shell-Script%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      <content type="html"><![CDATA[<h3 id="逻辑判断式与表达式"><a href="#逻辑判断式与表达式" class="headerlink" title="逻辑判断式与表达式"></a>逻辑判断式与表达式</h3><h4 id="关于文件与目录的检测逻辑属"><a href="#关于文件与目录的检测逻辑属" class="headerlink" title="关于文件与目录的检测逻辑属"></a>关于文件与目录的检测逻辑属</h4><table>
<thead>
<tr>
<th>逻辑属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>常用！检测『文件』是否存</td>
</tr>
<tr>
<td>-d</td>
<td>常用！检测『目录』是否存</td>
</tr>
<tr>
<td>-b</td>
<td>检测是否为一个『 block 文』</td>
</tr>
<tr>
<td>-c</td>
<td>检测是否为一个『 character 文』</td>
</tr>
<tr>
<td>-S</td>
<td>检测是否为一个『 socket 标签文』</td>
</tr>
<tr>
<td>-L</td>
<td>检测是否为一个『 symbolic link 的文』</td>
</tr>
<tr>
<td>-e</td>
<td>检测『某个东』是否存在！</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h4 id="关于程序的逻辑卷标"><a href="#关于程序的逻辑卷标" class="headerlink" title="关于程序的逻辑卷标"></a>关于程序的逻辑卷标</h4><table>
<thead>
<tr>
<th>逻辑属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-G</td>
<td>检测是否由 GID 所执行的程序所拥有</td>
</tr>
<tr>
<td>-O</td>
<td>检测是否由 UID 所执行的程序所拥有</td>
</tr>
<tr>
<td>-p</td>
<td>检测是否为程序间传送信息的 name pipe 或是 FIFO （老实说，这个不太懂！）</td>
</tr>
</tbody>
</table>
<h4 id="关于文件的属性检测"><a href="#关于文件的属性检测" class="headerlink" title="关于文件的属性检测"></a>关于文件的属性检测</h4><table>
<thead>
<tr>
<th>逻辑属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>检测是否为可的属性</td>
</tr>
<tr>
<td>-w</td>
<td>检测是否为可以写的属性</td>
</tr>
<tr>
<td>-x</td>
<td>检测是否为可执的属性</td>
</tr>
<tr>
<td>-s</td>
<td>检测是否为『非空白文』</td>
</tr>
<tr>
<td>-u</td>
<td>检测是否具有『 SUI 』的属性</td>
</tr>
<tr>
<td>-g</td>
<td>检测是否具有『 SGI 』的属性</td>
</tr>
<tr>
<td>-k</td>
<td>检测是否具有『 sticky bi 』的属性</td>
</tr>
</tbody>
</table>
<h4 id="两个文件之间的判断与比较"><a href="#两个文件之间的判断与比较" class="headerlink" title="两个文件之间的判断与比较"></a>两个文件之间的判断与比较</h4><p>例如『 test file1 -nt file2』</p>
<table>
<thead>
<tr>
<th>逻辑属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-nt</td>
<td>第一个文件比第二个文件新</td>
</tr>
<tr>
<td>-ot</td>
<td>第一个文件比第二个文件旧</td>
</tr>
<tr>
<td>-ef</td>
<td>第一个文件与第二个文件为同一个文件（ link 之类的文件）</td>
</tr>
</tbody>
</table>
<h4 id="逻辑的『和-and-』『或-or"><a href="#逻辑的『和-and-』『或-or" class="headerlink" title="逻辑的『和(and)』『或(or)"></a>逻辑的『和(and)』『或(or)</h4><table>
<thead>
<tr>
<th>逻辑属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑的 AND 的意</td>
</tr>
<tr>
<td>｜｜</td>
<td>逻辑的 OR 的意</td>
</tr>
</tbody>
</table>
<h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><table>
<thead>
<tr>
<th>运算符号</th>
<th>代表意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>-eq</td>
<td>等于</td>
</tr>
<tr>
<td>-ne</td>
<td>不等于</td>
</tr>
<tr>
<td>-lt</td>
<td>小于</td>
</tr>
<tr>
<td>-gt</td>
<td>大于</td>
</tr>
<tr>
<td>-le</td>
<td>小于或等于</td>
</tr>
<tr>
<td>-ge</td>
<td>大于或等于</td>
</tr>
<tr>
<td>-a</td>
<td>双方都成立（and）</td>
</tr>
<tr>
<td>-o</td>
<td>单方成立（or）</td>
</tr>
<tr>
<td>-z</td>
<td>空字符串</td>
</tr>
<tr>
<td>-n</td>
<td>非空字符串</td>
</tr>
</tbody>
</table>
<h3 id="条件式判断：if…then…fi-case…-esac"><a href="#条件式判断：if…then…fi-case…-esac" class="headerlink" title="条件式判断：if…then…fi, case…..esac"></a>条件式判断：if…then…fi, case…..esac</h3><p>待续…</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell Scripts学习笔记 1]]></title>
      <url>http://fingerart.me/2015/01/21/Shell-Scripts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash  &lt;==在#之后加上!与shell的名称，用来宣告使用的这个脚本的用途</span></div><div class="line">[root@localhost shell]<span class="comment"># sh  shell-001-hello.sh</span></div><div class="line"></div><div class="line">所有在 scripts 里面的东西，基本规则 ( 如变量设定规则 ) 需要与 <span class="built_in">command</span> line 时相同;</div><div class="line"></div><div class="line">脚本的后缀名最好为 .sh 提供他人的认识;</div><div class="line"></div><div class="line">并非加上 .sh 就可以是执行文件，还需要查看其属性中是否有 x 这个属性.</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">双引号与单引号的区别</div><div class="line">Date： 2015/01/21</div><div class="line">Made by FingerArt</div><div class="line"></div><div class="line">name=”FingerArt”</div><div class="line">name1=”My name is <span class="variable">$name</span>”</div><div class="line">name2=’My name is <span class="variable">$name</span>’</div><div class="line"><span class="built_in">echo</span> <span class="variable">$name</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$name1</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$name2</span></div><div class="line"></div><div class="line">[root@localhost shell]<span class="comment"># sh shell-001-引号区别.sh</span></div><div class="line">FingerArt</div><div class="line">My name is FingerArt</div><div class="line">My name is <span class="variable">$name</span></div></pre></td></tr></table></figure>
<p>从中可以知道双引号能够解析变量, 单引号则不能.</p>
<a id="more"></a>
<p>声明变量类型 declare</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@localhost shell]<span class="comment"># declare [-afirx] </span></div><div class="line">参数说明：</div><div class="line"><span class="_">-a</span>  ：定义为数组 array</div><div class="line"><span class="_">-f</span>  ：定义为函数 <span class="keyword">function</span></div><div class="line">-i  ：定义为整数 <span class="built_in">integer</span></div><div class="line">-r  ：定义为『只读』</div><div class="line">-x  ：定义为透过环境输出变量</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># 变量声明</span></div><div class="line"><span class="comment"># Date： 2015/01/21</span></div><div class="line"><span class="comment"># Made by FingerArt</span></div><div class="line"></div><div class="line">a=3</div><div class="line">b=4</div><div class="line">ab=<span class="variable">$a</span>*<span class="variable">$b</span></div><div class="line"><span class="built_in">declare</span> -i c=3</div><div class="line"><span class="built_in">declare</span> -i d=4</div><div class="line"><span class="built_in">declare</span> -i <span class="built_in">cd</span>=<span class="variable">$c</span>*<span class="variable">$d</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$ab</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$cd</span></div><div class="line"></div><div class="line">[root@localhost shell]<span class="comment">#sh shell-003-declare.sh</span></div><div class="line">3*4 //原样输出,ab没声明变量类</div><div class="line">12</div></pre></td></tr></table></figure>
<p>交互式shell脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># read 等待键盘输入</span></div><div class="line"><span class="comment"># Date: 2014-12-28</span></div><div class="line"><span class="comment"># Made: FingerArt</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Please input your name, and press Enter to complate."</span></div><div class="line"><span class="built_in">read</span> name</div><div class="line"><span class="built_in">echo</span> <span class="string">"Your name is <span class="variable">$name</span>"</span></div><div class="line"></div><div class="line">[root@localhost shell]<span class="comment">#sh shell-003-declare.sh</span></div><div class="line">Please input your name, and press Enter to complate. //提示信息</div><div class="line">FingerArt //键盘输入的内容</div><div class="line">Your name is FingerArt //输出内容</div><div class="line">执行 .sh 文档时附加参数</div><div class="line"></div><div class="line">[root@localhost shell]<span class="comment">#sh shell-003-declare.sh 参数1 参数2 ...</span></div><div class="line">文件名=&gt;<span class="variable">$0</span> , 参数1=&gt; <span class="variable">$1</span>, 参数2=&gt;<span class="variable">$2</span> ...</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux设置ip]]></title>
      <url>http://fingerart.me/2015/01/21/Linux%E8%AE%BE%E7%BD%AEip/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-eth0 //编辑修改</div><div class="line">$ service network restart //重启网络服务,配置生效</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三角样式实现]]></title>
      <url>http://fingerart.me/2015/01/12/%E4%B8%89%E8%A7%92%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="实现方式1"><a href="#实现方式1" class="headerlink" title="实现方式1"></a>实现方式1</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</div><div class="line"><span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#efefef</span>;</div><div class="line"><span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#efefef</span>;</div><div class="line"><span class="selector-tag">top</span>: 20<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">content</span>: ‘’;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</div><div class="line"><span class="selector-tag">left</span>: 0<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">height</span>: 12<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">margin</span>: 0 0 0 <span class="selector-tag">-7px</span>;</div><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">-o-transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">-ms-transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line"><span class="selector-tag">width</span>: 12<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>
<p>待更新</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux编辑器vi使用方法详细介绍]]></title>
      <url>http://fingerart.me/2014/12/08/Linux%E7%BC%96%E8%BE%91%E5%99%A8vi%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。由于对Unix及Linux系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍vi的地方进一步了解它。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。</p>
<h3 id="vi的基本概念"><a href="#vi的基本概念" class="headerlink" title="vi的基本概念"></a>vi的基本概念</h3><p>基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p>
<a id="more"></a>
<h4 id="命令行模式command-mode）"><a href="#命令行模式command-mode）" class="headerlink" title="命令行模式command mode）"></a>命令行模式command mode）</h4><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p>
<h4 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h4><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p>
<h4 id="底行模式（last-line-mode）"><a href="#底行模式（last-line-mode）" class="headerlink" title="底行模式（last line mode）"></a>底行模式（last line mode）</h4><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</p>
<p>不过一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</p>
<h3 id="vi的基本操作"><a href="#vi的基本操作" class="headerlink" title="vi的基本操作"></a>vi的基本操作</h3><h4 id="进入vi"><a href="#进入vi" class="headerlink" title="进入vi"></a>进入vi</h4><p>在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi myfile</div></pre></td></tr></table></figure>
<p>不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！</p>
<h4 id="切换至插入模式（Insert-mode）编辑文件"><a href="#切换至插入模式（Insert-mode）编辑文件" class="headerlink" title="切换至插入模式（Insert mode）编辑文件"></a>切换至插入模式（Insert mode）编辑文件</h4><p>在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。</p>
<h4 id="Insert-的切换"><a href="#Insert-的切换" class="headerlink" title="Insert 的切换"></a>Insert 的切换</h4><p>您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（command mode）」再删除文字。</p>
<h4 id="退出vi及保存文件"><a href="#退出vi及保存文件" class="headerlink" title="退出vi及保存文件"></a>退出vi及保存文件</h4><p>在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">: w filename <span class="comment">#（输入 「w filename」将文章以指定的文件名filename保存）</span></div><div class="line">: wq <span class="comment">#(输入「wq」，存盘并退出vi)</span></div><div class="line">: q! <span class="comment">#(输入q!， 不存盘强制退出vi)</span></div></pre></td></tr></table></figure></p>
<h3 id="命令行模式（command-mode）功能键"><a href="#命令行模式（command-mode）功能键" class="headerlink" title="命令行模式（command mode）功能键"></a>命令行模式（command mode）功能键</h3><p>####插入模式</p>
<p>按「i」切换进入插入模式「insert mode」，按”i”进入插入模式后是从光标当前位置开始输入文件；<br>按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；<br>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</p>
<h4 id="从插入模式切换为命令行模式"><a href="#从插入模式切换为命令行模式" class="headerlink" title="从插入模式切换为命令行模式"></a>从插入模式切换为命令行模式</h4><p>按「ESC」键。</p>
<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。<br>按「ctrl」+「b」：屏幕往”后”移动一页。<br>按「ctrl」+「f」：屏幕往”前”移动一页。<br>按「ctrl」+「u」：屏幕往”后”移动半页。<br>按「ctrl」+「d」：屏幕往”前”移动半页。<br>按数字「0」：移到文章的开头。<br>按「G」：移动到文章的最后。<br>按「$」：移动到光标所在行的”行尾”。<br>按「^」：移动到光标所在行的”行首”<br>按「w」：光标跳到下个字的开头<br>按「e」：光标跳到下个字的字尾<br>按「b」：光标回到上个字的开头<br>按「#l」：光标移到该行的第#个位置，如：5l,56l。</p>
<h4 id="删除文字"><a href="#删除文字" class="headerlink" title="删除文字"></a>删除文字</h4><p>「x」：每按一次，删除光标所在位置的”后面”一个字符。<br>「#x」：例如，「6x」表示删除光标所在位置的”后面”6个字符。<br>「X」：大写的X，每按一次，删除光标所在位置的”前面”一个字符。<br>「#X」：例如，「20X」表示删除光标所在位置的”前面”20个字符。<br>「dd」：删除光标所在行。<br>「#dd」：从光标所在行开始删除#行</p>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。<br>「#yw」：复制#个字到缓冲区<br>「yy」：复制光标所在行到缓冲区。<br>「#yy」：例如，「6yy」表示拷贝从光标所在的该行”往下数”6行文字。<br>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与”y”有关的复制命令都必须与”p”配合才能完成复制与粘贴功能。</p>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>「r」：替换光标所在处的字符。<br>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p>
<h4 id="回复上一次操作"><a href="#回复上一次操作" class="headerlink" title="回复上一次操作"></a>回复上一次操作</h4><p>「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次”u”可以执行多次回复。</p>
<h4 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h4><p>「cw」：更改光标所在处的字到字尾处<br>「c#w」：例如，「c3w」表示更改3个字</p>
<h4 id="跳至指定的行"><a href="#跳至指定的行" class="headerlink" title="跳至指定的行"></a>跳至指定的行</h4><p>「ctrl」+「g」列出光标所在行的行号。<br>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p>
<h3 id="Last-line-mode下命令简介"><a href="#Last-line-mode下命令简介" class="headerlink" title="Last line mode下命令简介"></a>Last line mode下命令简介</h3><p>在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</p>
<h4 id="列出行号"><a href="#列出行号" class="headerlink" title="列出行号"></a>列出行号</h4><p>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p>
<h4 id="跳到文件中的某一行"><a href="#跳到文件中的某一行" class="headerlink" title="跳到文件中的某一行"></a>跳到文件中的某一行</h4><p>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p>
<h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a>查找字符</h4><p>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。<br>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</p>
<h4 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h4><p>「w」：在冒号输入字母「w」就可以将文件保存起来。</p>
<h4 id="离开vi"><a href="#离开vi" class="headerlink" title="离开vi"></a>离开vi</h4><p>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。<br>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</p>
<h3 id="vi命令列表"><a href="#vi命令列表" class="headerlink" title="vi命令列表"></a>vi命令列表</h3><h4 id="下表列出命令模式下的一些键的功能："><a href="#下表列出命令模式下的一些键的功能：" class="headerlink" title="下表列出命令模式下的一些键的功能："></a>下表列出命令模式下的一些键的功能：</h4><table>
<thead>
<tr>
<th>运算符号</th>
<th>代表意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>h</td>
<td>左移光标一个字符</td>
</tr>
<tr>
<td>l</td>
<td>右移光标一个字符</td>
</tr>
<tr>
<td>k</td>
<td>光标上移一行</td>
</tr>
<tr>
<td>j</td>
<td>光标下移一行</td>
</tr>
<tr>
<td>^</td>
<td>光标移动至行首</td>
</tr>
<tr>
<td>0</td>
<td>数字”0”，光标移至文章的开头</td>
</tr>
<tr>
<td>G</td>
<td>光标移至文章的最后</td>
</tr>
<tr>
<td>$</td>
<td>光标移动至行尾</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>向前翻屏</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>向后翻屏</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td>向前翻半屏</td>
</tr>
<tr>
<td>Ctrl+u</td>
<td>向后翻半屏</td>
</tr>
<tr>
<td>i</td>
<td>在光标位置前插入字符</td>
</tr>
<tr>
<td>a</td>
<td>在光标所在位置的后一个字符开始增加</td>
</tr>
<tr>
<td>o</td>
<td>插入新的一行，从行首开始输入</td>
</tr>
<tr>
<td>ES</td>
<td>从输入状态退至命令状</td>
</tr>
<tr>
<td>x</td>
<td>删除光标后面的字符</td>
</tr>
<tr>
<td>#x</td>
<td>删除光标后的＃个字符</td>
</tr>
<tr>
<td>X</td>
<td>(大写X)，删除光标前面的字</td>
</tr>
<tr>
<td>#X</td>
<td>删除光标前面的#个字</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在的行</td>
</tr>
<tr>
<td>#dd</td>
<td>删除从光标所在行数的#行</td>
</tr>
<tr>
<td>yw</td>
<td>复制光标所在位置的一个字</td>
</tr>
<tr>
<td>#yw</td>
<td>复制光标所在位置的#个字</td>
</tr>
<tr>
<td>yy</td>
<td>复制光标所在位置的一行</td>
</tr>
<tr>
<td>#yy</td>
<td>复制从光标所在行数的#行</td>
</tr>
<tr>
<td>p</td>
<td>粘贴</td>
</tr>
<tr>
<td>u</td>
<td>取消操作</td>
</tr>
<tr>
<td>cw</td>
<td>更改光标所在位置的一个字</td>
</tr>
<tr>
<td>#cw</td>
<td>更改光标所在位置的#个字</td>
</tr>
</tbody>
</table>
<h4 id="下表列出行命令模式下的一些指令"><a href="#下表列出行命令模式下的一些指令" class="headerlink" title="下表列出行命令模式下的一些指令"></a>下表列出行命令模式下的一些指令</h4><p>w filename    储存正在编辑的文件为filename</p>
<p>wq filename    储存正在编辑的文件为filename，并退出vi</p>
<p>q!    放弃所有修改，退出vi</p>
<p>set nu    显示行号</p>
<p>/或?        查找，在/后输入要查找的内容<br>n    与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</p>
<p>对于第一次用vi，有几点注意要提醒一下：</p>
<ol>
<li>用vi打开文件后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。切换方法：在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。</li>
<li>编辑好后，需从插入模式切换为命令行模式才能对文件进行保存，切换方法：按「ESC」键。</li>
<li>保存并退出文件：在命令模式下输入:wq即可！（别忘了wq前面的）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内省Introspector]]></title>
      <url>http://fingerart.me/2014/10/27/%E5%86%85%E7%9C%81Introspector/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> other;</div><div class="line"><span class="keyword">import</span> java.beans.BeanInfo;</div><div class="line"><span class="keyword">import</span> java.beans.IntrospectionException;</div><div class="line"><span class="keyword">import</span> java.beans.Introspector;</div><div class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">内省(Introspector)</div><div class="line">为什么要学习内省</div><div class="line">开发框架时，经常使用java对象的属性来封装程序的数据，每次都是用反射技术完成此类</div><div class="line">操作过于麻烦，所以sun公司开发了一套API，专门用于操作java对象的属性。</div><div class="line">内省访问JavaBean属性的两种方式</div><div class="line">通过propertyDescriptor类操作BeanInfo，然后通过BeanInfo来获取属性的描述器(PropertyDescriptor)</div><div class="line">通过这个属性描述器就可以获取某个属性对应的getter/setter方法，然后通过反射机制来调用这些方法</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntrospectorDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	<span class="doctag">@param</span> args</div><div class="line">	<span class="doctag">@throws</span> IntrospectionException</div><div class="line">	<span class="doctag">@throws</span> InvocationTargetException</div><div class="line">	<span class="doctag">@throws</span> IllegalArgumentException</div><div class="line">	<span class="doctag">@throws</span> IllegalAccessException</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IntrospectionException, IllegalAccessException, 	IllegalArgumentException, InvocationTargetException </span>&#123;</div><div class="line">		test2();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//遍历bean的所有属性</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</div><div class="line">		BeanInfo info = Introspector.getBeanInfo(Person.class, Object.class);<span class="comment">//getBeanInfo可传入其他类class文件排除其属性</span></div><div class="line">		PropertyDescriptor[] pd = info.getPropertyDescriptors();<span class="comment">//属性描述器</span></div><div class="line">		<span class="keyword">for</span>( PropertyDescriptor v : pd) &#123;</div><div class="line">			System.out.println(v.getName());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//操纵bean的指定属性</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException, IntrospectionException </span>&#123;</div><div class="line">		Person p = <span class="keyword">new</span> Person();</div><div class="line">		PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(“name”, Person.class);</div><div class="line">	</div><div class="line">		<span class="comment">//设置属性</span></div><div class="line">		Method m = pd.getWriteMethod();</div><div class="line">		m.invoke(p, “赵橙”);</div><div class="line">	</div><div class="line">		<span class="comment">//获取属性</span></div><div class="line">		Method mr = pd.getReadMethod();</div><div class="line">		System.out.print(mr.invoke(p, <span class="keyword">null</span>));</div><div class="line">		</div><div class="line">		<span class="comment">//获取字段类型</span></div><div class="line">		System.out.print(pd.getPropertyType().toString());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">//javaBean</span></div><div class="line">	<span class="keyword">private</span> String name ;</div><div class="line">	<span class="keyword">private</span> String password ;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">	    <span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="keyword">return</span> password;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">	    <span class="keyword">this</span>.password = password;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA反射-笔记]]></title>
      <url>http://fingerart.me/2014/10/19/JAVA%E5%8F%8D%E5%B0%84-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> other;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 反射，加载类并解剖出类的各个组成部分</div><div class="line"> * 	getConstrctors()		获取所有public权限的构造函数、方法、字段</div><div class="line"> * 	getDeclaredConstrctors()	获取所有声明的构造函数、方法、字段</div><div class="line"> * </div><div class="line"> * 	Method</div><div class="line"> * 	Field</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取类字节码文件的三种方法</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFlectClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">new</span> Demo(<span class="number">0</span>).getClass();</div><div class="line">		Demo.class.getName();</div><div class="line"></div><div class="line">		Class.forName(<span class="string">"other.Demo"</span>).getName();<span class="comment">//反射技术获取</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建实例对象</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//使用newInstance()获取类的实例对象，会抛出异常</span></div><div class="line">		Class&lt;?&gt; demoClass = Class.forName(<span class="string">"other.Demo"</span>);</div><div class="line">		demoClass.newInstance();<span class="comment">//等效于使用构造函数传入null</span></div><div class="line"></div><div class="line">		<span class="comment">//通过Sting.class指向对应参数的构造函数</span></div><div class="line">		Constructor&lt;?&gt; c = demoClass.getConstructor(String.class);</div><div class="line">		<span class="comment">//最后通过构造函数对象创建对应的类对象</span></div><div class="line">		Demo d = (Demo) c.newInstance(<span class="string">"hello"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 暴力反射</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConstructForPrivate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class&lt;?&gt; d = Class.forName(<span class="string">"other.Demo"</span>);</div><div class="line"></div><div class="line">		Constructor&lt;?&gt; c = d.getDeclaredConstructor(<span class="keyword">boolean</span>.class);</div><div class="line">		c.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射，取消访问控制权限检测</span></div><div class="line">		Demo demo = (Demo) c.newInstance(<span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 方法</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class&lt;?&gt; d = Class.forName(<span class="string">"other.Demo"</span>);</div><div class="line">		Object obj = d.newInstance();</div><div class="line"></div><div class="line">		Method test = d.getMethod(<span class="string">"test"</span>, <span class="keyword">null</span>);</div><div class="line">		test.invoke(obj, <span class="keyword">null</span>);	<span class="comment">//运行取得的test方法</span></div><div class="line"></div><div class="line"><span class="comment">//		main方法，JDK1.4将传入的数组每个值作为参数，1.5为多参数，直接传入数组的话会出现参数个数异常</span></div><div class="line"></div><div class="line">		Method m = d.getMethod(<span class="string">"main"</span>, String[].class);</div><div class="line">		m.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"aa"</span>,<span class="string">"bb"</span>&#125;&#125;);<span class="comment">//解决1.5对1.4的兼容性：方式1</span></div><div class="line">		m.invoke(<span class="keyword">null</span>, (Object)<span class="keyword">new</span> String[]&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;);<span class="comment">//解决1.5.对1.4的兼容性：方式2</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取字段</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class&lt;?&gt; d = Class.forName(<span class="string">"other.Demo"</span>);</div><div class="line"></div><div class="line">		Object obj = d.newInstance();</div><div class="line"></div><div class="line">		Field[] field = d.getFields();<span class="comment">//获取public权限的字段</span></div><div class="line">		<span class="keyword">for</span>(Field f : field) &#123;</div><div class="line">			String fieldStr = f.getName();<span class="comment">//字段名</span></div><div class="line">			String fieldVal = f.get(obj).toString();<span class="comment">//取值</span></div><div class="line">			String fieldTyp = f.getType().toString();<span class="comment">//类型</span></div><div class="line">			System.out.println(fieldTyp+ <span class="string">" "</span> + fieldStr +<span class="string">" = "</span>+ fieldVal);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 使用反射获取Demo类的构造函数方法;</div><div class="line">	 * <span class="doctag">@throws</span> Exception </div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConstructors</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		Class&lt;?&gt; d = Class.forName(<span class="string">"other.Demo"</span>);</div><div class="line">		Constructor&lt;?&gt;[] constructor = d.getDeclaredConstructors();<span class="comment">//获取一个装载所有存在的构造函数的数组(包括私有)</span></div><div class="line">		String name = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span>(Constructor&lt;?&gt; c : constructor) &#123;</div><div class="line">			name = c.getName();<span class="comment">//构造函数名</span></div><div class="line">			System.out.print(Modifier.toString(c.getModifiers())+ <span class="string">" "</span> + name +<span class="string">" ("</span>);<span class="comment">//构造函数的全县修饰符</span></div><div class="line">			<span class="keyword">for</span>(Class&lt;?&gt; p : c.getParameterTypes()) &#123;</div><div class="line">				System.out.print(<span class="string">" "</span>+p.getName());<span class="comment">//遍历参数</span></div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">" )"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> other;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> String str = <span class="string">"this is String!"</span>;</div><div class="line">	<span class="keyword">private</span> String priStr = <span class="string">"this is private String"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"run main."</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"not argement Construct"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(String a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"heeh"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">		System.out.println(i);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Demo</span><span class="params">(<span class="keyword">boolean</span> f)</span> </span>&#123;</div><div class="line">		System.out.println(f);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"test"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"this is private method!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 枚举]]></title>
      <url>http://fingerart.me/2014/10/18/Java-%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> JDK5.0前的枚举</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Grade A = <span class="keyword">new</span> Grade();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Grade B = <span class="keyword">new</span> Grade();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//——————————</span></div><div class="line"><span class="keyword">package</span> other;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumDemo</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    System.out.println(Grade.A.getValue());</div><div class="line">	    System.out.println(Grade.B.nameG());</div><div class="line">	    <span class="comment">//将字符串转为枚举型(检测该字符串是否是枚举中的值)</span></div><div class="line">	    <span class="keyword">try</span> &#123;</div><div class="line">	        Grade g = Grade.valueOf(Grade.class , <span class="string">"B"</span>);</div><div class="line">	    &#125;<span class="keyword">catch</span>(IllegalArgumentException e) &#123;</div><div class="line">	        System.out.println(e.getMessage());</div><div class="line">	    &#125;</div><div class="line">	    <span class="comment">//获取所有的枚举常量</span></div><div class="line">	    Grade[] gArr = Grade.values();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">带抽象类的枚举</div><div class="line">*/</div><div class="line"><span class="keyword">enum</span> Grade &#123;</div><div class="line">	A(“<span class="number">100</span>-<span class="number">90</span>”) &#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">nameG</span><span class="params">()</span> </span>&#123;</div><div class="line">		    <span class="keyword">return</span> <span class="string">"优"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	B(“<span class="number">89</span>-<span class="number">80</span>”) &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">nameG</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="keyword">return</span> <span class="string">"良"</span>;</div><div class="line">	&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">private</span> String value;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Grade</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">nameG</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 可变参数]]></title>
      <url>http://fingerart.me/2014/10/18/Java-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> other;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeableArgument</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	    demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> ...num)</span> </span>&#123;</div><div class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> v : num) &#123;</div><div class="line">	        System.out.println(v);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[国庆已至]]></title>
      <url>http://fingerart.me/2014/09/30/%E5%9B%BD%E5%BA%86%E5%B7%B2%E8%87%B3/</url>
      <content type="html"><![CDATA[<p>国庆假日该是一个高兴的日子，今天又是如此的巧合，生日与国庆在同一天(大约19年一个周期)，更应该高兴才对的……但此时此刻怎么也高兴不起来。</p>
<p>最近心中忐忑不安，为很多事烦恼。</p>
<p>创业本是很早前的一个梦想，至今依然存在，前段时间突然想到了一个idea，告诉了几位同学，但个人的性格却是一个犹豫不决，在没有想透彻之前不能做出果断的决定，这几天同学一直在为这事忙碌，自己却还在犹豫，一旦告诉他们我不做了得多伤感情。或许就不适合创业吧。</p>
<p>有时你想拥有一段感情时，它不会那么快的到来，但当你准备忘却放下时，它却不期而至来到，让你措手不及……</p>
<p>想想从寒假结束到现在已经大半年没有回家了，曾经为了证明自己已经长大，没有他们的陪伴自己一样能行，于是来到了这块宝地。国庆这么长的假期也见不到他们，做什么都毫无意义……</p>
<p>《独立》</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[应届毕业生]]></title>
      <url>http://fingerart.me/2014/09/19/%E5%BA%94%E5%B1%8A%E6%AF%95%E4%B8%9A%E7%94%9F/</url>
      <content type="html"><![CDATA[<p>到了这个阶段，每个人心里都会暗暗承受着一种压力–就业。</p>
<p>每年中国的应届毕业生都上达数百万人，此时，每个人都在承受就业、父母、感情……压力。从此告别那个无(qian)忧(bu)无(gou)虑(yong)，心中只有一件事情（学习）的自己。</p>
<p>等22号的科目四考试结束后，基本上就没有任何干扰找工作的事情了，看似是一种解脱实际却束缚。这几天已经开始在网上投递自己的简历了，收到了不少公司的电话邀请面试，但有好几家都是中介或者培训机构<a id="more"></a>，倍感烦躁，又不缺乏真正的软件公司，可是离学校太远，之前经过反复思考，最终还是寻找与PHP相关的职位，虽然在学校学的是Java，但一直在看传智(毕老师)的教程，缺乏项目实战，没有什么把握，从而选择了有多个项目经验的PHP。后面仍会重拾Java向后衍生JavaWeb、Android……学习本就该一直坚持下去，我想以后即便不再从事code的工作，仍然继续。</p>
<p>转本与否，是我一直在深思的一个问题，直到这学期我才想好，已经迟了，但也没浪费时间。英语，这是我这辈子的敌人啊？怎么说呢，根基没有打好，想盖高楼大厦，没门。我觉得自己想要做一件事情，只要下了决心，就一定能坚持，一定能做到，但唯独英语(也许你会说，自己不想学，有什么办法，这好比一个有老婆、有房、有车的胖子，你非要让他减肥)……</p>
<p>选择不同或许人生不同！</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript开发时的五个小提示]]></title>
      <url>http://fingerart.me/2014/09/03/JavaScript%E5%BC%80%E5%8F%91%E6%97%B6%E7%9A%84%E4%BA%94%E4%B8%AA%E5%B0%8F%E6%8F%90%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>真是五个很quick的小提示：</p>
<h3 id="只在元素上使用submit事件"><a href="#只在元素上使用submit事件" class="headerlink" title="只在元素上使用submit事件"></a>只在元素上使用submit事件</h3><p>如果要在form中绑定事件处理程序时，应该只在元素上绑定submit事件，而不是给提交按钮绑定click事件。</p>
<p>March：这个方式固然很好，但是，公司开发时使用了Web Flow，一个页面就一个大form，而里面可能有若干个提交按钮，所以不得不把部分事件处理程序绑定在了提交按钮的click事件上。</p>
<a id="more"></a>
<h3 id="可点击的都应该是链接"><a href="#可点击的都应该是链接" class="headerlink" title="可点击的都应该是链接"></a>可点击的都应该是链接</h3><p>不要给除锚元素（）以外的元素绑定click事件。这一点对于键盘用户很重要，因为他们在仅通过键盘获取元素焦点时会遇到困难。</p>
<p>March：不过个人感觉锚元素还是应该只用作链接，而一些功能性的操作（比如Google Reader的Mark all as new），最好还是用来标注，accessibility的问题可以通过快捷键等方式解决。这样做可以更好的还原HTML元素的语义。</p>
<p>###简单的for循环优化</p>
<p>在你写一个for循环时，有个很简单的技巧能够提高性能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; ++i )</div><div class="line"><span class="comment">//使用下面的语句代替上面的：</span></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, j = elements.length; i &lt; j; ++i )</div></pre></td></tr></table></figure>
<p>这样可以把元素的个数（elements.length的值）储存在一个变量j中，这样就不必在每次循环时都计算一遍元素的个数。</p>
<h3 id="用匿名函数来作为事件处理程序"><a href="#用匿名函数来作为事件处理程序" class="headerlink" title="用匿名函数来作为事件处理程序"></a>用匿名函数来作为事件处理程序</h3><p>尤其是对于短小的函数，创建一个匿名函数会比使用一个命名函数的引用更具可读性。</p>
<p>anchor.onclick = function() { map.goToPosition( home ); return false; }</p>
<p>March：在较复杂的JavaScript开发时还是使用命名函数效率更高。</p>
<h3 id="使用Array-join代替字符串连接（concatenating-strings）"><a href="#使用Array-join代替字符串连接（concatenating-strings）" class="headerlink" title="使用Array.join代替字符串连接（concatenating strings）"></a>使用Array.join代替字符串连接（concatenating strings）</h3><p>在将很多字符串、变量等连接成一个很长的字符串时，将所有字符串和变量放入一个数组，然后用join方法将他们组成一个长字符串，这样无论从代码可读性还是从性能上都更胜于字符串连接。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = ‘There are’ + elements.length + ‘members <span class="keyword">in</span> the elements array.’;</div><div class="line"><span class="comment">//下面的替代上面</span></div><div class="line"><span class="keyword">var</span> text = [‘There are’, elements.length, ‘members <span class="keyword">in</span> the elements array.’].join(‘ ‘);</div></pre></td></tr></table></figure>
<blockquote>
<p>转载自互联网</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[科目二终已告一段落]]></title>
      <url>http://fingerart.me/2014/09/02/%E7%A7%91%E7%9B%AE%E4%BA%8C%E7%BB%88%E5%B7%B2%E5%91%8A%E4%B8%80%E6%AE%B5%E8%90%BD/</url>
      <content type="html"><![CDATA[<p>这次拿去驾驶证的过程相对重庆老家可谓漫漫长路,从14年3月报名，直至6月才上车，将我安排至了15号上车，在催促之下提前至8号，然后到了快考科目二的时候让我等待下一批，无赖之下的漫长等待ing。转眼到了8月15号，又跟着下一批的5位学员一起学习。<br>每次在上路练习的时候都不能避免被唐教练的严厉斥骂，但都能虚心接受，怎么也不能成为爸爸口中的马路杀手`(∩_∩)′，反而感谢他，不管出于何意。让我好笑的是有两个女生连汽车该走那边的道路都不知道，不明白中间的双黄线、单黄线等禁止标线的含义，这都是常识拉。听她们讲让学员强行观看的视频也是由朋友代劳播放完毕的，听到这儿我特地对她们无语啦。有一次感受到了中国的良好教育模式。</p>
<a id="more"></a>
<p>今天进行所有考试的第二项——科目二，包含倒车入库、坡道定点停车、直角转弯、曲线行驶、倒车入库五项。平时练习都是没有问题的，很少被教练说道，信心十足。昨天下午1点左右到达观山考验场，当场地的大门打开后，各位教练争先恐后地驾驶跟随多年的座驾（SANTANA）冲进去。由于熟悉场地的教练车太多，我们六个人一轮大约花了5个小时，至晚上10点才结束。<br>今天是科目二的正式考试，由姓名的拼音首字母排序，Z，理所当然的是最后一位啦。起初还替自己感到庆幸，但却并非自己所想。教练通知早上8点30分到达考场，漫长等待至下午1点多我们中的第一个人开始入场开始，实在可惜心里素质相对差一点，尝试了两次都没能及格。候考的考生太多，都已经没有了座位只得站在旁边等待，至下午4点左右才到我上车，教练送我上车时，由等待而引起的紧张心情早已烟消云散。等待，一直是我最讨厌的，宁愿让我做一些有意义的事情。<br>这个教练的教育方式相对严格一些，或许与学历有关吧，但我认为每个人都有自己的方式，目的都是一样的。每次上路，都能ma上一个下午，我不说话都已经感觉非常累了，可想而知。昨天晚上担心我们不过也是ma个不听，偶尔看到他在揉腰，大约10个小时没有休息过了，今天我们考试一直跟我们一起等待，考试中还在外面查看大声喊到：不要急、慢慢来、看到白线打方向……<br>不管是出于什么样的意图，我都能理解，外加我淡而无味的谢谢！</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Canvas绘制绚丽的倒计时]]></title>
      <url>http://fingerart.me/2014/08/30/Canvas%E7%BB%98%E5%88%B6%E7%BB%9A%E4%B8%BD%E7%9A%84%E5%80%92%E8%AE%A1%E6%97%B6/</url>
      <content type="html"><![CDATA[<p>最近想把一直没好好研究的HTML5和CSS3给搞定了，前天才去图书馆借了有关的书籍。<br>这个效果是跟着网上的一个教程制作的，还没来得及加入自己的想法，原教程上面本是一个显示倒计时的，为了省事而跳过了。<br>在里面学到了一个对js数组处理地方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js中没有删除某个角标元素后，后面的元素不能向前移动，可这样处理。</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> newL = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.length; i++) &#123;</div><div class="line">	<span class="keyword">if</span> (条件成立)</div><div class="line">		balls[newL++] = balls[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(balls.length &gt; newL) &#123;</div><div class="line">	balls.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<iframe width="900" height="400" src="/uploads/web/canvas-beautiful-countdown/index.html"></iframe>

<p><a href="/uploads/web/canvas-beautiful-countdown/index.html">查看Demo</a></p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet调用过程以及生命周期]]></title>
      <url>http://fingerart.me/2014/08/28/Servlet%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<iframe id="embed_dom" style="border: 1px solid #000; display: block; width: 600px; height: 400px;" name="embed_dom" src="http://www.processon.com/embed/53fdf6450cf27c33af9c2b51" frameborder="0" width="320" height="240"></iframe>]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决电驴:该内容尚未提供权利证明,无法提供下载]]></title>
      <url>http://fingerart.me/2014/08/25/%E8%A7%A3%E5%86%B3%E7%94%B5%E9%A9%B4-%E8%AF%A5%E5%86%85%E5%AE%B9%E5%B0%9A%E6%9C%AA%E6%8F%90%E4%BE%9B%E6%9D%83%E5%88%A9%E8%AF%81%E6%98%8E-%E6%97%A0%E6%B3%95%E6%8F%90%E4%BE%9B%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>该内容尚未提供权利证明，无法提供下载。</p>
</blockquote>
<p>在电驴找到了你想要的资源后, 可是却提示无法下载, 是不是有种fuck的冲动?</p>
<p>这是我以前遇到的问题, 后来找到了一个电驴的镜像网站, 真的非常感谢啊. 在博客记录一下, 免得给忘记了, 同时也分享给更多的盆友.</p>
<p>例如你找到的资源地址是: <a href="http://www.verycd.com/topics/*/*" target="_blank" rel="external">http://www.verycd.com/topics/*/*</a></p>
<p>将该地址改为: <a href="http://www.verycd.gdajie.com/topics/*/*" target="_blank" rel="external">http://www.verycd.gdajie.com/topics/*/*</a></p>
<p>这样就可以下载到这个资源了.</p>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[MySql学习笔记]]></title>
      <url>http://fingerart.me/2014/08/25/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="数据库的连接与关闭"><a href="#数据库的连接与关闭" class="headerlink" title="数据库的连接与关闭"></a>数据库的连接与关闭</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//连接数据库</div><div class="line">mysql -h 服务器主机地址 -u 用户名 -p</div><div class="line">Enter password:密码</div><div class="line">//关闭连接, 两者其一</div><div class="line">exit;</div><div class="line">quit;</div></pre></td></tr></table></figure>
<h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> 权限 <span class="keyword">ON</span> 数据库.数据表 <span class="keyword">TO</span> 用户名@登陆主机 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"密码"</span></div><div class="line">//例如</div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> fingerart@<span class="string">"%"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span>;//将所有数据库及其下面表的增删改查权限给了fingerart用户,可在任何主机下登陆</div><div class="line">//权限还可以使用 ALL</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;//刷新系统权限表。</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//第一次设置root密码可以使用以下命令：</div><div class="line">mysqladmin -h localhost -u root password NEWPASSWORD</div><div class="line"></div><div class="line">//如果你已经设置过密码了，需要要以下命令：</div><div class="line">mysqladmin -h localhost -u root -p'oldpassword' password newpass</div></pre></td></tr></table></figure>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//创建数据库</div><div class="line">mysql-&gt; CREATE DATABASE IF NOT EXISTS demodatabase;//如果demodatabase数据库不存在的话就创建</div><div class="line">//删除数据库</div><div class="line">mysql-&gt; DROP DATABASE IF EXISTS demodatabase;//如果demodatabase数据库存在的话就删除</div><div class="line">//显示已建立的所有数据库</div><div class="line">mysql-&gt; SHOW DATABASES;</div><div class="line">//打开某数据库为当前数据库使用</div><div class="line">mysql-&gt; USE demodatabase;</div></pre></td></tr></table></figure>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE [IF NOT EXISTS] user(</div><div class="line"> 字段名1 列类型 [属性] [索引],</div><div class="line"> 字段名2 列类型 [属性] [索引],</div><div class="line"> 字段名3 列类型 [属性] [索引],</div><div class="line"> 字段名n 列类型 [属性] [索引],</div><div class="line">)[表类型] [表字符集];</div><div class="line">//例如</div><div class="line">mysql-&gt; CREATE TABLE IF NOT EXISTS user(</div><div class="line">     -&gt; id INT NOT NULL AUTO_INCREMENT,</div><div class="line">     -&gt; name VARCHAR(10) NOT NULL,</div><div class="line">     -&gt; sex ENUM('男','女') NOT NULL DEFAULT '男',</div><div class="line">     -&gt; age TINYINT DEFAULT 0,</div><div class="line">     -&gt; PRIMARY KEY(id)</div><div class="line">     -&gt; );</div><div class="line">//显示表的详细属性</div><div class="line">mysql-&gt; DESC user;//前提是已经选择了某个数据库</div><div class="line">//删除表</div><div class="line">mysql-&gt; DROP TABLE IF EXISTS user;</div></pre></td></tr></table></figure>
<h3 id="增-删-改-查"><a href="#增-删-改-查" class="headerlink" title="增 删 改 查"></a>增 删 改 查</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//按字段插入</div><div class="line">mysql-&gt; INSERT INTO user('name','sex') VALUES('localhost/fingerart','男');//优点:可自由选择字段</div><div class="line">//非按字段插入</div><div class="line">mysql-&gt; INSERT INTO user VALUES(NULL,'localhost/fingerart','男','21');//每个字段都需要给值</div><div class="line">//查询</div><div class="line">mysql-&gt; SELECT id,name,sex FROM user;//查询该表的所有记录,显示id,name,sex字段;全部字段可由 * 代替</div><div class="line">mysql-&gt; SELECT * FROM user WHERE id='1';//查询id为1的记录,显示所有字段</div><div class="line">//更改</div><div class="line">mysql-&gt; UPDATE user SET name='FingerArt' WHERE id='1';//将user表中id为1的记录的name改为FingerArt</div><div class="line">mysql-&gt; UPDATE user SET age='0' WHERE id&gt;'1' &amp;&amp; id DELETE ROME user WHERE id='1';//删除user表中id=1的记录</div></pre></td></tr></table></figure>
<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ACTION</span></div><div class="line">//增加字段</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段  [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> 字段]</div><div class="line">//例如</div><div class="line">mysql-&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">class</span> TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span>;//默认添加在最后</div><div class="line">//修改字段</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CHANGE</span>(<span class="keyword">MODIFY</span>)</div><div class="line">//例如</div><div class="line">mysql-&gt; <span class="keyword">ALTER</span> <span class="keyword">user</span> <span class="keyword">CHANGE</span> <span class="keyword">class</span> classnum TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>;//<span class="keyword">CHANGE</span>可以修改字段名</div><div class="line">mysql-&gt; <span class="keyword">ALTER</span> <span class="keyword">user</span> <span class="keyword">MODIFY</span> <span class="keyword">class</span> TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>;//MODIFY不可以修改字段名</div><div class="line">//修改表名</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">AS</span> 新的表名</div></pre></td></tr></table></figure>
<h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 默认导出建表+数据插入语句</div><div class="line">mysqldump -u 用户名 -p 密码 database &gt; name.sql</div><div class="line"></div><div class="line">// 只导出建表语句</div><div class="line">mysqldump -u 用户名 -p 密码 <span class="_">-d</span> database &gt; name.sql</div><div class="line"></div><div class="line">// 只导出数据插入语句</div><div class="line">mysqldump -u 用户名 -p 密码 -t database &gt; name.sql</div></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//NULL</div><div class="line">NULL意味着 没有值/未知值,可以将NULL插入到表中,并检索,但不能对其进行算术运算,结果还是NULL;0/NULL意味着假,其它值意味着真.</div><div class="line">//类型转换</div><div class="line">1+'2' //会转换成1+2=3</div><div class="line">1+'a' //会被转成1+0=1</div><div class="line">//时间存储</div><div class="line">虽然MySql有日期时间类型,但是为了方便后面对时间进行计算等操作,最好将其存储为UNIX时间戳,这是基于PHP的Web项目中的常见方式.</div><div class="line">//字段属性</div><div class="line">UNSIGNED //只能设置数值类型</div><div class="line">ZEROFILL //只能设置数值类型,数值前面自动用0补齐不足的位数.</div><div class="line">AUTO_INCREMENT //自动增量属性</div></pre></td></tr></table></figure>
<h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(i <span class="built_in">int</span>) YPTE(<span class="keyword">ENGINE</span>)=MYISAM(<span class="keyword">INNODB</span>);//新建表时为表添加表类型</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux xampp 搭载环境之设置外部访问]]></title>
      <url>http://fingerart.me/2014/08/25/Linux-xampp-%E6%90%AD%E8%BD%BD%E7%8E%AF%E5%A2%83%E4%B9%8B%E8%AE%BE%E7%BD%AE%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>在Linux上 搭载xampp又遇到了一些问题, 有时在网上找的答案并不能解决我的问题. 这里记录一下我的解决方案.</p>
<p>在此之前我先说一下你会遇到的另外一点问题.</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netstat <span class="_">-a</span> | grep ‘mysql’</div><div class="line">netstat <span class="_">-a</span> | grep ‘http’</div></pre></td></tr></table></figure>
<p>提示:getnameinfo failed, 说明你没有开启Apache .键入以下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//下面以你安装的路径为准</div><div class="line">/opt/lampp/lampp start //开启Apache</div></pre></td></tr></table></figure>
<p>现在我说一下外部访问的问题, 关于这个我认为应该是版本的不同, 而导致具体的配置会有所差别.<br>我安装的是1.8.3版本的.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /opt/lampp/etc/extra/httpd-xampp.conf</div><div class="line">:<span class="built_in">set</span> nu</div><div class="line">//在配置文件里面用了正则匹配</div></pre></td></tr></table></figure>
<p>Require local //将光标移动到这里键入”i”,将改行改为: <code>Require all granted</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//完成后,键入</div><div class="line">:wq //保存编辑</div><div class="line"></div><div class="line">/opt/lampp/lampp restart //重启Apache, 搞定.</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> xampp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决file_exists函数检查含有中文名返回false]]></title>
      <url>http://fingerart.me/2014/08/25/%E8%A7%A3%E5%86%B3file-exists%E5%87%BD%E6%95%B0%E6%A3%80%E6%9F%A5%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87%E5%90%8D%E8%BF%94%E5%9B%9Efalse/</url>
      <content type="html"><![CDATA[<p>刚刚在项目中做一个删除含有中文名的文件时,先使用file_exists()进行检查该文件是否存在,不管我怎么调试,总是提示文件不存在,将地址复制到浏览器验证,地址没有错.有朋友做了下面的结论.</p>
<a id="more"></a>
<p>file_exists()函数在PHP中主要用来判断指定文件或目录是否存在，使用方法是很简单的，不少人都喜欢用这个函数，但细心的人会发现，file_exists函数在当网页为UTF8编码时，对所验证的文件名或目录名始终返回false，以下面的代码为例 ，是段很普通的file_exists()函数应用实例，像文件名中有中文，其结果是，无论文件是否存在，程序都返回文件不存在，也就是false：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (file_exists($filename))</div><div class="line"> retrun <span class="keyword">true</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line"> <span class="keyword">return</span> <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<p>下面是解决办法，也就是把中文转码，将UTF8编码转换为GB2312编码，现在返回结果一切正常了：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$filename = iconv(<span class="string">"UTF-8"</span>,<span class="string">"GB2312"</span>,$filename);</div><div class="line"><span class="keyword">if</span> (file_exists($filename))</div><div class="line">  retrun <span class="keyword">true</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站目录禁止显示设置]]></title>
      <url>http://fingerart.me/2014/08/25/%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95%E7%A6%81%E6%AD%A2%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>在浏览到一篇讲述使用wp插件有关的文章时, 提到了如果没有设置权限会看到/wp-content/uploads/目录下的所有文件.测试了一下自己的博客,确实如此.然后访问以前写的项目文件,同样可以访问.</p>
<p>这里只需cPanel管理面板,“高级”-&gt;“索引管理器”里，选择文件目录 public_html，选“无索引”，保存就OK了.</p>
<p>现在访问目录会显示403页面.</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP使用CURL 模拟登陆正方教务系统过程详解]]></title>
      <url>http://fingerart.me/2014/08/25/PHP%E4%BD%BF%E7%94%A8CURL-%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>这篇技术博文应该是这学期最后一篇了。</p>
<p>之前做的项目中使用了fsockopen模拟登陆飞信，然后进行发送短信的功能，然后又想到了模拟登陆学校的正方教务系统，就可以获取到数据了。于是使用火狐浏览器的firebug进行抓包。现在才明白高博学院的正方教务系统模拟登陆非常简单，下面是我抓包的过程：</p>
<a id="more"></a>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p><img src="/uploads/images/2014-08-25-01.jpg" alt=""></p>
<p>从POST请求中可以看出向<a href="http://ip/(palpckurpyrxad55cuxranfz)/default2.aspx发送的参数TextBox1是学号，TextBox2是登陆密码，__VIEWSTATE是必须的参数，所有在模拟登陆的时候这是必须的参数之一。登陆成功后向图片下面的那个地址(http:/ip/(palpckurpyrxad55cuxranfz)/xs_main.aspx?xh=012320242)跳转了。" target="_blank" rel="external">http://ip/(palpckurpyrxad55cuxranfz)/default2.aspx发送的参数TextBox1是学号，TextBox2是登陆密码，__VIEWSTATE是必须的参数，所有在模拟登陆的时候这是必须的参数之一。登陆成功后向图片下面的那个地址(http:/ip/(palpckurpyrxad55cuxranfz)/xs_main.aspx?xh=012320242)跳转了。</a></p>
<h3 id="页面请求"><a href="#页面请求" class="headerlink" title="页面请求"></a>页面请求</h3><p>对于后面页面的访问，查看代码发现打开的方式是iframe，跟直接打开没有区别，但是直接打开连接会被跳转到登陆界面，所以这里在打开一个页面的时候肯定有一个参数判断，于是查看了页面源代码，没有与这类有关的数据提交。我分别用火狐和谷歌进行查看是否存在COOKIE，谷歌可以看到cookie，但是火狐却没有。以为登陆之后的每次请求都会通过cookie的检测（这里纯属菜鸟的愚见），关于是否存在cookie的问题，我通过了下面的代码进行验证：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$cookie_file = tempnam(‘./temp’, ‘cookie’);<span class="comment">//创建一个具有唯一文件名的唯一文件</span></div><div class="line">curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie_file);<span class="comment">//在会话结束后存储COOKIE</span></div></pre></td></tr></table></figure>
<p>最后查看生成的文件为空，所以判断页面的请求不需要cookie。</p>
<p>但是即没有cookie，又没有提交其它的数据，为什么直接打开的连接不被通过而跳转至登陆界面呢？</p>
<p><img src="/uploads/images/2014-08-25-02.jpg" alt=""></p>
<p>或许是请求的头信息不完整？在一个一个将请求的头信息不全后，发现在请求一个页面时，必须有Referer的头信息。OK一切解决！</p>
<p>代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//登陆</span></div><div class="line">$login_url = ‘http:<span class="comment">//ip/(palpckurpyrxad55cuxranfz)/default2.aspx';//登陆地址及POST页面</span></div><div class="line">$post_fields = ‘__VIEWSTATE=dDwyOTIzOTAzMDY7Oz79I404t64pHCBQi38kvsPywO1hKg%<span class="number">3</span>D%<span class="number">3</span>D&amp;TextBox1=学号&amp;TextBox2=密码&amp;RadioButtonList1=%D1%A7%C9%FA&amp;Button1=’;<span class="comment">//POST参数</span></div><div class="line">$ch = curl_init($login_url);<span class="comment">//创建一个curl会话并获取登陆内容</span></div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);<span class="comment">//不取得反悔的头信息</span></div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">//获取到的内容是否输出到浏览器</span></div><div class="line">curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);<span class="comment">//使用POST提交</span></div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);<span class="comment">//提交POST参数</span></div><div class="line">curl_exec($ch);<span class="comment">//显示curl的内容并打印出来</span></div><div class="line">curl_close($ch);<span class="comment">//关闭curl会话</span></div></pre></td></tr></table></figure>
<h3 id="页面访问"><a href="#页面访问" class="headerlink" title="页面访问"></a>页面访问</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$url = ‘http:<span class="comment">//ip/(palpckurpyrxad55cuxranfz)/xsdjkscx.aspx?xh=学号&amp;xm=姓名&amp;gnmkdm=N121606';//访问某一页面的连接</span></div><div class="line">ch=curlinit(ch=curlinit(url);<span class="comment">//创建一个curl会话并获取登陆内容</span></div><div class="line">curl_setopt(ch,CURLOPTHEADER,<span class="number">0</span>);<span class="comment">//不取得反悔的头信息</span></div><div class="line">urlsetopt(ch,CURLOPTHEADER,<span class="number">0</span>);<span class="comment">//不取得反悔的头信息</span></div><div class="line">urlsetopt(ch, CURLOPT_RETURNTRANSFER, <span class="number">0</span>);<span class="comment">//获取到的内容是否输出到浏览器</span></div><div class="line">curl_setopt($ch, CURLOPT_REFERER, “http:<span class="comment">//ip/(palpckurpyrxad55cuxranfz)/xs_main.aspx?xh=学号“ );//这个请求的头信息是必须的，不然无法访问</span></div><div class="line">curl_setopt(ch,CURLOPTFOLLOWLOCATION,<span class="keyword">true</span>);<span class="comment">//执行跳转</span></div><div class="line">con = curl_exec(ch);<span class="comment">//显示curl的内容并打印出来</span></div><div class="line">curlclose(ch);<span class="comment">//显示curl的内容并打印出来</span></div><div class="line">curlclose(ch);<span class="comment">//关闭curl会话</span></div></pre></td></tr></table></figure>
<p>我将这个进行了一些优化, 写成了一个类并提供下载, 高博的学生可点击这个Demo进行测试.</p>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 模拟登陆 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你的高度取决你是否拥有这三颗心]]></title>
      <url>http://fingerart.me/2014/08/25/%E4%BD%A0%E7%9A%84%E9%AB%98%E5%BA%A6%E5%8F%96%E5%86%B3%E4%BD%A0%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E8%BF%99%E4%B8%89%E9%A2%97%E5%BF%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个人的高度取决于自己的是否有积极进取的进取心、敢于拼搏的决心、不言放弃的恒心。</p>
<p>————2013.12.14<br>等待2015年的结果！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP使用serialize将数组保存至文件]]></title>
      <url>http://fingerart.me/2014/08/25/PHP%E4%BD%BF%E7%94%A8serialize%E5%B0%86%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98%E8%87%B3%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>前段时间在开发微信公众平台的时候，打算使用session临时保存查询的数据，但是公众平台那不是一个完善的浏览器，不能存储COOKIE，无法保存session_id，也就是用不了session。于是乎就使用serialize()函数将一个数组写入文件，当我们需要使用这个数组的时候将文件读取出来再使用unserialize()转换为数组。</p>
<a id="more"></a>
<h3 id="数组写入文件函数"><a href="#数组写入文件函数" class="headerlink" title="数组写入文件函数"></a>数组写入文件函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将数组写入至文件中</div><div class="line"> * <span class="doctag">@param</span> unknown_type $fileName</div><div class="line"> * <span class="doctag">@param</span> unknown_type $arr</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">array2file</span><span class="params">($fileName, $arr)</span> </span>&#123;</div><div class="line">    $fp = fopen($fileName, <span class="string">'wb'</span>);</div><div class="line">    fwrite($fp, serialize($arr));</div><div class="line">    fclose($fp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取文件转换成数组"><a href="#读取文件转换成数组" class="headerlink" title="读取文件转换成数组"></a>读取文件转换成数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">将文件中的内容读出并转为数组</div><div class="line"><span class="doctag">@param</span> unknown_type $fileName</div><div class="line"><span class="doctag">@return</span> mixed</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">file2array</span><span class="params">(fileName)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(!file_exists(fileName) &#123;</div><div class="line">		<span class="keyword">exit</span>($fileName.<span class="string">" don't exists"</span>);</div><div class="line">	&#125;</div><div class="line">	fp=fopen(fp=fopen(fileName, ‘rb’);</div><div class="line">	str=fread(str=fread(fp, filesize(fileName));</div><div class="line">	returnunserialize(fileName));</div><div class="line">	returnunserialize(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客第一篇]]></title>
      <url>http://fingerart.me/2014/08/23/%E5%8D%9A%E5%AE%A2%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>我的博客于2013年7月17日正式开通了，欢迎大家来到我的博客<a href="http://fingerart.me">http://fingerart.me</a>,本博客用于记录我在学习上的历程、感情上的酸甜苦辣、生活上的点点滴滴。</p>
<p>在这里没有广告，没有喧嚣，有的只是博主的吐槽、唠唠以及流水章。</p>
<p>关于学习上的，我更倾向于web，所以会有前端的一些分享，当然也会有其它方面的博文以及可能也有你正在四处搜寻的资源；</p>
<p>关于感情上的你可以忽略；</p>
<p>关于生活上的你可以来此关注在我身边发生的逸闻趣事。</p>
]]></content>
      
        <categories>
            
            <category> 心情日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[权重之Weight为0的原因]]></title>
      <url>http://fingerart.me/2014/08/09/%E6%9D%83%E9%87%8D%E4%B9%8BWeight%E4%B8%BA0%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>线性布局中Child的最终宽度计算公式:</p>
<p>Child宽度 + 线性布局的剩余宽度 * Child权重数 / 线性布局的总权重数</p>
<p>最终, 要让宽度根据权重分配, 就让Child的宽度为0, 就占用了相应权重的相对于线性布局的宽度.</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fragment回退栈的注意事项]]></title>
      <url>http://fingerart.me/2014/08/09/Fragment%E5%9B%9E%E9%80%80%E6%A0%88%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>Fragment回退栈与非回退栈的混用, 会造成视图的重叠.</p>
<p>在Fragment的回退栈之后, replace了一个非回退栈的Fragment, 就会造成在回退的时候, 这个Fragment一直是可见的. 只有当回退栈都退出完毕了, 这个Fragment才会被销毁.</p>
<p>在做Fragment的回退的时候, 最好不要再填充非回退栈的Fragment.</p>
<p>在清除Fragment的时候有很多的参数, 这是每个参数的具体用法:</p>
<p>sfm. popBackStackImmediate (Son1Fragment . class. getName() , FragmentManager .POP_BACK_STACK_INCLUSIVE ); //移除至设置的Fragment(包含本身)</p>
<p>sfm. popBackStackImmediate (Son1Fragment . class. getName() , 0) ;//保留顶层的Fragment(保留本身)</p>
<p>sfm. popBackStackImmediate (null , 1) ;//移除所有的Fragment</p>
<p>sfm. popBackStackImmediate (null , 0) ;//与无参一样移除上一个Fragment</p>
<p>sfm. popBackStack (null , 1) ;//移除所有的Fragment</p>
<p>sfm. popBackStack (null , 0) ;//移除上一个Fragment<br>sfm. popBackStack (); //移除上一个Fragment</p>
<p>sfm. popBackStackImmediate (); //移除上一个Fragment</p>
]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RadioGroup调用check(id)方法时，onCheckedChanged方法被执行多次解决办法]]></title>
      <url>http://fingerart.me/2014/08/02/RadioGroup%E8%B0%83%E7%94%A8check-id-%E6%96%B9%E6%B3%95%E6%97%B6%EF%BC%8ConCheckedChanged%E6%96%B9%E6%B3%95%E8%A2%AB%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%AC%A1%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rgMenu.check(rgMenu.getChildAt(<span class="number">0</span>).getId());</div></pre></td></tr></table></figure>
<p>使用check选中的方式会调用onCheckedChanged多次, 这不是我们要的.</p>
<p>解决方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((RadioButton )rgMenu . findViewById( rgMenu. getChildAt( <span class="number">0</span>) . getId())) .setChecked ( <span class="keyword">true</span>);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Code </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://fingerart.me/2013/01/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
