<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>指尖上的艺术</title>
  <icon>https://www.gravatar.com/avatar/45a32213bef16e0014ba80a692477968</icon>
  <subtitle>学习的热情，不应为季节的变化而改变</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fingerart.me/"/>
  <updated>2018-02-28T09:40:24.913Z</updated>
  <id>http://fingerart.me/</id>
  
  <author>
    <name>George</name>
    <email>george@chengguo.io</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxJava源码浅析之理解操作符</title>
    <link href="http://fingerart.me/2018/02/08/RxJava%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E7%90%86%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://fingerart.me/2018/02/08/RxJava源码浅析之理解操作符/</id>
    <published>2018-02-08T10:04:05.000Z</published>
    <updated>2018-02-28T09:40:24.913Z</updated>
    
    <content type="html"><![CDATA[<p>操作符是为了解决对Observable对象的变换的问题，用于在Observable和最终的Subscriber之间控制、修改Observable发出的事件。</p><p>本文通过Filter和Skip操作符的源码来理解操作符的作用，最后可学会自定义操作符。</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Filter中主要是通过<code>OnSubscribeFilter</code>和<code>FilterSubscriber</code>代理原始的<code>Observable</code>和<code>Subscriber</code>完成筛选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">filter</span><span class="params">(Func1&lt;? <span class="keyword">super</span> T, Boolean&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建OnSubscribeFilter，将原始的Observable传入做代理工作</span></span><br><span class="line">        <span class="keyword">return</span> unsafeCreate(<span class="keyword">new</span> OnSubscribeFilter&lt;T&gt;(<span class="keyword">this</span>, predicate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnSubscribeFilter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Observable&lt;T&gt; source;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Func1&lt;? <span class="keyword">super</span> T, Boolean&gt; predicate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnSubscribeFilter</span><span class="params">(Observable&lt;T&gt; source, Func1&lt;? <span class="keyword">super</span> T, Boolean&gt; predicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">        <span class="keyword">this</span>.predicate = predicate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> T&gt; child)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建FilterSubscriber代理</span></span><br><span class="line">        FilterSubscriber&lt;T&gt; parent = <span class="keyword">new</span> FilterSubscriber&lt;T&gt;(child, predicate);</span><br><span class="line">        <span class="comment">//将FilterSubscriber的生命周期与真是的Subscriber绑定</span></span><br><span class="line">        child.add(parent);</span><br><span class="line">        <span class="comment">//将FilterSubscriber订阅在原始的Observable上</span></span><br><span class="line">        source.unsafeSubscribe(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主要完成Subscriber的代理下发工作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">boolean</span> result = predicate.call(t);</span><br><span class="line">            <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                actual.onNext(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            actual.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            actual.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Filter可以知道通过定义一个新的OnSubscribe可以完成对原始OnSubscribe的修改、控制。<br>除了定义一个全新的OnSubscribe外还可以通过Operator的方式来完成。</p><a id="more"></a><h3 id="Skip与自定义操作符"><a href="#Skip与自定义操作符" class="headerlink" title="Skip与自定义操作符"></a>Skip与自定义操作符</h3><p>自定义操作符我们可以通过<code>Skip</code> 操作符来学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Observable&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个OperatorSkip处理具体的操作符逻辑</span></span><br><span class="line">        <span class="keyword">return</span> lift(<span class="keyword">new</span> OperatorSkip&lt;T&gt;(count));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">lift</span><span class="params">(<span class="keyword">final</span> Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//lift通过创建一个新的OnSubscribeLift来完成Operator的代理</span></span><br><span class="line">        <span class="keyword">return</span> unsafeCreate(<span class="keyword">new</span> OnSubscribeLift&lt;T, R&gt;(onSubscribe, operator));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnSubscribeLift</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">OnSubscribe</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    OnSubscribe&lt;T&gt; parent;</span><br><span class="line"></span><br><span class="line">    Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator;</span><br><span class="line"></span><br><span class="line">    OnSubscribeLift(OnSubscribe&lt;T&gt; parent, Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator) &#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.operator = operator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> R&gt; o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Subscriber&lt;? <span class="keyword">super</span> T&gt; st = operator.call(o);<span class="comment">//获取操作符提供的Subscriber</span></span><br><span class="line">            st.onStart();</span><br><span class="line">            parent.call(st);<span class="comment">//将Subscriber订阅在原始的OnSubscribe上，并冷启动</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            o.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 与Filter操作符不同的是，将具体的逻辑封装到Operator中，只需要关注具体的逻辑和向下传递事件，不需要关心冷启动</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorSkip</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Observable</span>.<span class="title">Operator</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> toSkip;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OperatorSkip</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toSkip = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Subscriber&lt;? <span class="keyword">super</span> T&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> T&gt; child) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Subscriber&lt;T&gt;(child) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> skipped;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                child.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                child.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (skipped &gt;= toSkip) &#123;</span><br><span class="line">                    child.onNext(t);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    skipped += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后关于自定义操作符我们就通过实现 <code>Operator</code> 操作符完成。</p><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你按照该博文的内容进行直接使用。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作符是为了解决对Observable对象的变换的问题，用于在Observable和最终的Subscriber之间控制、修改Observable发出的事件。&lt;/p&gt;
&lt;p&gt;本文通过Filter和Skip操作符的源码来理解操作符的作用，最后可学会自定义操作符。&lt;/p&gt;
&lt;h3 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h3&gt;&lt;p&gt;Filter中主要是通过&lt;code&gt;OnSubscribeFilter&lt;/code&gt;和&lt;code&gt;FilterSubscriber&lt;/code&gt;代理原始的&lt;code&gt;Observable&lt;/code&gt;和&lt;code&gt;Subscriber&lt;/code&gt;完成筛选。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Observable&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Func1&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, Boolean&amp;gt; predicate)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//创建OnSubscribeFilter，将原始的Observable传入做代理工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unsafeCreate(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSubscribeFilter&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, predicate));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnSubscribeFilter&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Observable&amp;lt;T&amp;gt; source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Func1&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, Boolean&amp;gt; predicate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnSubscribeFilter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Observable&amp;lt;T&amp;gt; source, Func1&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T, Boolean&amp;gt; predicate)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.source = source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.predicate = predicate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; child)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//创建FilterSubscriber代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FilterSubscriber&amp;lt;T&amp;gt; parent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FilterSubscriber&amp;lt;T&amp;gt;(child, predicate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//将FilterSubscriber的生命周期与真是的Subscriber绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        child.add(parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//将FilterSubscriber订阅在原始的Observable上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source.unsafeSubscribe(parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * 主要完成Subscriber的代理下发工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FilterSubscriber&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Subscriber&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; result = predicate.call(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                actual.onNext(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            actual.onError(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            actual.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过Filter可以知道通过定义一个新的OnSubscribe可以完成对原始OnSubscribe的修改、控制。&lt;br&gt;除了定义一个全新的OnSubscribe外还可以通过Operator的方式来完成。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="RxJava" scheme="http://fingerart.me/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava源码浅析之工作原理</title>
    <link href="http://fingerart.me/2018/02/08/RxJava%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://fingerart.me/2018/02/08/RxJava源码浅析之工作原理/</id>
    <published>2018-02-08T09:04:05.000Z</published>
    <updated>2018-02-28T09:40:31.513Z</updated>
    
    <content type="html"><![CDATA[<p>通过 <code>Observable</code> 中的静态方法先创建 <code>OnSubscribe</code> 然后创建 <code>Observe</code> 并将 <code>OnSubscribe</code> 传入 <code>Observable</code> ，完成 <code>Observable</code> 的创建；<br>在冷启动中，<code>subscribe</code> 时会调用 <code>Observable</code> 中 <code>OnSubscribe</code> 的 <code>call</code> 方法开始工作。</p><h2 id="被观察者的创建过程"><a href="#被观察者的创建过程" class="headerlink" title="被观察者的创建过程"></a>被观察者的创建过程</h2><p>通过 <code>Observable</code> 的创建操作符创建被观察者，其底层实现主要是（以 <code>from</code> 为例）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * OnSubscribeFromIterable是现实了OnSubscribe的被观察者，其中包含了业务主要的逻辑。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">from</span><span class="params">(Iterable&lt;? extends T&gt; iterable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafeCreate(<span class="keyword">new</span> OnSubscribeFromIterable&lt;T&gt;(iterable));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * unsafeCreate创建Observable，并持有OnSubscribe。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">unsafeCreate</span><span class="params">(OnSubscribe&lt;T&gt; f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observable&lt;T&gt;(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="观察者的订阅与冷启动"><a href="#观察者的订阅与冷启动" class="headerlink" title="观察者的订阅与冷启动"></a>观察者的订阅与冷启动</h2><p>通过 <code>Observable#subscribe</code> 完成观察者的订阅，其中可直接订阅 <code>Action</code> ，其 <code>subscribe</code> 实现会将其转换成 <code>ActionSubscriber</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.subscribe(subscriber, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 订阅并冷启动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Subscription <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber, Observable&lt;T&gt; observable)</span> </span>&#123;</span><br><span class="line">        subscriber = <span class="keyword">new</span> SafeSubscriber&lt;T&gt;(subscriber);</span><br><span class="line"><span class="comment">//      ...</span></span><br><span class="line">        <span class="comment">//获得Observable并调用call,完成冷启动</span></span><br><span class="line">        observable.onSubscribe.call(subscriber);</span><br><span class="line">        <span class="keyword">return</span> subscriber;<span class="comment">//返回Subscription</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你按照该博文的内容进行直接使用。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 &lt;code&gt;Observable&lt;/code&gt; 中的静态方法先创建 &lt;code&gt;OnSubscribe&lt;/code&gt; 然后创建 &lt;code&gt;Observe&lt;/code&gt; 并将 &lt;code&gt;OnSubscribe&lt;/code&gt; 传入 &lt;code&gt;Observable&lt;/code&gt; ，完成 &lt;code&gt;Observable&lt;/code&gt; 的创建；&lt;br&gt;在冷启动中，&lt;code&gt;subscribe&lt;/code&gt; 时会调用 &lt;code&gt;Observable&lt;/code&gt; 中 &lt;code&gt;OnSubscribe&lt;/code&gt; 的 &lt;code&gt;call&lt;/code&gt; 方法开始工作。&lt;/p&gt;
&lt;h2 id=&quot;被观察者的创建过程&quot;&gt;&lt;a href=&quot;#被观察者的创建过程&quot; class=&quot;headerlink&quot; title=&quot;被观察者的创建过程&quot;&gt;&lt;/a&gt;被观察者的创建过程&lt;/h2&gt;&lt;p&gt;通过 &lt;code&gt;Observable&lt;/code&gt; 的创建操作符创建被观察者，其底层实现主要是（以 &lt;code&gt;from&lt;/code&gt; 为例）:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * OnSubscribeFromIterable是现实了OnSubscribe的被观察者，其中包含了业务主要的逻辑。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Observable&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Iterable&amp;lt;? extends T&amp;gt; iterable)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unsafeCreate(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSubscribeFromIterable&amp;lt;T&amp;gt;(iterable));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * unsafeCreate创建Observable，并持有OnSubscribe。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;function&quot;&gt;Observable&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;unsafeCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(OnSubscribe&amp;lt;T&amp;gt; f)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observable&amp;lt;T&amp;gt;(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="RxJava" scheme="http://fingerart.me/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava源码浅析之介绍</title>
    <link href="http://fingerart.me/2018/02/08/RxJava%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://fingerart.me/2018/02/08/RxJava源码浅析之介绍/</id>
    <published>2018-02-08T08:04:05.000Z</published>
    <updated>2018-02-28T09:39:50.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序库。</p></blockquote><ul><li>异步</li><li>简洁</li><li>可扩展的观察者模式</li></ul><p>第一次看到上面话理解起来比较抽象，通俗的说就是RxJava是一个运行在Java虚拟机上面通过可以观察的基于事件的序列来完成异步任务的库。</p><p><strong>本系列博文均在 <code>RxJava1.2.9</code> 下</strong></p><p>RxJava1.x版本将在2018年3月31日停止任何更新，所以，本系列博文仅仅了解RxJava的一些原理。可作为学习2.x的一个过渡。</p><h2 id="RxJava四个基本概念："><a href="#RxJava四个基本概念：" class="headerlink" title="RxJava四个基本概念："></a>RxJava四个基本概念：</h2><p>在学习RxJava之前一定要理解以下几个对象，否则无法理解源码。</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td>Observable</td><td>被观察者</td></tr><tr><td>Subscriber(Observer)</td><td>订阅者(观察者)</td></tr><tr><td>subscribe</td><td>订阅</td></tr></tbody></table><p><code>Observable</code> 和 <code>Observer</code> 通过 <code>subscribe</code> 实现订阅与被订阅关系，从而 <code>Observable</code> 可以在需要的时候发出事件来通知 <code>Observer</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                      onNext(param)</span><br><span class="line">                      onCompleted()</span><br><span class="line">+------------+        onError(error)       +----------+</span><br><span class="line">| Observable |----------------------------&gt;| Observer |</span><br><span class="line">+------------+                             +----------+</span><br></pre></td></tr></table></figure><a id="more"></a><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>onCompleted</td><td>事件队列完结</td></tr><tr><td>onNext</td><td>当前事件</td></tr><tr><td>onError</td><td>事件队列异常</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>onCompleted，RxJava不仅把每个事件单独处理，还会把他们看作一个队列。当不再有新的onNext()发出时，就会触发onComplete()作为标志。</li><li>onError，在事件处理过程中出现异常时，就会触发，同时队列自动终止，不允许再有事件发出。</li><li>在一个正确运行的事件序列中，onComplete() 和 onError() 有且只有一个，并且是事件序列中的最后一个。</li><li>onComplete和onError二者也是互斥的，即在队列中调用了其中一个，就不会再调用另一个。</li></ul><h2 id="Observables-的”冷“和”热“"><a href="#Observables-的”冷“和”热“" class="headerlink" title="Observables 的”冷“和”热“"></a>Observables 的”冷“和”热“</h2><p>Observable什么时候发射数据取决于Observable的实现；<br>一个”热“的Observable可能已创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）；<br>一个”冷“的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据队列。</p><p>在一些ReactiveX实现里，还存在一种Connectable的Observable，不管有没有观察者订阅它，都不会发射数据，除非Connect方法被调用。</p><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你按照该博文的内容进行直接使用。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;简洁&lt;/li&gt;
&lt;li&gt;可扩展的观察者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一次看到上面话理解起来比较抽象，通俗的说就是RxJava是一个运行在Java虚拟机上面通过可以观察的基于事件的序列来完成异步任务的库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本系列博文均在 &lt;code&gt;RxJava1.2.9&lt;/code&gt; 下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RxJava1.x版本将在2018年3月31日停止任何更新，所以，本系列博文仅仅了解RxJava的一些原理。可作为学习2.x的一个过渡。&lt;/p&gt;
&lt;h2 id=&quot;RxJava四个基本概念：&quot;&gt;&lt;a href=&quot;#RxJava四个基本概念：&quot; class=&quot;headerlink&quot; title=&quot;RxJava四个基本概念：&quot;&gt;&lt;/a&gt;RxJava四个基本概念：&lt;/h2&gt;&lt;p&gt;在学习RxJava之前一定要理解以下几个对象，否则无法理解源码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Observable&lt;/td&gt;
&lt;td&gt;被观察者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subscriber(Observer)&lt;/td&gt;
&lt;td&gt;订阅者(观察者)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subscribe&lt;/td&gt;
&lt;td&gt;订阅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; 和 &lt;code&gt;Observer&lt;/code&gt; 通过 &lt;code&gt;subscribe&lt;/code&gt; 实现订阅与被订阅关系，从而 &lt;code&gt;Observable&lt;/code&gt; 可以在需要的时候发出事件来通知 &lt;code&gt;Observer&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                      onNext(param)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------+        onError(error)       +----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Observable |----------------------------&amp;gt;| Observer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------+                             +----------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="RxJava" scheme="http://fingerart.me/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>“使用 Dockerfile 定制镜像”</title>
    <link href="http://fingerart.me/2017/06/08/%E4%BD%BF%E7%94%A8%20Dockerfile%20%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/"/>
    <id>http://fingerart.me/2017/06/08/使用 Dockerfile 定制镜像/</id>
    <published>2017-06-07T16:54:59.000Z</published>
    <updated>2018-02-08T07:40:14.821Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Docker" scheme="http://fingerart.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>理解Docker三大组件之镜像</title>
    <link href="http://fingerart.me/2017/06/06/%E7%90%86%E8%A7%A3Docker%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%95%9C%E5%83%8F/"/>
    <id>http://fingerart.me/2017/06/06/理解Docker三大组件之镜像/</id>
    <published>2017-06-06T15:40:55.000Z</published>
    <updated>2018-02-08T07:40:14.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><blockquote><p>操作系统分为内核和用户空间，对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p></blockquote><h2 id="镜像的分层存储"><a href="#镜像的分层存储" class="headerlink" title="镜像的分层存储"></a>镜像的分层存储</h2><p>因为完整的镜像体积过于庞大，Docker你用Union FS技术将镜像进行分层存储；与ISO不同，Docker镜像是一个虚拟概念，由一组文件系统组成或者说是多层文件系统联合组成。</p><p>镜像是一层一层构建的，前一层是后一层的基础，如果删除前一层，仅仅是标记为删除，在容器中看不见，但还是会存在镜像中，所以构建镜像时需额外小心。</p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p><code>docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;</code></p><ul><li>Docker Registry地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。</li><li>仓库名：&lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>我们现在可以通过创建一个容器并运行镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm nginx bash</span><br></pre></td></tr></table></figure><ul><li>-i 交互式操作</li><li>-t 终端</li><li>–rm 退出容器后，自动删除该容器</li></ul><h2 id="利用-commit-理解镜像构成"><a href="#利用-commit-理解镜像构成" class="headerlink" title="利用 commit 理解镜像构成"></a>利用 commit 理解镜像构成</h2><blockquote><p>镜像是容器的基础，每次执行 docker run 的时候都会指定哪个镜像作为容器运行的基础。</p></blockquote><p>以nginx镜像创建一个webserver的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>进入已启动的webserver容器的交互式shell终端，修改nginx默认的index.html内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it webserver bash</span><br><span class="line">root@3729b97e8226:/<span class="comment"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@3729b97e8226:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>查看webserver容器当前存储层的改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ docker diff webserver</span><br><span class="line">C /root</span><br><span class="line">A /root/.bash_history</span><br><span class="line">C /run</span><br><span class="line">C /usr</span><br><span class="line">C /usr/share</span><br><span class="line">C /usr/share/nginx</span><br><span class="line">C /usr/share/nginx/html</span><br><span class="line">C /usr/share/nginx/html/index.html</span><br><span class="line">C /var</span><br><span class="line">C /var/cache</span><br><span class="line">C /var/cache/nginx</span><br><span class="line">A /var/cache/nginx/client_temp</span><br><span class="line">A /var/cache/nginx/fastcgi_temp</span><br><span class="line">A /var/cache/nginx/proxy_temp</span><br><span class="line">A /var/cache/nginx/scgi_temp</span><br><span class="line">A /var/cache/nginx/uwsgi_temp</span><br></pre></td></tr></table></figure><p>此时，可以通过 <code>docker commit</code> 命令将webserver容器在原有镜像的基础上，再叠加容器存储层构建成一个新的镜像</p><p><code>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit \</span><br><span class="line">  --author <span class="string">"FingerArt &lt;george@chengguo.io&gt;"</span> \</span><br><span class="line">  --message <span class="string">"修改了默认网页"</span> \</span><br><span class="line">  webserver \</span><br><span class="line">  nginx:v2</span><br><span class="line">sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可查看到生成的 nginx:v2 镜像</span></span><br><span class="line">$ docker images nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nginx:v2 相比 nginx:latest 历史记录</span></span><br><span class="line">$ docker <span class="built_in">history</span> nginx:v2</span><br></pre></td></tr></table></figure><p>此时你可以通过 <code>docker run</code> 来创建容器。</p><h2 id="慎用-docker-commit"><a href="#慎用-docker-commit" class="headerlink" title="慎用 docker commit"></a>慎用 <code>docker commit</code></h2><p>前面通过 <code>docker diff webserver</code> 命令看到的信息中，出了改动了nginx的默认index.html文件外，还生成了一些缓存等文件， <code>docker commit</code> 进行了黑箱操作，生成了黑箱镜像，将不该添加的文件添加进了镜像中，如果删除上层的东西，却仍然存在镜像中，都将导致生成的镜像臃肿。<br>所以，除了一些特殊的场景，如黑客入侵保留现场等，都不要使用 <code>docker commit</code> 来制作镜像。</p><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://fingerart.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>解决mac下在线安装Visual Studio 无法连接到网络</title>
    <link href="http://fingerart.me/2017/06/04/mac%E4%B8%8B%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85Visual-Studio-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0%E7%BD%91%E7%BB%9C/"/>
    <id>http://fingerart.me/2017/06/04/mac下在线安装Visual-Studio-无法连接到网络/</id>
    <published>2017-06-04T14:16:07.000Z</published>
    <updated>2018-02-08T07:40:14.815Z</updated>
    
    <content type="html"><![CDATA[<p>准备要接手C#的项目了，自然需要好的工具(Visual Studio)。在微软的官网下载的安装包是一个在线的安装程序，在安装的第一步(检查网络环境)，出现无法连接到网络，有网络并且Shadowsocks也是开着全局的。</p><h3 id="一、安装proxychains4"><a href="#一、安装proxychains4" class="headerlink" title="一、安装proxychains4"></a>一、安装proxychains4</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install proxychains-ng</span><br></pre></td></tr></table></figure><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/etc/proxychains.conf</span><br></pre></td></tr></table></figure><h3 id="三、使用proxychains4安装"><a href="#三、使用proxychains4安装" class="headerlink" title="三、使用proxychains4安装"></a>三、使用proxychains4安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 open /Volumes/Visual\ Studio\ Installer/Install\ Visual\ Studio.app</span><br><span class="line"></span><br><span class="line">//open 所在路径的应用</span><br></pre></td></tr></table></figure><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;准备要接手C#的项目了，自然需要好的工具(Visual Studio)。在微软的官网下载的安装包是一个在线的安装程序，在安装的第一步(检查网络环境)，出现无法连接到网络，有网络并且Shadowsocks也是开着全局的。&lt;/p&gt;
&lt;h3 id=&quot;一、安装proxychains
      
    
    </summary>
    
    
      <category term="Visual Studio" scheme="http://fingerart.me/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Docker 新手入门</title>
    <link href="http://fingerart.me/2017/05/25/Docker-%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://fingerart.me/2017/05/25/Docker-新手入门/</id>
    <published>2017-05-24T16:07:48.000Z</published>
    <updated>2018-02-08T07:40:14.772Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://fingerart.qiniudn.com/image/docker.png" alt=""></p><p>该文章以Mac为例。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>请至Docker官网下载Mac版：<a href="https://www.docker.com/docker-mac" target="_blank" rel="noopener">https://www.docker.com/docker-mac</a></p><a id="more"></a><h2 id="创建Web服务器"><a href="#创建Web服务器" class="headerlink" title="创建Web服务器"></a>创建Web服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mac:~ fingerart$ docker run -d -p 80:80 --name webserver nginx</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'nginx:latest'</span> locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">ff3d52d8f55f: Pull complete</span><br><span class="line">b05436c68d6a: Pull complete</span><br><span class="line">961dd3f5d836: Pull complete</span><br><span class="line">Digest: sha256:12d30ce421ad530494d588f87b2328ddc3cae666e77ea1ae5ac3a6661e52cde6</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">97503a2fbca4c2796975085c7d6e853243522c974803e23805e6d301787e9133</span><br></pre></td></tr></table></figure><p>因为是第一次使用，Docker会从Docker Hub拉取Nginx，拉取完成后你可以在浏览器访问 <code>http://localhost</code> 即可访问到Nginx的欢迎页。<br>注意，如果你有程序占用了80端口，请先关闭。</p><p>运行 <code>docker ps</code> 你会看到正在运行的Web服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES</span><br><span class="line">97503a2fbca4        nginx               <span class="string">"nginx -g 'daemon ..."</span>   About a minute ago   Up About a minute   0.0.0.0:80-&gt;80/tcp   webserver</span><br></pre></td></tr></table></figure><p><img src="http://fingerart.qiniudn.com/image/docker-preview-nginx.png" alt=""></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>开启容器: <code>docker start webserver</code></li><li>停止容器: <code>docker stop webwerver</code></li><li>查看所有容器: <code>docker ps -a</code></li><li>移除容器: <code>docker rm -f webserver</code></li><li>移除镜像(通过IMAGE ID或名称): <code>docker rmi nginx</code></li></ul><blockquote><p>更多信息请查阅官方文档 <a href="https://docs.docker.com/docker-for-mac" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac</a></p><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/image/docker.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该文章以Mac为例。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;请至Docker官网下载Mac版：&lt;a href=&quot;https://www.docker.com/docker-mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.docker.com/docker-mac&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://fingerart.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>ITextPdf 签名集成问题</title>
    <link href="http://fingerart.me/2017/03/17/ITextPdf%E7%AD%BE%E5%90%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://fingerart.me/2017/03/17/ITextPdf签名问题/</id>
    <published>2017-03-17T13:12:56.000Z</published>
    <updated>2018-02-08T07:40:14.780Z</updated>
    
    <content type="html"><![CDATA[<p>因项目的需要需要使用对pdf进行签名，但使用ITextPdf进行签名遇到一些错误，官方说的不够明确，在此记录一下，供后面遇到该问题的朋友参考。</p><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p>引用的 ITextPdf 下</p><blockquote><p>java.lang.ClassNotFoundException: org.bouncycastle.*</p></blockquote><p>如果你遇到了这个错误你需要添加另外一个用于签名的库：<a href="https://www.bouncycastle.org" target="_blank" rel="noopener">bouncycastle</a> (bcprov-jdk15on-156.jar、bcpkix-jdk15on-156.jar、bcmail-jdk15on-156.jar)</p><p><strong>这里请不要引用错了ITextG库</strong></p><a id="more"></a><h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p>如果你引用了用于Android的ITextG</p><blockquote><p>Could not find class org.spongycastle.*</p></blockquote><p>因为这个库使用了用于Android加密的库 <a href="https://rtyley.github.io/spongycastle" target="_blank" rel="noopener">spongycastle</a>，而spongycastle是基于bouncycastle的。</p><p>请参考 <a href="http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android" target="_blank" rel="noopener">http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因项目的需要需要使用对pdf进行签名，但使用ITextPdf进行签名遇到一些错误，官方说的不够明确，在此记录一下，供后面遇到该问题的朋友参考。&lt;/p&gt;
&lt;h2 id=&quot;Q1&quot;&gt;&lt;a href=&quot;#Q1&quot; class=&quot;headerlink&quot; title=&quot;Q1&quot;&gt;&lt;/a&gt;Q1&lt;/h2&gt;&lt;p&gt;引用的 ITextPdf 下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.ClassNotFoundException: org.bouncycastle.*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你遇到了这个错误你需要添加另外一个用于签名的库：&lt;a href=&quot;https://www.bouncycastle.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bouncycastle&lt;/a&gt; (bcprov-jdk15on-156.jar、bcpkix-jdk15on-156.jar、bcmail-jdk15on-156.jar)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里请不要引用错了ITextG库&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IText" scheme="http://fingerart.me/tags/IText/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ-插件开发指南</title>
    <link href="http://fingerart.me/2017/02/16/IntelliJ-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://fingerart.me/2017/02/16/IntelliJ-插件开发指南/</id>
    <published>2017-02-16T04:05:40.000Z</published>
    <updated>2018-02-08T07:40:14.784Z</updated>
    
    <content type="html"><![CDATA[<p>待续……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待续……&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>关于ThinkPHP5 子域名路由问题</title>
    <link href="http://fingerart.me/2016/12/01/%E5%85%B3%E4%BA%8EThinkPHP5-%E5%AD%90%E5%9F%9F%E5%90%8D%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://fingerart.me/2016/12/01/关于ThinkPHP5-子域名路由问题/</id>
    <published>2016-11-30T18:18:43.000Z</published>
    <updated>2018-02-08T07:40:14.824Z</updated>
    
    <content type="html"><![CDATA[<p>准备在一个CRM的项目，本想使用Laravel框架的，但是并不怎么熟练，加上时间紧迫，最后决定使用ThinkPHP。</p><p>因为TP5是新出的一个版本，改动有些大，在看完文档中的路由（域名检测）部分后，就希望能做到这样的效果：</p><p>定义某个api路由规则时，可以根据 <code>api.domain.com</code> 子域名来检测；非 <code>api.domain.com</code> 子域名访问其他模块。但是根据文档配置后却会报 <strong>模块不存在</strong> </p><p>再三查看文档后决定没错，后来跟进源码查看关键位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//thinkphp/library/think/Route.php</span></span><br><span class="line"></span><br><span class="line"><span class="number">182</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($rule[<span class="string">'__domain__'</span>])) &#123;</span><br><span class="line"><span class="number">183</span>     <span class="keyword">self</span>::domain($rule[<span class="string">'__domain__'</span>]);</span><br><span class="line"><span class="number">184</span>     <span class="keyword">unset</span>($rule[<span class="string">'__domain__'</span>]);</span><br><span class="line"><span class="number">185</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">119</span> <span class="keyword">self</span>::$rules[<span class="string">'domain'</span>][$domain][<span class="string">'[bind]'</span>] = [$rule, $option, $pattern];</span><br><span class="line"></span><br><span class="line"><span class="number">1132</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($option[<span class="string">'domain'</span>]) &amp;&amp; !in_array($option[<span class="string">'domain'</span>], [$_SERVER[<span class="string">'HTTP_HOST'</span>], <span class="keyword">self</span>::$subDomain])) <span class="comment">// 域名检测</span></span><br></pre></td></tr></table></figure><p>会发现通过如下设置即可完成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//route.php</span></span><br><span class="line"></span><br><span class="line"><span class="string">'__domain__'</span>=&gt;[</span><br><span class="line">   <span class="string">'api'</span> =&gt; <span class="string">'api/User/index'</span>,</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">'user'</span> =&gt; [<span class="string">'api/User/create'</span>, [<span class="string">'method'</span> =&gt; <span class="string">'get'</span>, <span class="string">'domain'</span>=&gt;<span class="string">'api'</span>]],</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;准备在一个CRM的项目，本想使用Laravel框架的，但是并不怎么熟练，加上时间紧迫，最后决定使用ThinkPHP。&lt;/p&gt;
&lt;p&gt;因为TP5是新出的一个版本，改动有些大，在看完文档中的路由（域名检测）部分后，就希望能做到这样的效果：&lt;/p&gt;
&lt;p&gt;定义某个api路由规则时
      
    
    </summary>
    
    
      <category term="ThinkPHP" scheme="http://fingerart.me/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件ApiDebugger v1.0.0</title>
    <link href="http://fingerart.me/2016/10/24/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6ApiDebugger-v1-0-0/"/>
    <id>http://fingerart.me/2016/10/24/IntelliJ-IDEA-插件ApiDebugger-v1-0-0/</id>
    <published>2016-10-24T02:15:17.000Z</published>
    <updated>2018-02-08T07:40:14.783Z</updated>
    
    <content type="html"><![CDATA[<p>一直想做一个在IDEA上面直接进行api接口调试的插件，直到上周五才完成第一个版本，这个版本只有一个很简单的api调试功能，支持GET/POST，添加参数、Header、Cookie、File。<br>当然目前该插件还有很多不足的地方，不能支持参数信息的加密等，因此不能支持复杂的加密接口。后面我会弥补这一缺陷。</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>Settings</code> -&gt; <code>Plugins</code> -&gt; search: <code>Api Debugger</code> -&gt; <code>Install</code> -&gt; restart IDEA</p><h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><img src="http://fingerart.qiniudn.com/2016-10-24-2016-10-24_10-38-17.gif" alt="2016-10-24_10-38-17"></p><a id="more"></a><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a href="https://github.com/fingerart/ApiDebugger" target="_blank" rel="noopener">https://github.com/fingerart/ApiDebugger</a></p><blockquote><p>你的支持是我最大的动力，欢迎star、issue……</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想做一个在IDEA上面直接进行api接口调试的插件，直到上周五才完成第一个版本，这个版本只有一个很简单的api调试功能，支持GET/POST，添加参数、Header、Cookie、File。&lt;br&gt;当然目前该插件还有很多不足的地方，不能支持参数信息的加密等，因此不能支持复杂的加密接口。后面我会弥补这一缺陷。&lt;/p&gt;
&lt;h3 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Plugins&lt;/code&gt; -&amp;gt; search: &lt;code&gt;Api Debugger&lt;/code&gt; -&amp;gt; &lt;code&gt;Install&lt;/code&gt; -&amp;gt; restart IDEA&lt;/p&gt;
&lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/2016-10-24-2016-10-24_10-38-17.gif&quot; alt=&quot;2016-10-24_10-38-17&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 插件 Open Uploader 正式发布</title>
    <link href="http://fingerart.me/2016/10/12/IntelliJ-IDEA-%E6%8F%92%E4%BB%B6-Open-Uploader-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/"/>
    <id>http://fingerart.me/2016/10/12/IntelliJ-IDEA-插件-Open-Uploader-正式发布/</id>
    <published>2016-10-11T17:17:12.000Z</published>
    <updated>2018-02-08T07:40:14.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IntelliJ IDEA 文件上传插件，不限制任何站点，支持自定义参数</p></blockquote><p>可能你会遇到经常性的发布测试包给测试，也许你的选择是通过聊天工具发送、上传到一些测试的分发平台，之前我们公司使用的方式正是通过测试分发平台，但是在使用某个平台后，竟然开始收费了，😡，于是就打算做个IntelliJ IDEA插件，快速上传文件到自己公司的服务器或者其他地方。</p><p><img src="http://fingerart.qiniudn.com/2016-10-12-open_uploader_preview.gif" alt="open_uploader_previe"></p><a id="more"></a><p>源码：<a href="https://github.com/fingerart/Open-Uploader" target="_blank" rel="noopener">https://github.com/fingerart/Open-Uploader</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IntelliJ IDEA 文件上传插件，不限制任何站点，支持自定义参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能你会遇到经常性的发布测试包给测试，也许你的选择是通过聊天工具发送、上传到一些测试的分发平台，之前我们公司使用的方式正是通过测试分发平台，但是在使用某个平台后，竟然开始收费了，😡，于是就打算做个IntelliJ IDEA插件，快速上传文件到自己公司的服务器或者其他地方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://fingerart.qiniudn.com/2016-10-12-open_uploader_preview.gif&quot; alt=&quot;open_uploader_previe&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://fingerart.me/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Api文档自动生成之apiDoc简介</title>
    <link href="http://fingerart.me/2016/09/16/Api%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B9%8Bapidoc%E7%AE%80%E4%BB%8B/"/>
    <id>http://fingerart.me/2016/09/16/Api文档自动生成之apidoc简介/</id>
    <published>2016-09-16T04:25:26.000Z</published>
    <updated>2018-02-08T07:40:14.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/apidoc/apidoc" target="_blank" rel="noopener">apiDoc</a> 是一个基于nodejs自动生成RESTful Api文档的工具，提供了api版本差异比较、自定义末班等功能。</p><p>去年和朋友开发一个app，我包下了Android和后端，当时为了让他更好的看懂api和便于后期的维护，专门写了一个api的PHP程序，发现这个api程序还欠缺很多东西加上没有太多时间就不再维护了。后来发现了apiDoc这个库，一直放着没有时间来仔细看，刚好这两天有时间，把这个库学习完了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">npm</a> 的前提下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install apidoc -g</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 目录结构</span><br><span class="line"></span><br><span class="line">|- apidoc/</span><br><span class="line">  |- apidoc.json</span><br><span class="line">  |- header.md</span><br><span class="line">  |- footer.md</span><br><span class="line">  |- src/</span><br><span class="line">    |- _apidoc.java</span><br><span class="line">    |- User.java</span><br><span class="line">  |- doc/</span><br><span class="line">  |- template/</span><br></pre></td></tr></table></figure><h4 id="生成api文档"><a href="#生成api文档" class="headerlink" title="生成api文档"></a>生成api文档</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> apidoc -i src/ -o doc/</span><br></pre></td></tr></table></figure><h4 id="apidoc-参数"><a href="#apidoc-参数" class="headerlink" title="apidoc 参数"></a>apidoc 参数</h4><ul><li>-i<br>读取用于生成文档的目录，比如src目录</li><li>-o<br>生成api文档静态页面的目录</li><li>-t<br>自定义的模板目录，默认使用apiDoc的模板</li><li>-f “.*\.java$”<br>解析符合正则表达式的文件</li><li>-h<br>显示帮助信息</li></ul><h4 id="配置-apidoc-json"><a href="#配置-apidoc-json" class="headerlink" title="配置 apidoc.json"></a>配置 apidoc.json</h4><p>在执行 <code>apidoc</code> 命令的目录(apidoc/)创建apidoc.json文件，并加入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"FingerArt API Document"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A sample of User API document generated from apiDoc"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"FingerArt API"</span>,</span><br><span class="line">  <span class="attr">"url"</span> : <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"sampleUrl"</span>: <span class="string">"http://fingerart.me:44"</span>,</span><br><span class="line">  <span class="attr">"header"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Overview"</span>,</span><br><span class="line">    <span class="attr">"filename"</span>: <span class="string">"header.md"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"footer"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Copyright"</span>,</span><br><span class="line">    <span class="attr">"filename"</span>: <span class="string">"footer.md"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"template"</span>: &#123;</span><br><span class="line">    <span class="attr">"withGenerator"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>name<br>文档内容的最大标题</li><li>version<br>文档的版本号，一般保持在最新</li><li>description<br>文档的描述</li><li>title<br>显示网页的title</li><li>url<br>每个api地址前缀</li><li>sampleUrl<br>请求示例工具的地址前缀，当有此项时，会出现该工具</li><li>header/footer<br>文档的头部和尾部<ul><li>title<br>头/尾部标题</li><li>filename<br>头部markdown文件</li></ul></li><li>template<ul><li>withCompare<br>自动生成版本比较功能的文件，默认 <code>true</code></li><li>withGenerator<br>生成默认的apidoc版权，默认 <code>true</code></li></ul></li></ul><h4 id="apiDoc-注解"><a href="#apiDoc-注解" class="headerlink" title="apiDoc 注解"></a>apiDoc 注解</h4><ul><li>@api {method} path [title]<br><code>method</code> 请求方式: get/post/put…<br><code>path</code> User/register<br><code>title</code> 标题</li><li>@apiDescription text<br>api描述</li><li>@apiError [(group)] [{type}] field [description]</li><li>@apiErrorExample [{type}] [title]<br>example</li><li>@apiExample [{type}] title<br>example</li><li>@apiGroup name</li><li>@apiHeader [(group)] [{type}] [field=defaultValue] [description]</li><li>@apiHeaderExample [{type}] [title]<br>example</li><li>@apiIgnore [hint]</li><li>@apiName name</li><li>@apiParam [(group)] [{type}] [field=defaultValue] [description]</li><li>@apiParamExample [{type}] [title]<br>example</li><li>@apiPermission name</li><li>@apiSampleRequest url</li><li>@apiSuccess [(group)] [{type}] field [description]</li><li>@apiSuccessExample [{type}] [title]<br>example</li><li>@apiUse name</li><li>@apiVersion version</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>无法生成带有历史版本比较功能<br>必须同时加上 <code>@apiVersion</code> <code>@apiName</code> <code>@apiGroup</code> 这个三个注解</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>官方文档: <a href="http://apidocjs.com/" target="_blank" rel="noopener">http://apidocjs.com</a><br>官方示例: <a href="https://github.com/apidoc/apidoc/tree/master/example" target="_blank" rel="noopener">https://github.com/apidoc/apidoc/tree/master/example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apidoc/apidoc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apiDoc&lt;/a&gt; 是一个基于nodejs自动生成RESTful Api文档的工具，提供了api版本差异比较、自定义末班等功能。&lt;/p&gt;
&lt;p&gt;去年和朋友开发一个app，我包下了Android和后端，当时为了让他更好的看懂api和便于后期的维护，专门写了一个api的PHP程序，发现这个api程序还欠缺很多东西加上没有太多时间就不再维护了。后来发现了apiDoc这个库，一直放着没有时间来仔细看，刚好这两天有时间，把这个库学习完了。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;安装 &lt;a href=&quot;https://nodejs.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm&lt;/a&gt; 的前提下&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; npm install apidoc -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="apiDoc" scheme="http://fingerart.me/tags/apiDoc/"/>
    
  </entry>
  
  <entry>
    <title>Picasso源码解析 一</title>
    <link href="http://fingerart.me/2016/09/13/Picasso%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80/"/>
    <id>http://fingerart.me/2016/09/13/Picasso源码解析-一/</id>
    <published>2016-09-13T15:54:05.000Z</published>
    <updated>2018-02-08T07:40:14.805Z</updated>
    
    <content type="html"><![CDATA[<p>待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待续&lt;/p&gt;

      
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
      <category term="Picasso" scheme="http://fingerart.me/tags/Picasso/"/>
    
  </entry>
  
  <entry>
    <title>了解 Android HandlerThread</title>
    <link href="http://fingerart.me/2016/09/13/%E4%BA%86%E8%A7%A3-Android-HandlerThread/"/>
    <id>http://fingerart.me/2016/09/13/了解-Android-HandlerThread/</id>
    <published>2016-09-13T14:47:00.000Z</published>
    <updated>2018-02-08T07:40:14.818Z</updated>
    
    <content type="html"><![CDATA[<p>今天在分析 <a href="http://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a> 源码是时看到里面有一个HandlerThread类，之前从未见过，查看HandlerThread源码并跟踪Picasso的用法，理解了这个类的作用。通俗的讲就是这个线程不是用来直接执行自己的run方法的，而是将Message发送到该线程的MessageQueen中，间接工作。</p><ul><li><a href="/2015/08/08/Handler和Message-异步消息机制-1/" title="了解Handler消息机制1">了解Handler消息机制1</a></li><li><a href="/2015/08/10/Handler和Message-异步消息机制-2/" title="了解Handler消息机制2">了解Handler消息机制2</a></li></ul><h3 id="HandlerThread-源码"><a href="#HandlerThread-源码" class="headerlink" title="HandlerThread 源码"></a>HandlerThread 源码</h3><blockquote><p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p><p>HandlerThread是一个线程，该线程会创建一个Looper，Looper可用于创建Handler，必需要调用 <code>start()</code></p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   mTid = Process.myTid();</span><br><span class="line">   Looper.prepare();</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">       mLooper = Looper.myLooper();</span><br><span class="line">       notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line">   Process.setThreadPriority(mPriority);</span><br><span class="line">   onLooperPrepared();</span><br><span class="line">   Looper.loop();</span><br><span class="line">   mTid = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法在 <code>start()</code> 之后执行，创建Looper、MessageQueen，然后 <code>loop()</code> 让这个Looper工作。</p><h3 id="Picasso源码中的使用示例"><a href="#Picasso源码中的使用示例" class="headerlink" title="Picasso源码中的使用示例"></a>Picasso源码中的使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package com.squareup.picasso.Dispatcher</span></span><br><span class="line"></span><br><span class="line">Dispatcher(Context context, ExecutorService service</span><br><span class="line">, Handler mainThreadHandler,</span><br><span class="line">      Downloader downloader, Cache cache, Stats stats) &#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatcherThread = <span class="keyword">new</span> DispatcherThread();</span><br><span class="line">    <span class="keyword">this</span>.dispatcherThread.start();</span><br><span class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> DispatcherHandler(dispatcherThread.getLooper(), <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//some code ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispatchSubmit</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">    handler.sendMessage(handler.obtainMessage(REQUEST_SUBMIT, action));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package com.squareup.picasso.Dispatcher.DispatcherHandler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dispatcher dispatcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatcherHandler</span><span class="params">(Looper looper, Dispatcher dispatcher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        <span class="keyword">this</span>.dispatcher = dispatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">          <span class="keyword">case</span> REQUEST_SUBMIT:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">//some case ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用，你的一个回复即是对我的最大支持，如有任何疑问请留言。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在分析 &lt;a href=&quot;http://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Picasso&lt;/a&gt; 源码是时看到里面有一个HandlerThread类，之前从未见过，查看HandlerThread源码并跟踪Picasso的用法，理解了这个类的作用。通俗的讲就是这个线程不是用来直接执行自己的run方法的，而是将Message发送到该线程的MessageQueen中，间接工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/08/08/Handler和Message-异步消息机制-1/&quot; title=&quot;了解Handler消息机制1&quot;&gt;了解Handler消息机制1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/08/10/Handler和Message-异步消息机制-2/&quot; title=&quot;了解Handler消息机制2&quot;&gt;了解Handler消息机制2&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HandlerThread-源码&quot;&gt;&lt;a href=&quot;#HandlerThread-源码&quot; class=&quot;headerlink&quot; title=&quot;HandlerThread 源码&quot;&gt;&lt;/a&gt;HandlerThread 源码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.&lt;/p&gt;
&lt;p&gt;HandlerThread是一个线程，该线程会创建一个Looper，Looper可用于创建Handler，必需要调用 &lt;code&gt;start()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>无线连接-宿主机与VirtualBox中的Linux互相通信</title>
    <link href="http://fingerart.me/2016/09/04/%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8EVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/"/>
    <id>http://fingerart.me/2016/09/04/无线连接-宿主机与VirtualBox中的Linux互相通信/</id>
    <published>2016-09-04T11:47:37.000Z</published>
    <updated>2018-02-08T07:40:14.838Z</updated>
    
    <content type="html"><![CDATA[<p>有线连接中的配置方式在上篇博文已经讲过了。</p><h4 id="设置连接方式"><a href="#设置连接方式" class="headerlink" title="设置连接方式"></a>设置连接方式</h4><p>将网卡1设置为桥接网卡方式如图<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/BritualBox_Bird.png" alt=""></p><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>请参照你的宿主机设置好网关、掩码、ip地址、BOOTPROTO</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=08:00:27:12:41:D3</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">IPADDR=192.168.0.99</span><br><span class="line">GATEWAY=192.168.0.1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=cd17d691-d2be-54d0-8c7a-c1612cfbf631</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br></pre></td></tr></table></figure><p>填写完成后重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_test.gif" alt=""></p><p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wireless_connection_linux_test.gif" alt=""></p><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有线连接中的配置方式在上篇博文已经讲过了。&lt;/p&gt;
&lt;h4 id=&quot;设置连接方式&quot;&gt;&lt;a href=&quot;#设置连接方式&quot; class=&quot;headerlink&quot; title=&quot;设置连接方式&quot;&gt;&lt;/a&gt;设置连接方式&lt;/h4&gt;&lt;p&gt;将网卡1设置为桥接网卡方式如图&lt;br&gt;&lt;img src=&quot;http://77fzuw.com1.z0.glb.clouddn.com/image/BritualBox_Bird.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h4&gt;&lt;p&gt;请参照你的宿主机设置好网关、掩码、ip地址、BOOTPROTO&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>有线连接-宿主机跟VirtualBox中的Linux互相通信</title>
    <link href="http://fingerart.me/2016/09/04/%E6%9C%89%E7%BA%BF%E8%BF%9E%E6%8E%A5-%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%B7%9FVirtualBox%E4%B8%AD%E7%9A%84Linux%E4%BA%92%E7%9B%B8%E9%80%9A%E4%BF%A1/"/>
    <id>http://fingerart.me/2016/09/04/有线连接-宿主机跟VirtualBox中的Linux互相通信/</id>
    <published>2016-09-04T10:53:44.000Z</published>
    <updated>2018-02-08T07:40:14.841Z</updated>
    
    <content type="html"><![CDATA[<p>文中介绍了我在<strong>有线连接</strong>下，使用VirtualBox创建CentOS时遇到Linux访问外网和宿主机访问Linux的问题后的解决办法，文中宿主机是指实体到笔记本或者台式电脑。</p><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><p>Virtual中有6种连接方式，分别为：网络地址转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-Only）网络、通用驱动。<br>这里只讲后面会用到的2种方式的作用。</p><a id="more"></a><h4 id="网络地址转换（NAT）"><a href="#网络地址转换（NAT）" class="headerlink" title="网络地址转换（NAT）"></a>网络地址转换（NAT）</h4><p><strong>Linux可以访问宿主机</strong>，反向的无法访问。</p><h4 id="桥接网卡"><a href="#桥接网卡" class="headerlink" title="桥接网卡"></a>桥接网卡</h4><p><strong>宿主机可以访问Linux</strong>，反向无法访问。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>网卡1连接方式设置为<strong>网络地址转换（NAT）</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net1.png" alt=""><br>启用网卡2，连接方式设置为<strong>桥接网卡</strong><br><img src="http://77fzuw.com1.z0.glb.clouddn.com/image/virtualbox_wired_connection_net2.png" alt=""></p><h4 id="Linux配置"><a href="#Linux配置" class="headerlink" title="Linux配置"></a>Linux配置</h4><h4 id="配置eth0"><a href="#配置eth0" class="headerlink" title="配置eth0"></a>配置eth0</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>配置如下(千万不要配GATEWAY)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HWADDR=08:00:27:12:41:D3</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">IPADDR=192.168.0.99</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=dhcp</span><br></pre></td></tr></table></figure></p><h4 id="配置eth1"><a href="#配置eth1" class="headerlink" title="配置eth1"></a>配置eth1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth1</span><br></pre></td></tr></table></figure><p>配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth1</span><br><span class="line">HWADDR=08:00:27:EB:B7:9A</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">IPADDR=192.168.0.99</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=cd17d591-d5be-44d0-8c7a-c1682cfbf631</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">BOOTPROTO=static</span><br></pre></td></tr></table></figure></p><h3 id="重启network"><a href="#重启network" class="headerlink" title="重启network"></a>重启network</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>宿主机：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_test.gif" alt=""></p><p>Linux：<br><img src="http://77fzuw.com1.z0.glb.clouddn.com/gif/virtualbox_wired_connection_linux_test.gif" alt=""></p><blockquote><p>注:文章中可能有很多错误，也有可能出现无法使用的情况，因为此技术博文是我的学习笔记，我只是记载一些看到或者想到东西，所以我不推荐你来按照该博文的内容进行直接使用。谢谢~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文中介绍了我在&lt;strong&gt;有线连接&lt;/strong&gt;下，使用VirtualBox创建CentOS时遇到Linux访问外网和宿主机访问Linux的问题后的解决办法，文中宿主机是指实体到笔记本或者台式电脑。&lt;/p&gt;
&lt;h3 id=&quot;连接方式&quot;&gt;&lt;a href=&quot;#连接方式&quot; class=&quot;headerlink&quot; title=&quot;连接方式&quot;&gt;&lt;/a&gt;连接方式&lt;/h3&gt;&lt;p&gt;Virtual中有6种连接方式，分别为：网络地址转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-Only）网络、通用驱动。&lt;br&gt;这里只讲后面会用到的2种方式的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>认识与学习BASH</title>
    <link href="http://fingerart.me/2016/09/03/%E8%AE%A4%E8%AF%86%E4%B8%8E%E5%AD%A6%E4%B9%A0BASH/"/>
    <id>http://fingerart.me/2016/09/03/认识与学习BASH/</id>
    <published>2016-09-03T12:41:58.000Z</published>
    <updated>2018-02-08T07:40:14.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识shell"><a href="#认识shell" class="headerlink" title="认识shell"></a>认识shell</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>shell是使用者与内核沟通以达到理想工作的方式，Linux发展中出现多种shell，Bourne Again SHell是Linux使用的一个shell版本简称bash。</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>~/.bash_history</code> 记录了前一次登录是说运行的命令，当前登录说运行的命令记录在内存中，成功注销后悔记录到 <code>~/.bash_history</code> 中。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>命令的别名</p><h3 id="内建命令type"><a href="#内建命令type" class="headerlink" title="内建命令type"></a>内建命令type</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># type [-tpa] name</span></span><br><span class="line">选项与参数：</span><br><span class="line">    ：不加任何选项与参数时，<span class="built_in">type</span> 会显示出 name 是外部命令还是 bash 内建命令</span><br><span class="line">-t  ：当加入 -t 参数时，<span class="built_in">type</span> 会将 name 以底下这些字眼显示出他的意义：</span><br><span class="line">      file    ：表示为外部命令；</span><br><span class="line">      <span class="built_in">alias</span>   ：表示该命令为命令别名所配置的名称；</span><br><span class="line">      <span class="built_in">builtin</span> ：表示该命令为 bash 内建的命令功能；</span><br><span class="line">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</span><br><span class="line">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 <span class="built_in">alias</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;认识shell&quot;&gt;&lt;a href=&quot;#认识shell&quot; class=&quot;headerlink&quot; title=&quot;认识shell&quot;&gt;&lt;/a&gt;认识shell&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://fingerart.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://fingerart.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="http://fingerart.me/2016/08/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fingerart.me/2016/08/31/设计模式之状态模式/</id>
    <published>2016-08-31T11:09:02.000Z</published>
    <updated>2018-02-08T07:40:14.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇博文是我阅读《设计模式》中状态模式一章后的总结</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>考虑一个表示网络连接的类TCPConnection。一个TCPConnection对象的状态处于若干不同状态之一：建立连接（Established）、正在监听（Listening）、连接已关闭（Closed）。当一个TCPConnection对象收到其它对象的请求时，它根据自身的当前状态作出不同的反应。</p><a id="more"></a><h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h3><ul><li>一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><img src="http://www.plantuml.com/plantuml/svg/ZOz13e8m44NNpYach3IcahXaGO8cNi0Jb390az9YEneJmjs58iObcrczzoOVb94XuDLPfZVZ03k1TvPC6EOBkoE-dAxGq-D9WVS7645FhA-beYyvpDGWoy1UAXuNePMsCXJvtmlbYKDq2jHTRwWZo-6_ia6zR5HXtUI4rqtB8bzei6vIIiViEdJrEZt392uM-Tf808AIXl0CCO2rcqoFBNEVfUbDsuPyuVdK4Nm0">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此篇博文是我阅读《设计模式》中状态模式一章后的总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。&lt;/p&gt;
&lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h3&gt;&lt;p&gt;考虑一个表示网络连接的类TCPConnection。一个TCPConnection对象的状态处于若干不同状态之一：建立连接（Established）、正在监听（Listening）、连接已关闭（Closed）。当一个TCPConnection对象收到其它对象的请求时，它根据自身的当前状态作出不同的反应。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://fingerart.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 多版本构建指南</title>
    <link href="http://fingerart.me/2016/06/15/Android-Studio-%E5%A4%9A%E7%89%88%E6%9C%AC%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>http://fingerart.me/2016/06/15/Android-Studio-多版本构建指南/</id>
    <published>2016-06-14T16:00:00.000Z</published>
    <updated>2018-02-08T07:40:14.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在一个APP的基础上，构建另外一个APP，与之不同的是部分代码和资源改变<br>为了节约工作量和更好的后期维护，我们决定共用同一套代码。</p><p>像这种需求我已经遇到好几次了，这里只讲在Android Studio上进行多版本构建的步骤和一些配置</p><h3 id="多版本构建"><a href="#多版本构建" class="headerlink" title="多版本构建"></a>多版本构建</h3><h4 id="Gradle简介"><a href="#Gradle简介" class="headerlink" title="Gradle简介"></a>Gradle简介</h4><p>Gradle 是一个基于Ant和Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，这比我们的ANT使用XML构建配置要灵活的多。在编写配置时，你可以像编程一样灵活，Gradle是基于Groovy的DSL语言，完全兼容JAVA。</p><a id="more"></a><h4 id="了解-build-gradle"><a href="#了解-build-gradle" class="headerlink" title="了解 build.gradle"></a>了解 build.gradle</h4><p>现在我们需要如下表格的apk:</p><table><thead><tr><th></th><th>release</th><th>debug</th></tr></thead><tbody><tr><td>productA</td><td>productA(release版)</td><td>productA(debug版)</td></tr><tr><td>productB</td><td>productB(release版)</td><td>productB(debug版)</td></tr></tbody></table><p>通过这个表格可以看出，两个产品（共用同一套代码）可以生成4种类型的apk</p><p>build.gradle在每一个module都存在，它是用来构建我们的APP的。</p><ul><li>defaultConfig</li></ul><p>这个模块一些默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">applicationId &quot;me.fingerart.android&quot;</span><br><span class="line">minSdkVersion 13</span><br><span class="line">targetSdkVersion 23</span><br><span class="line">versionCode 1</span><br><span class="line">versionName &quot;1.0&quot;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>buildTypes</li></ul><p>构建的类型，一般是发行和debug两种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        minifyEnabled true</span><br><span class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</span><br><span class="line">        //signingConfig signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line">    debug &#123;</span><br><span class="line">        minifyEnabled false</span><br><span class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.txt&apos;</span><br><span class="line">        //signingConfig signingConfigs.debug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>productFlavors</li></ul><p>产品的变种，体现不同版本之前配置的差异，这也就是我们构建多个版本的主要配置了<br>productFlavors的配置会覆盖与defaultConfig中的相同配置，也就是说productFlavors+defaultConfig组成最终的配置<br>比如，productB的applicationId会覆盖defaultConfig，最后打出apk的applicationId是productB中的；而productA因为没有配置applicationId所以会使用defaultConfig中的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        productA &#123;</span><br><span class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_A&apos;</span><br><span class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_A&quot;&apos;</span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                    appkey_easeMob  : &apos;a&apos;,</span><br><span class="line">appkey_baidu : &apos;a&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        productB &#123;</span><br><span class="line">            applicationId &apos;com.hysd.skyworth.productb&apos;</span><br><span class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;APP_B&apos;</span><br><span class="line">            buildConfigField &apos;String&apos;, &apos;URL_PATH&apos;, &apos;&quot;http://fingerart.me/APP_B&quot;&apos;</span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line">                    appkey_easeMob : &apos;b&apos;,</span><br><span class="line">appkey_baidu   : &apos;b&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>你可以手动的添加上面我们介绍过的这些配置，你需要sync project才会生效。<br>你还可以<code>Project Structure(Ctrl+Shift+Alt+S) -&gt; 选中Module -&gt; flavors</code>进行配置</p><p>当你配置完成之后</p><h3 id="示例参考"><a href="#示例参考" class="headerlink" title="示例参考"></a>示例参考</h3><p><a href="https://github.com/fingerart" target="_blank" rel="noopener">https://github.com/fingerart</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;在一个APP的基础上，构建另外一个APP，与之不同的是部分代码和资源改变&lt;br&gt;为了节约工作量和更好的后期维护，我们决定共用同一套代码。&lt;/p&gt;
&lt;p&gt;像这种需求我已经遇到好几次了，这里只讲在Android Studio上进行多版本构建的步骤和一些配置&lt;/p&gt;
&lt;h3 id=&quot;多版本构建&quot;&gt;&lt;a href=&quot;#多版本构建&quot; class=&quot;headerlink&quot; title=&quot;多版本构建&quot;&gt;&lt;/a&gt;多版本构建&lt;/h3&gt;&lt;h4 id=&quot;Gradle简介&quot;&gt;&lt;a href=&quot;#Gradle简介&quot; class=&quot;headerlink&quot; title=&quot;Gradle简介&quot;&gt;&lt;/a&gt;Gradle简介&lt;/h4&gt;&lt;p&gt;Gradle 是一个基于Ant和Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，这比我们的ANT使用XML构建配置要灵活的多。在编写配置时，你可以像编程一样灵活，Gradle是基于Groovy的DSL语言，完全兼容JAVA。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://fingerart.me/categories/Code/"/>
    
    
      <category term="Android" scheme="http://fingerart.me/tags/Android/"/>
    
      <category term="Gradle" scheme="http://fingerart.me/tags/Gradle/"/>
    
  </entry>
  
</feed>
